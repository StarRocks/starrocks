{"statement":"SELECT concat('2024-03-01', '～', '2024-03-01') AS mock_261, tbl_mock_280.mock_276 AS mock_262, tbl_mock_280.mock_277 AS mock_263, tbl_mock_280.mock_159 AS mock_264, tbl_mock_280.mock_012 AS mock_265, tbl_mock_280.mock_169 AS mock_266, tbl_mock_280.mock_078 AS mock_267, tbl_mock_280.mock_033 AS mock_268, tbl_mock_280.mock_029 AS mock_269, tbl_mock_280.mock_278 AS mock_270, tbl_mock_280.mock_007 AS mock_271, tbl_mock_280.mock_183 AS mock_272, tbl_mock_280.mock_038 AS mock_273, tbl_mock_280.mock_186 AS mock_274, tbl_mock_280.mock_279 AS mock_275\nFROM (WITH tbl_mock_281 (mock_081, mock_089, mock_277, mock_077, mock_159, mock_012, mock_078, mock_065, mock_033, mock_029, mock_007, mock_038) AS (SELECT db_mock_000.tbl_mock_283.mock_081, db_mock_000.tbl_mock_283.mock_089, CASE WHEN (db_mock_000.tbl_mock_283.mock_008 IN ('WMDJ', 'JDDJ', 'SNG&SCO')) THEN db_mock_000.tbl_mock_283.mock_008 ELSE 'Others' END AS mock_277, db_mock_000.tbl_mock_283.mock_077, db_mock_092.tbl_mock_284.mock_159, db_mock_092.tbl_mock_284.mock_012, db_mock_092.tbl_mock_284.mock_078, db_mock_000.tbl_mock_283.mock_065, CASE WHEN (db_mock_000.tbl_mock_283.mock_008 = 'CBEC') THEN (ifnull(if((trim(db_mock_000.tbl_mock_283.mock_033)) = '', NULL, trim(db_mock_000.tbl_mock_283.mock_033)), 'CBEC')) ELSE (ifnull(if((trim(db_mock_000.tbl_mock_283.mock_033)) = '', NULL, trim(db_mock_000.tbl_mock_283.mock_033)), 'other')) END AS mock_033, CASE WHEN (db_mock_000.tbl_mock_283.mock_008 = 'CBEC') THEN (ifnull(if((trim(db_mock_000.tbl_mock_283.mock_029)) = '', NULL, trim(db_mock_000.tbl_mock_283.mock_029)), 'CBEC')) WHEN ((trim(db_mock_000.tbl_mock_283.mock_029)) NOT IN ('00', '01', '02', '03', '04', '05', '07', '08', '09', '10', '11', '13', '14', '15', '16', '17', '18', '20', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '40', '46', '80', '81', '82', '83', '84', '90', '91', '92', '93', '94', '95', '96', '98')) THEN 'other' ELSE (ifnull(if((trim(db_mock_000.tbl_mock_283.mock_029)) = '', NULL, trim(db_mock_000.tbl_mock_283.mock_029)), 'other')) END AS mock_029, CASE WHEN (db_mock_000.tbl_mock_283.mock_008 = 'CBEC') THEN (ifnull(if((trim(db_mock_000.tbl_mock_283.mock_007)) = '', NULL, trim(db_mock_000.tbl_mock_283.mock_007)), 'CBEC')) ELSE (ifnull(if((trim(db_mock_000.tbl_mock_283.mock_007)) = '', NULL, trim(db_mock_000.tbl_mock_283.mock_007)), 'other')) END AS mock_007, CASE WHEN (db_mock_000.tbl_mock_283.mock_008 = 'CBEC') THEN (ifnull(if((trim(db_mock_000.tbl_mock_283.mock_038)) = '', NULL, trim(db_mock_000.tbl_mock_283.mock_038)), 'CBEC')) ELSE (ifnull(if((trim(db_mock_000.tbl_mock_283.mock_038)) = '', NULL, trim(db_mock_000.tbl_mock_283.mock_038)), 'other')) END AS mock_038\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_283 LEFT OUTER JOIN db_mock_092.tbl_mock_093 AS tbl_mock_284 ON db_mock_000.tbl_mock_283.mock_077 = db_mock_092.tbl_mock_284.mock_169\nWHERE ((((((((db_mock_000.tbl_mock_283.mock_082 BETWEEN (CAST((date_format(add_months('2024-03-01', -12), '%Y%m')) AS INT)) AND (CAST((date_format('2024-03-01', '%Y%m')) AS INT))) AND (db_mock_000.tbl_mock_283.mock_081 >= (add_months('2024-03-01', -12)))) AND (db_mock_000.tbl_mock_283.mock_081 <= '2024-03-01')) AND (db_mock_000.tbl_mock_283.mock_062 = 430)) AND (db_mock_000.tbl_mock_283.mock_040 <= 0)) AND (CASE WHEN ('是' = '是') THEN (((((db_mock_092.tbl_mock_284.mock_169 IS NOT NULL) AND (((ifnull(db_mock_092.tbl_mock_284.mock_148, '2999-12-31')) > '2024-03-01') OR ((ifnull(db_mock_092.tbl_mock_284.mock_112, '2999-12-31')) > '2024-03-01'))) AND (db_mock_092.tbl_mock_284.mock_125 = 1)) AND (db_mock_092.tbl_mock_284.mock_107 <= '2024-03-01')) AND (db_mock_092.tbl_mock_284.mock_118 = 'Hyper')) ELSE (1 = 1) END)) AND ((NOT (db_mock_092.tbl_mock_284.mock_078 LIKE '%测试%')) OR (db_mock_092.tbl_mock_284.mock_078 IS NULL))) AND (CASE WHEN ('含' = '含') THEN ((ifnull(db_mock_000.tbl_mock_283.mock_042, 0)) IN (0, 1)) ELSE ((ifnull(db_mock_000.tbl_mock_283.mock_042, 0)) = 0) END)) AND (('ALL' IN ('ALL')) OR ((replace(db_mock_092.tbl_mock_284.mock_159, '区', '')) IN ('ALL')))) SELECT tbl_mock_283.mock_276, tbl_mock_283.mock_277, tbl_mock_283.mock_159, tbl_mock_283.mock_012, tbl_mock_283.mock_169, tbl_mock_283.mock_078, tbl_mock_283.mock_033, tbl_mock_283.mock_029, tbl_mock_283.mock_007, tbl_mock_283.mock_038, tbl_mock_283.mock_279, tbl_mock_289.mock_278, tbl_mock_288.mock_183, tbl_mock_287.mock_186\nFROM (SELECT '是' AS mock_276, tbl_mock_283.mock_277, tbl_mock_283.mock_159, tbl_mock_283.mock_012, tbl_mock_283.mock_169, tbl_mock_283.mock_078, tbl_mock_283.mock_033, tbl_mock_283.mock_029, tbl_mock_283.mock_007, tbl_mock_283.mock_038, count(DISTINCT CASE WHEN ((tbl_mock_286.mock_089 IS NULL) AND (tbl_mock_283.mock_285 = 1)) THEN tbl_mock_283.mock_089 END) AS mock_279\nFROM (SELECT CASE WHEN ((concat('ALL')) = 'ALL') THEN 'ALL' ELSE tbl_mock_283.mock_277 END AS mock_277, CASE WHEN ((concat('ALL')) = 'ALL') THEN 'ALL' ELSE tbl_mock_283.mock_159 END AS mock_159, CASE WHEN ((concat('ALL')) = 'ALL') THEN 'ALL' ELSE tbl_mock_283.mock_012 END AS mock_012, CASE WHEN ((concat('ALL')) = 'ALL') THEN 'ALL' ELSE tbl_mock_283.mock_077 END AS mock_169, CASE WHEN ((concat('ALL')) = 'ALL') THEN 'ALL' ELSE tbl_mock_283.mock_078 END AS mock_078, CASE WHEN ((concat('FMCG 2', 'FMCG 1')) = 'ALL') THEN 'ALL' ELSE tbl_mock_283.mock_033 END AS mock_033, CASE WHEN ((concat('ALL')) = 'ALL') THEN 'ALL' ELSE tbl_mock_283.mock_029 END AS mock_029, CASE WHEN ((concat('ALL')) = 'ALL') THEN 'ALL' ELSE tbl_mock_283.mock_007 END AS mock_007, CASE WHEN ((concat('ALL')) = 'ALL') THEN 'ALL' ELSE tbl_mock_283.mock_038 END AS mock_038, tbl_mock_283.mock_089, tbl_mock_283.mock_081, rank() OVER (PARTITION BY tbl_mock_283.mock_089, CASE WHEN ((concat('ALL')) = 'ALL') THEN 1 ELSE tbl_mock_283.mock_277 END, tbl_mock_283.mock_081 ORDER BY tbl_mock_283.mock_065 ASC ) AS mock_285\nFROM tbl_mock_281 AS tbl_mock_283\nWHERE (tbl_mock_283.mock_081 >= '2024-03-01') AND (tbl_mock_283.mock_081 <= '2024-03-01')) tbl_mock_283 LEFT OUTER JOIN (SELECT DISTINCT CASE WHEN ((concat('ALL')) = 'ALL') THEN 'ALL' ELSE tbl_mock_283.mock_277 END AS mock_277, tbl_mock_283.mock_089, tbl_mock_283.mock_081\nFROM tbl_mock_281 AS tbl_mock_283\nWHERE ((tbl_mock_283.mock_081 >= (add_months('2024-03-01', -12))) AND (tbl_mock_283.mock_081 < '2024-03-01')) AND (CASE WHEN ((concat('ALL')) = 'ALL') THEN (1 = 1) ELSE (tbl_mock_283.mock_277 IN ('ALL')) END)) tbl_mock_286 ON (((tbl_mock_283.mock_089 = tbl_mock_286.mock_089) AND (tbl_mock_283.mock_277 = tbl_mock_286.mock_277)) AND (tbl_mock_286.mock_081 > (add_months(tbl_mock_283.mock_081, -12)))) AND (tbl_mock_286.mock_081 < tbl_mock_283.mock_081)\nWHERE (((((((CASE WHEN ((concat('ALL')) = 'ALL') THEN (1 = 1) ELSE (tbl_mock_283.mock_277 IN ('ALL')) END) AND (CASE WHEN ((concat('ALL')) = 'ALL') THEN (1 = 1) ELSE (tbl_mock_283.mock_159 IN ('ALL')) END)) AND (CASE WHEN ((concat('ALL')) = 'ALL') THEN (1 = 1) ELSE (tbl_mock_283.mock_012 IN ('ALL')) END)) AND (CASE WHEN ((concat('ALL')) = 'ALL') THEN (1 = 1) ELSE (tbl_mock_283.mock_169 IN ('ALL')) END)) AND (CASE WHEN ((concat('FMCG 2', 'FMCG 1')) = 'ALL') THEN (1 = 1) ELSE (tbl_mock_283.mock_033 IN ('FMCG 2', 'FMCG 1')) END)) AND (CASE WHEN ((concat('ALL')) = 'ALL') THEN (1 = 1) ELSE (tbl_mock_283.mock_029 IN ('ALL')) END)) AND (CASE WHEN ((concat('ALL')) = 'ALL') THEN (1 = 1) ELSE (tbl_mock_283.mock_007 IN ('ALL')) END)) AND (CASE WHEN ((concat('ALL')) = 'ALL') THEN (1 = 1) ELSE (tbl_mock_283.mock_038 IN ('ALL')) END)\nGROUP BY tbl_mock_283.mock_277, tbl_mock_283.mock_159, tbl_mock_283.mock_012, tbl_mock_283.mock_169, tbl_mock_283.mock_078, tbl_mock_283.mock_033, tbl_mock_283.mock_029, tbl_mock_283.mock_007, tbl_mock_283.mock_038) tbl_mock_283 LEFT OUTER JOIN (SELECT db_mock_092.tbl_mock_180.mock_221, db_mock_092.tbl_mock_180.mock_007, db_mock_092.tbl_mock_180.mock_038, max(db_mock_092.tbl_mock_180.mock_186) AS mock_186\nFROM db_mock_092.tbl_mock_180\nWHERE db_mock_092.tbl_mock_180.mock_186 IS NOT NULL\nGROUP BY db_mock_092.tbl_mock_180.mock_221, db_mock_092.tbl_mock_180.mock_007, db_mock_092.tbl_mock_180.mock_038) tbl_mock_287 ON ((tbl_mock_283.mock_038 = tbl_mock_287.mock_038) AND (tbl_mock_283.mock_007 = tbl_mock_287.mock_007)) AND (tbl_mock_283.mock_029 = tbl_mock_287.mock_221) LEFT OUTER JOIN (SELECT db_mock_092.tbl_mock_180.mock_221, db_mock_092.tbl_mock_180.mock_007, max(db_mock_092.tbl_mock_180.mock_183) AS mock_183\nFROM db_mock_092.tbl_mock_180\nWHERE db_mock_092.tbl_mock_180.mock_183 IS NOT NULL\nGROUP BY db_mock_092.tbl_mock_180.mock_221, db_mock_092.tbl_mock_180.mock_007) tbl_mock_288 ON (tbl_mock_283.mock_007 = tbl_mock_288.mock_007) AND (tbl_mock_283.mock_029 = tbl_mock_288.mock_221) LEFT OUTER JOIN (SELECT db_mock_092.tbl_mock_180.mock_221, max(db_mock_092.tbl_mock_180.mock_219) AS mock_278\nFROM db_mock_092.tbl_mock_180\nWHERE db_mock_092.tbl_mock_180.mock_219 IS NOT NULL\nGROUP BY db_mock_092.tbl_mock_180.mock_221) tbl_mock_289 ON tbl_mock_283.mock_029 = tbl_mock_289.mock_221\nWHERE (datediff('2024-03-01', '2024-03-01')) <= 90) tbl_mock_280 LIMIT 20001","table_meta":{"db_mock_000.tbl_mock_001":"CREATE TABLE db_mock_000.tbl_mock_001 (\nmock_082 int(11) ,\nmock_081 date ,\nmock_089 varchar(200) ,\nmock_060 varchar(200) ,\nmock_009 varchar(200) ,\nmock_010 varchar(200) ,\nmock_088 varchar(200) ,\nmock_057 varchar(200) ,\nmock_059 varchar(200) ,\nmock_011 varchar(200) ,\nmock_064 varchar(200) ,\nmock_039 varchar(200) ,\nmock_072 varchar(200) ,\nmock_056 varchar(200) ,\nmock_023 varchar(200) ,\nmock_022 varchar(200) ,\nmock_020 varchar(200) ,\nmock_019 varchar(200) ,\nmock_024 varchar(200) ,\nmock_016 varchar(200) ,\nmock_017 varchar(200) ,\nmock_015 varchar(200) ,\nmock_055 varchar(200) ,\nmock_067 varchar(200) ,\nmock_077 varchar(200) ,\nmock_078 varchar(200) ,\nmock_079 varchar(200) ,\nmock_021 varchar(200) ,\nmock_063 varchar(200) ,\nmock_085 varchar(200) ,\nmock_086 varchar(200) ,\nmock_076 varchar(200) ,\nmock_049 varchar(200) ,\nmock_048 varchar(200) ,\nmock_030 varchar(200) ,\nmock_044 varchar(200) ,\nmock_043 varchar(200) ,\nmock_073 varchar(200) ,\nmock_014 varchar(200) ,\nmock_004 varchar(200) ,\nmock_087 varchar(200) ,\nmock_065 varchar(200) ,\nmock_074 varchar(200) ,\nmock_026 varchar(200) ,\nmock_018 varchar(200) ,\nmock_066 varchar(200) ,\nmock_062 varchar(200) ,\nmock_061 decimal128(30, 4) ,\nmock_025 decimal128(30, 4) ,\nmock_068 decimal128(30, 4) ,\nmock_069 decimal128(30, 4) ,\nmock_050 int(11) ,\nmock_045 int(11) ,\nmock_052 decimal128(30, 4) ,\nmock_053 decimal128(30, 4) ,\nmock_090 int(11) ,\nmock_031 decimal128(30, 4) ,\nmock_054 decimal128(30, 4) ,\nmock_080 decimal128(30, 4) ,\nmock_091 int(11) ,\nmock_002 varchar(200) ,\nmock_003 varchar(200) ,\nmock_033 varchar(200) ,\nmock_029 varchar(200) ,\nmock_027 varchar(200) ,\nmock_028 varchar(200) ,\nmock_007 varchar(200) ,\nmock_005 varchar(200) ,\nmock_006 varchar(200) ,\nmock_038 varchar(200) ,\nmock_036 varchar(200) ,\nmock_037 varchar(200) ,\nmock_046 ARRAY<varchar(200)> ,\nmock_047 ARRAY<varchar(200)> ,\nmock_058 varchar(200) ,\nmock_083 varchar(200) ,\nmock_075 varchar(200) ,\nmock_071 varchar(200) ,\nmock_032 varchar(200) ,\nmock_070 varchar(200) ,\nmock_012 varchar(200) ,\nmock_013 varchar(200) ,\nmock_034 varchar(200) ,\nmock_035 varchar(200) ,\nmock_041 int(11) ,\nmock_040 int(11) ,\nmock_084 decimal128(20, 5) ,\nmock_051 decimal128(20, 5) ,\nmock_008 varchar(200) ,\nmock_042 int(11) \n) ENGINE= OLAP \nDUPLICATE KEY(mock_082, mock_081, mock_089, mock_060, mock_009)\nPARTITION BY RANGE(mock_082)\n(PARTITION p202101 VALUES [(\"202101\"), (\"202102\")),\nPARTITION p202102 VALUES [(\"202102\"), (\"202103\")),\nPARTITION p202103 VALUES [(\"202103\"), (\"202104\")),\nPARTITION p202104 VALUES [(\"202104\"), (\"202105\")),\nPARTITION p202105 VALUES [(\"202105\"), (\"202106\")),\nPARTITION p202106 VALUES [(\"202106\"), (\"202107\")),\nPARTITION p202107 VALUES [(\"202107\"), (\"202108\")),\nPARTITION p202108 VALUES [(\"202108\"), (\"202109\")),\nPARTITION p202109 VALUES [(\"202109\"), (\"202110\")),\nPARTITION p202110 VALUES [(\"202110\"), (\"202111\")),\nPARTITION p202111 VALUES [(\"202111\"), (\"202112\")),\nPARTITION p202112 VALUES [(\"202112\"), (\"202113\")),\nPARTITION p202201 VALUES [(\"202201\"), (\"202202\")),\nPARTITION p202202 VALUES [(\"202202\"), (\"202203\")),\nPARTITION p202203 VALUES [(\"202203\"), (\"202204\")),\nPARTITION p202204 VALUES [(\"202204\"), (\"202205\")),\nPARTITION p202205 VALUES [(\"202205\"), (\"202206\")),\nPARTITION p202206 VALUES [(\"202206\"), (\"202207\")),\nPARTITION p202207 VALUES [(\"202207\"), (\"202208\")),\nPARTITION p202208 VALUES [(\"202208\"), (\"202209\")),\nPARTITION p202209 VALUES [(\"202209\"), (\"202210\")),\nPARTITION p202210 VALUES [(\"202210\"), (\"202211\")),\nPARTITION p202211 VALUES [(\"202211\"), (\"202212\")),\nPARTITION p202212 VALUES [(\"202212\"), (\"202213\")),\nPARTITION p202301 VALUES [(\"202301\"), (\"202302\")),\nPARTITION p202302 VALUES [(\"202302\"), (\"202303\")),\nPARTITION p202303 VALUES [(\"202303\"), (\"202304\")),\nPARTITION p202304 VALUES [(\"202304\"), (\"202305\")),\nPARTITION p202305 VALUES [(\"202305\"), (\"202306\")),\nPARTITION p202306 VALUES [(\"202306\"), (\"202307\")),\nPARTITION p202307 VALUES [(\"202307\"), (\"202308\")),\nPARTITION p202308 VALUES [(\"202308\"), (\"202309\")),\nPARTITION p202309 VALUES [(\"202309\"), (\"202310\")),\nPARTITION p202310 VALUES [(\"202310\"), (\"202311\")),\nPARTITION p202311 VALUES [(\"202311\"), (\"202312\")),\nPARTITION p202312 VALUES [(\"202312\"), (\"202313\")),\nPARTITION p202401 VALUES [(\"202401\"), (\"202402\")),\nPARTITION p202402 VALUES [(\"202402\"), (\"202403\")),\nPARTITION p202403 VALUES [(\"202403\"), (\"202404\")),\nPARTITION p202404 VALUES [(\"202404\"), (\"202405\")),\nPARTITION p202405 VALUES [(\"202405\"), (\"202406\")),\nPARTITION p202406 VALUES [(\"202406\"), (\"202407\")),\nPARTITION p202407 VALUES [(\"202407\"), (\"202408\")),\nPARTITION p202408 VALUES [(\"202408\"), (\"202409\")),\nPARTITION p202409 VALUES [(\"202409\"), (\"202410\")),\nPARTITION p202410 VALUES [(\"202410\"), (\"202411\")),\nPARTITION p202411 VALUES [(\"202411\"), (\"202412\")),\nPARTITION p202412 VALUES [(\"202412\"), (\"202413\")),\nPARTITION p202501 VALUES [(\"202501\"), (\"202502\")),\nPARTITION p202502 VALUES [(\"202502\"), (\"202503\")),\nPARTITION p202503 VALUES [(\"202503\"), (\"202504\")),\nPARTITION p202504 VALUES [(\"202504\"), (\"202505\")),\nPARTITION p202505 VALUES [(\"202505\"), (\"202506\")),\nPARTITION p202506 VALUES [(\"202506\"), (\"202507\")),\nPARTITION p202507 VALUES [(\"202507\"), (\"202508\")),\nPARTITION p202508 VALUES [(\"202508\"), (\"202509\")),\nPARTITION p202509 VALUES [(\"202509\"), (\"202510\")),\nPARTITION p202510 VALUES [(\"202510\"), (\"202511\")),\nPARTITION p202511 VALUES [(\"202511\"), (\"202512\")),\nPARTITION p202512 VALUES [(\"202512\"), (\"202513\")))\nDISTRIBUTED BY HASH(mock_082, mock_081, mock_089) BUCKETS 90 \nPROPERTIES (\n\"replication_num\" = \"1\",\n\"dynamic_partition.enable\" = \"true\",\n\"dynamic_partition.time_unit\" = \"MONTH\",\n\"dynamic_partition.time_zone\" = \"Asia/Shanghai\",\n\"dynamic_partition.start\" = \"-2147483648\",\n\"dynamic_partition.end\" = \"3\",\n\"dynamic_partition.prefix\" = \"p\",\n\"dynamic_partition.buckets\" = \"30\",\n\"dynamic_partition.history_partition_num\" = \"0\",\n\"dynamic_partition.replication_num\" = \"3\",\n\"dynamic_partition.start_day_of_month\" = \"1\"\n);","db_mock_092.tbl_mock_093":"CREATE TABLE db_mock_092.tbl_mock_093 (\nmock_081 date ,\nmock_169 varchar(50) ,\nmock_078 varchar(2000) ,\nmock_166 varchar(2000) ,\nmock_168 varchar(2000) ,\nmock_167 varchar(2000) ,\nmock_118 varchar(50) ,\nmock_170 varchar(50) ,\nmock_171 varchar(200) ,\nmock_173 varchar(50) ,\nmock_172 varchar(50) ,\nmock_143 varchar(50) ,\nmock_153 varchar(50) ,\nmock_136 varchar(50) ,\nmock_126 varchar(50) ,\nmock_125 varchar(50) ,\nmock_107 date ,\nmock_147 date ,\nmock_158 date ,\nmock_100 varchar(50) ,\nmock_099 varchar(50) ,\nmock_148 date ,\nmock_112 date ,\nmock_071 varchar(500) ,\nmock_159 varchar(500) ,\nmock_032 varchar(500) ,\nmock_109 varchar(500) ,\nmock_155 varchar(500) ,\nmock_156 varchar(500) ,\nmock_157 varchar(500) ,\nmock_070 varchar(500) ,\nmock_102 varchar(500) ,\nmock_103 varchar(500) ,\nmock_105 varchar(500) ,\nmock_012 varchar(500) ,\nmock_104 varchar(500) ,\nmock_013 varchar(500) ,\nmock_095 varchar(5000) ,\nmock_097 varchar(5000) ,\nmock_094 varchar(5000) ,\nmock_096 varchar(5000) ,\nmock_165 varchar(200) ,\nmock_164 varchar(200) ,\nmock_119 varchar(200) ,\nmock_120 varchar(2000) ,\nmock_160 varchar(200) ,\nmock_161 varchar(2000) ,\nmock_110 varchar(200) ,\nmock_111 varchar(2000) ,\nmock_131 varchar(50) ,\nmock_139 varchar(50) ,\nmock_124 varchar(50) ,\nmock_123 varchar(50) ,\nmock_138 varchar(50) ,\nmock_134 varchar(50) ,\nmock_132 varchar(50) ,\nmock_137 varchar(50) ,\nmock_135 varchar(50) ,\nmock_140 varchar(50) ,\nmock_133 varchar(50) ,\nmock_142 varchar(50) ,\nmock_114 varchar(500) ,\nmock_113 varchar(500) ,\nmock_162 varchar(500) ,\nmock_116 varchar(500) ,\nmock_115 varchar(500) ,\nmock_141 varchar(500) ,\nmock_174 decimal128(32, 4) ,\nmock_098 decimal128(32, 4) ,\nmock_145 decimal128(32, 4) ,\nmock_121 decimal128(32, 4) ,\nmock_149 decimal128(32, 4) ,\nmock_130 varchar(50) ,\nmock_128 varchar(50) ,\nmock_129 varchar(50) ,\nmock_106 varchar(500) ,\nmock_176 int(11) ,\nmock_144 int(11) ,\nmock_154 int(11) ,\nmock_146 int(11) ,\nmock_175 int(11) ,\nmock_117 varchar(500) ,\nmock_127 varchar(50) ,\nmock_150 varchar(200) ,\nmock_179 varchar(500) ,\nmock_178 varchar(500) ,\nmock_152 int(11) ,\nmock_151 int(11) ,\nmock_101 varchar(500) ,\nmock_122 varchar(500) ,\nmock_163 varchar(500) ,\nmock_108 varchar(500) ,\nmock_014 varchar(50) ,\nmock_177 varchar(500) ,\nmock_087 varchar(50) ,\nmock_034 varchar(50) \n) ENGINE= OLAP \nUNIQUE KEY(mock_081, mock_169)\nDISTRIBUTED BY HASH(mock_169) BUCKETS 10 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);","db_mock_092.tbl_mock_180":"CREATE TABLE db_mock_092.tbl_mock_180 (\nmock_049 varchar(65533) ,\nmock_207 varchar(65533) ,\nmock_190 varchar(65533) ,\nmock_195 varchar(65533) ,\nmock_085 varchar(65533) ,\nmock_231 varchar(65533) ,\nmock_233 varchar(65533) ,\nmock_232 varchar(65533) ,\nmock_221 varchar(65533) ,\nmock_220 varchar(65533) ,\nmock_219 varchar(65533) ,\nmock_038 varchar(65533) ,\nmock_187 varchar(65533) ,\nmock_186 varchar(65533) ,\nmock_230 varchar(65533) ,\nmock_229 varchar(65533) ,\nmock_228 varchar(65533) ,\nmock_007 varchar(65533) ,\nmock_184 varchar(65533) ,\nmock_183 varchar(65533) ,\nmock_033 varchar(65533) ,\nmock_216 varchar(65533) ,\nmock_218 varchar(65533) ,\nmock_200 varchar(65533) ,\nmock_201 varchar(65533) ,\nmock_191 varchar(65533) ,\nmock_199 varchar(65533) ,\nmock_196 varchar(65533) ,\nmock_202 varchar(65533) ,\nmock_198 decimal64(11, 4) ,\nmock_197 decimal64(11, 4) ,\nmock_205 decimal64(11, 4) ,\nmock_194 varchar(65533) ,\nmock_203 decimal64(11, 4) ,\nmock_204 varchar(65533) ,\nmock_192 decimal64(11, 4) ,\nmock_193 varchar(65533) ,\nmock_181 decimal64(11, 4) ,\nmock_185 decimal64(11, 4) ,\nmock_222 varchar(65533) ,\nmock_225 varchar(65533) ,\nmock_226 varchar(65533) ,\nmock_206 varchar(65533) ,\nmock_244 varchar(65533) ,\nmock_243 varchar(65533) ,\nmock_236 varchar(65533) ,\nmock_237 varchar(65533) ,\nmock_238 varchar(65533) ,\nmock_234 varchar(65533) ,\nmock_239 varchar(65533) ,\nmock_235 varchar(65533) ,\nmock_240 varchar(65533) ,\nmock_241 decimal64(11, 4) ,\nmock_242 int(11) ,\nmock_214 int(11) ,\nmock_211 int(11) ,\nmock_213 varchar(65533) ,\nmock_212 decimal64(11, 4) ,\nmock_245 int(11) ,\nmock_209 decimal64(11, 4) ,\nmock_208 decimal64(11, 4) ,\nmock_210 varchar(65533) ,\nmock_217 varchar(65533) ,\nmock_227 varchar(65533) ,\nmock_002 varchar(65533) ,\nmock_003 varchar(65533) ,\nmock_215 varchar(65533) ,\nmock_182 varchar(65533) ,\nmock_188 decimal128(30, 4) ,\nmock_223 decimal128(30, 4) ,\nmock_189 varchar(65533) ,\nmock_224 varchar(65533) ,\nmock_034 varchar(65533) \n) ENGINE= OLAP \nDUPLICATE KEY(mock_049)\nDISTRIBUTED BY HASH(mock_049) BUCKETS 2 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);"},"table_row_count":{"db_mock_092.tbl_mock_093":{"tbl_mock_093":596},"db_mock_000.tbl_mock_001":{"p202310":85487574,"p202311":79056942,"p202309":90702174,"p202301":143975035,"p202312":87616645,"p202302":83840094,"p202401":91529973,"p202303":87705438,"p202402":114658841,"p202304":90106822,"p202403":83405788,"p202305":91432418,"p202306":87275377,"p202307":102637492,"p202308":100685165},"db_mock_092.tbl_mock_180":{"tbl_mock_180":4673218}},"column_statistics":{"db_mock_092.tbl_mock_093":{"mock_148":"[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN","mock_125":"[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN","mock_107":"[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN","mock_078":"[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN","mock_112":"[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN","mock_118":"[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN","mock_169":"[-Infinity, Infinity, 0.0, 3.9832214765100673, 596.0] ESTIMATE"},"db_mock_000.tbl_mock_001":{"mock_077":"[-Infinity, Infinity, 0.0, 0.006475, 332.0] ESTIMATE","mock_033":"[-Infinity, Infinity, 0.01051, 9.5E-5, 5.0] ESTIMATE","mock_082":"[202302.0, 202403.0, 0.0, 4.0, 8.0] ESTIMATE","mock_089":"[-Infinity, Infinity, 0.0, 4.7124, 47810.0] ESTIMATE","mock_042":"[0.0, 1.0, 0.0, 4.0, 2.0] ESTIMATE","mock_040":"[0.0, 1.0, 0.0, 4.0, 2.0] ESTIMATE","mock_062":"[-Infinity, Infinity, 0.0, 3.0E-5, 2.0] ESTIMATE","mock_008":"[-Infinity, Infinity, 0.0, 2.15E-4, 7.0] ESTIMATE","mock_081":"[1.6751808E9, 1.7092224E9, 0.0, 4.0, 10.0] ESTIMATE","mock_065":"[-Infinity, Infinity, 0.0, 4.87065, 56741.0] ESTIMATE"},"db_mock_092.tbl_mock_180":{"mock_007":"[-Infinity, Infinity, 0.0, 9.0E-4, 90.0] ESTIMATE","mock_221":"[-Infinity, Infinity, 0.0, 5.4E-4, 54.0] ESTIMATE","mock_183":"[-Infinity, Infinity, 0.128885, 0.00894, 436.0] ESTIMATE","mock_186":"[-Infinity, Infinity, 0.286975, 0.078215, 2759.0] ESTIMATE","mock_219":"[-Infinity, Infinity, 0.004885, 9.0E-4, 49.0] ESTIMATE","mock_038":"[-Infinity, Infinity, 0.0, 0.03512, 1757.0] ESTIMATE"}},"session_variables":"{\"cbo_cte_reuse\":true,\"character_set_connection\":\"utf8\",\"cbo_use_correlated_join_estimate\":true,\"enable_insert_strict\":true,\"enable_connector_adaptive_io_tasks\":true,\"tx_isolation\":\"REPEATABLE-READ\",\"cbo_cte_reuse_rate_v2\":1.15,\"character_set_results\":\"utf8\",\"query_excluding_mv_names\":\"\",\"enable_rewrite_simple_agg_to_meta_scan\":false,\"enable_adaptive_sink_dop\":true,\"consistent_hash_virtual_number\":32,\"enable_profile\":false,\"load_mem_limit\":17179869184,\"cbo_eq_base_type\":\"varchar\",\"enable_materialized_view_for_insert\":false,\"large_decimal_underlying_type\":\"panic\",\"sql_safe_updates\":0,\"runtime_filter_early_return_selectivity\":0.05,\"enable_local_shuffle_agg\":true,\"select_ratio_threshold\":0.15,\"query_delivery_timeout\":300,\"collation_database\":\"utf8_general_ci\",\"spill_mem_table_size\":104857600,\"follower_query_forward_mode\":\"\",\"cbo_use_lock_db\":false,\"new_planner_agg_stage\":0,\"use_compute_nodes\":-1,\"collation_connection\":\"utf8_general_ci\",\"resource_group\":\"\",\"profile_limit_fold\":true,\"enable_materialized_view_plan_cache\":true,\"spill_operator_max_bytes\":1048576000,\"cbo_max_reorder_node_use_dp\":10,\"enable_hive_column_stats\":true,\"enable_groupby_use_output_alias\":false,\"global_runtime_filter_wait_timeout\":20,\"forward_to_leader\":false,\"count_distinct_column_buckets\":1024,\"cross_join_cost_penalty\":1000000,\"query_cache_agg_cardinality_limit\":5000000,\"enable_pipeline_query_statistic\":true,\"cboPushDownAggregateMode_v1\":-1,\"window_partition_mode\":1,\"enable_deliver_batch_fragments\":true,\"enable_tablet_internal_parallel_v2\":true,\"interpolate_passthrough\":true,\"enable_incremental_mv\":false,\"cbo_push_down_topn_limit\":0,\"SQL_AUTO_IS_NULL\":false,\"event_scheduler\":\"OFF\",\"max_pipeline_dop\":64,\"broadcast_right_table_scale_factor\":10,\"materialized_view_rewrite_mode\":\"DEFAULT\",\"enable_simplify_case_when\":true,\"runtime_join_filter_push_down_limit\":1024000,\"big_query_log_cpu_second_threshold\":480,\"div_precision_increment\":4,\"runtime_adaptive_dop_max_block_rows_per_driver_seq\":16384,\"sql_mode_v2\":32,\"hdfs_backend_selector_scan_range_shuffle\":false,\"pipeline_profile_level\":1,\"parallel_fragment_exec_instance_num\":2,\"max_scan_key_num\":-1,\"net_read_timeout\":60,\"streaming_preaggregation_mode\":\"auto\",\"hive_partition_stats_sample_size\":3000,\"enable_mv_planner\":false,\"enable_collect_table_level_scan_stats\":true,\"profile_timeout\":2,\"cbo_push_down_aggregate\":\"global\",\"spill_encode_level\":7,\"enable_query_dump\":false,\"global_runtime_filter_build_max_size\":67108864,\"enable_rewrite_sum_by_associative_rule\":true,\"query_cache_hot_partition_num\":3,\"enable_prune_complex_types\":true,\"query_cache_type\":0,\"max_parallel_scan_instance_num\":-1,\"query_cache_entry_max_rows\":409600,\"enable_mv_optimizer_trace_log\":false,\"connector_io_tasks_per_scan_operator\":16,\"enable_materialized_view_union_rewrite\":true,\"sql_quote_show_create\":true,\"scan_or_to_union_threshold\":50000000,\"enable_exchange_pass_through\":true,\"query_cache_entry_max_bytes\":4194304,\"enable_exchange_perf\":false,\"workgroup_id\":0,\"enable_rewrite_groupingsets_to_union_all\":false,\"transmission_compression_type\":\"NO_COMPRESSION\",\"interactive_timeout\":3600,\"use_page_cache\":true,\"big_query_log_scan_bytes_threshold\":10737418240,\"collation_server\":\"utf8_general_ci\",\"cbo_decimal_cast_string_strict\":true,\"tablet_internal_parallel_mode\":\"auto\",\"enable_pipeline\":true,\"spill_mode\":\"auto\",\"enable_query_debug_trace\":false,\"enable_show_all_variables\":true,\"full_sort_max_buffered_bytes\":16777216,\"wait_timeout\":28800,\"enable_query_tablet_affinity\":false,\"transmission_encode_level\":7,\"query_including_mv_names\":\"\",\"transaction_isolation\":\"REPEATABLE-READ\",\"enable_global_runtime_filter\":true,\"enable_plan_validation\":true,\"load_transmission_compression_type\":\"NO_COMPRESSION\",\"cbo_enable_low_cardinality_optimize\":true,\"enable_resource_group_v2\":true,\"scan_use_query_mem_ratio\":0.3,\"new_planner_optimize_timeout\":3000,\"enable_outer_join_reorder\":true,\"force_schedule_local\":false,\"hudi_mor_force_jni_reader\":false,\"full_sort_late_materialization\":false,\"cbo_enable_greedy_join_reorder\":true,\"spillable_operator_mask\":-1,\"rpc_http_min_size\":2147482624,\"cbo_debug_alive_backend_number\":0,\"global_runtime_filter_probe_min_size\":102400,\"scan_or_to_union_limit\":1,\"nested_mv_rewrite_max_level\":3,\"net_write_timeout\":60,\"cbo_prune_shuffle_column_rate\":0.1,\"hash_join_push_down_right_table\":true,\"broadcast_row_limit\":15000000,\"enable_populate_block_cache\":true,\"exec_mem_limit\":34359738368,\"enable_sort_aggregate\":false,\"query_cache_force_populate\":false,\"runtime_filter_on_exchange_node\":false,\"disable_join_reorder\":false,\"enable_rule_based_materialized_view_rewrite\":true,\"global_runtime_filter_rpc_timeout\":400,\"connector_scan_use_query_mem_ratio\":0.3,\"net_buffer_length\":16384,\"full_sort_max_buffered_rows\":1024000,\"query_timeout\":1800,\"connector_io_tasks_slow_io_latency_ms\":50,\"cbo_max_reorder_node\":50,\"enable_distinct_column_bucketization\":false,\"enable_big_query_log\":true,\"analyze_mv\":\"sample\",\"runtime_filter_scan_wait_time\":20,\"prefer_compute_node\":false,\"enable_strict_type\":false,\"group_concat_max_len\":65535,\"disable_streaming_preaggregations\":false,\"parse_tokens_limit\":3500000,\"chunk_size\":4096,\"global_runtime_filter_probe_min_selectivity\":0.5,\"query_mem_limit\":17179869184,\"big_query_profile_second_threshold\":0,\"enable_filter_unused_columns_in_scan_stage\":false,\"enable_scan_block_cache\":false,\"enable_materialized_view_single_table_view_delta_rewrite\":false,\"auto_increment_increment\":1,\"sql_dialect\":\"StarRocks\",\"big_query_log_scan_rows_threshold\":1000000000,\"character_set_client\":\"utf8\",\"autocommit\":true,\"enable_column_expr_predicate\":true,\"enable_runtime_adaptive_dop\":false,\"cbo_cte_max_limit\":10,\"storage_engine\":\"olap\",\"enable_optimizer_trace_log\":false,\"spill_operator_min_bytes\":10485760,\"cbo_enable_dp_join_reorder\":true,\"tx_visible_wait_timeout\":300,\"enable_materialized_view_view_delta_rewrite\":true,\"cbo_max_reorder_node_use_exhaustive\":4,\"enable_sql_digest\":false,\"spill_mem_table_num\":2,\"enable_spill\":false,\"pipeline_dop\":1,\"single_node_exec_plan\":false,\"join_implementation_mode_v2\":\"auto\",\"sql_select_limit\":9223372036854775807,\"enable_materialized_view_rewrite\":true,\"statistic_collect_parallel\":1,\"hdfs_backend_selector_hash_algorithm\":\"consistent\",\"enable_expr_prune_partition\":true,\"enable_topn_runtime_filter\":true,\"disable_colocate_join\":false,\"max_pushdown_conditions_per_column\":-1,\"default_table_compression\":\"lz4_frame\",\"runtime_adaptive_dop_max_output_amplification_factor\":0,\"innodb_read_only\":true,\"spill_mem_limit_threshold\":0.5,\"cbo_reorder_threshold_use_exhaustive\":6,\"enable_predicate_reorder\":false,\"enable_query_cache\":false,\"transaction_read_only\":\"OFF\",\"max_allowed_packet\":1048576,\"time_zone\":\"Asia/Shanghai\",\"enable_multicolumn_global_runtime_filter\":false,\"character_set_server\":\"utf8\",\"cbo_use_nth_exec_plan\":0,\"io_tasks_per_scan_operator\":4,\"parallel_exchange_instance_num\":-1,\"enable_shared_scan\":false,\"allow_default_partition\":false}","be_number":10,"be_core_stat":{"numOfHardwareCoresPerBe":"{\"11395868\":64,\"7643094\":64,\"66938447\":64,\"66938446\":64,\"11395865\":64,\"11395864\":64,\"11395866\":64,\"11395863\":64,\"11395862\":64,\"66938448\":64}","cachedAvgNumOfHardwareCores":-1},"exception":["com.starrocks.sql.common.StarRocksPlannerException: Invalid plan:\nPhysicalTopNOperator {phase=FINAL, orderBy=[194: wid ASC NULLS FIRST, 395: case ASC NULLS FIRST, 193: ts ASC NULLS FIRST, 233: pay_time ASC NULLS FIRST], limit=-1, offset=0}\n->  PhysicalHashJoinOperator{joinType=INNER JOIN, joinPredicate=216: store_id = 283: store_nbr, limit=-1, predicate=null}\n    ->  PhysicalOlapScanOperator {table=165413798, selectedPartitionId=[165413762, 165413763, 165413764, 165413765, 165413766, 165413767, 165413768, 165413769, 165413770, 165413771, 165413772, 165413773, 165413774, 165413775, 165413776], outputColumns=[193: ts, 194: wid, 216: store_id, 233: pay_time, 824: channel_class1_user, 826: division], projection=[193: ts, 194: wid, 216: store_id, 824: channel_class1_user, 233: pay_time, 826: division], predicate=193: ts >= 2024-03-01 AND 193: ts <= 2024-03-01 AND 192: ts_mth >= cast(date_format(add_months(2024-03-01 00:00:00, -12), %Y%m) as int(11)) AND 192: ts_mth <= 202403 AND cast(193: ts as datetime) >= add_months(2024-03-01 00:00:00, -12) AND DictMapping(825: order_status_code{238: order_status_code = 430}) AND 277: is_bag_flag <= 0 AND ifnull(281: is_money_save_card, 0) IN (0, 1) AND 216: store_id IS NOT NULL, limit=-1}\n    ->  PhysicalDistributionOperator {distributionSpec=BROADCAST ,globalDict=[]}\n        ->  PhysicalOlapScanOperator {table=135801893, selectedPartitionId=[166146922], outputColumns=[283: store_nbr], projection=[283: store_nbr], predicate=283: store_nbr IS NOT NULL AND ifnull(cast(303: operation_close_date as varchar), 2999-12-31) > 2024-03-01 OR ifnull(cast(304: finance_close_date as varchar), 2999-12-31) > 2024-03-01 AND 297: is_comp = 1 AND 298: comp_date <= 2024-03-01 AND 288: format_code = Hyper AND NOT 284: store_name LIKE %测试% OR 284: store_name IS NULL, limit=-1}\nInput dependency cols check failed. The required cols {395} cannot obtain from input cols {193,194,233,379}.\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkInputCols(InputDependenciesChecker.java:147)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:81)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkJoinOpt(InputDependenciesChecker.java:86)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:61)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkJoinOpt(InputDependenciesChecker.java:86)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:61)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkJoinOpt(InputDependenciesChecker.java:86)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:61)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkJoinOpt(InputDependenciesChecker.java:86)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:61)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.checkOptExprWithOneChild(InputDependenciesChecker.java:73)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker$Visitor.visit(InputDependenciesChecker.java:59)\n\tat com.starrocks.sql.optimizer.validate.InputDependenciesChecker.validate(InputDependenciesChecker.java:48)\n\tat com.starrocks.sql.optimizer.validate.PlanValidator.validatePlan(PlanValidator.java:54)\n\tat com.starrocks.sql.optimizer.Optimizer.optimizeByCost(Optimizer.java:200)\n\tat com.starrocks.sql.optimizer.Optimizer.optimize(Optimizer.java:114)\n\tat com.starrocks.sql.StatementPlanner.createQueryPlanWithReTry(StatementPlanner.java:196)\n\tat com.starrocks.sql.StatementPlanner.planQuery(StatementPlanner.java:121)\n\tat com.starrocks.sql.StatementPlanner.plan(StatementPlanner.java:89)\n\tat com.starrocks.sql.StatementPlanner.plan(StatementPlanner.java:58)\n\tat com.starrocks.qe.StmtExecutor.execute(StmtExecutor.java:455)\n\tat com.starrocks.http.rest.QueryDumpAction.executeWithoutPassword(QueryDumpAction.java:111)\n\tat com.starrocks.http.rest.RestBaseAction.execute(RestBaseAction.java:107)\n\tat com.starrocks.http.rest.RestBaseAction.handleRequest(RestBaseAction.java:75)\n\tat com.starrocks.http.HttpServerHandler.channelRead(HttpServerHandler.java:93)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\n\tat io.netty.handler.codec.MessageToMessageCodec.channelRead(MessageToMessageCodec.java:111)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:750)\n"],"version":"3.0.9","commit_version":"485df1a"}