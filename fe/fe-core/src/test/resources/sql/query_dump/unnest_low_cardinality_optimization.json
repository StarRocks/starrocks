{"statement":"WITH `mock_cte_1` AS (\n    SELECT \n        `b`.`mock_field_101`, \n        `t`.`mp` AS `mock_field_108`\n    FROM `mock_table_2` AS `b`\n    CROSS JOIN UNNEST(`b`.`mock_field_105`) AS `t` (`mp`)\n    WHERE `b`.`mock_field_99` = CAST(1681 AS BIGINT) \n      AND `b`.`mock_field_101` = CAST(1890242 AS BIGINT)\n), \n\n`mock_cte_2` AS (\n    SELECT \n        `p`.`mock_field_107` AS `mock_field_107`, \n        `p`.`mock_field_108` AS `mock_field_108`, \n        `p`.`mock_field_110`, \n        `p`.`mock_field_111`\n    FROM `mock_table_3` AS `p`\n    INNER JOIN `mock_cte_1` AS `m` \n        ON LOWER(`p`.`mock_field_108`) = LOWER(`m`.`mock_field_108`)\n    WHERE `p`.`mock_field_99` = CAST(1681 AS BIGINT) \n      AND `p`.`mock_field_116` = 'active'\n), \n\n`mock_cte_3` AS (\n    SELECT CAST('board_member' AS CHAR(16)) AS `mock_field_108`, 0 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('clevel' AS CHAR(12)) AS CHAR(16)) AS `mock_field_108`, 1 AS `mock_field_107`\n    UNION ALL SELECT 'senior_executive' AS `mock_field_108`, 2 AS `mock_field_107`\n    UNION ALL SELECT CAST('vp' AS CHAR(16)) AS `mock_field_108`, 3 AS `mock_field_107`\n    UNION ALL SELECT CAST('director' AS CHAR(16)) AS `mock_field_108`, 4 AS `mock_field_107`\n    UNION ALL SELECT CAST('manager' AS CHAR(16)) AS `mock_field_108`, 5 AS `mock_field_107`\n    UNION ALL SELECT CAST('others' AS CHAR(16)) AS `mock_field_108`, 6 AS `mock_field_107`\n    UNION ALL SELECT CAST('lead' AS CHAR(16)) AS `mock_field_108`, 8 AS `mock_field_107`\n), \n\n`mock_cte_4` AS (\n    SELECT CAST(CAST(CAST('academics' AS CHAR(22)) AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 1 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('accounting_and_finance' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 2 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST(CAST('administration' AS CHAR(22)) AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 3 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST(CAST('business_development' AS CHAR(22)) AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 4 AS `mock_field_107`\n    UNION ALL SELECT 'construction_engineering' AS `mock_field_108`, 5 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('consulting' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 6 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('customer_support' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 7 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('human_resources' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 8 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('information_technology' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 9 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('investment_management' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 10 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('legal' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 11 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('logistics' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 12 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('manufacturing' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 13 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('marketing' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 14 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('medical' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 15 AS `mock_field_107`\n    UNION ALL SELECT CAST(CAST('operations' AS CHAR(24)) AS CHAR(26)) AS `mock_field_108`, 16 AS `mock_field_107`\n    UNION ALL SELECT 'purchasing_and_procurement' AS `mock_field_108`, 17 AS `mock_field_107`\n    UNION ALL SELECT 'quality_assurance' AS `mock_field_108`, 18 AS `mock_field_107`\n    UNION ALL SELECT 'research_and_development' AS `mock_field_108`, 19 AS `mock_field_107`\n    UNION ALL SELECT 'safety_and_security' AS `mock_field_108`, 20 AS `mock_field_107`\n    UNION ALL SELECT 'sales' AS `mock_field_108`, 21 AS `mock_field_107`\n    UNION ALL SELECT 'others' AS `mock_field_108`, 22 AS `mock_field_107`\n    UNION ALL SELECT 'product_management' AS `mock_field_108`, 24 AS `mock_field_107`\n    UNION ALL SELECT 'project_management' AS `mock_field_108`, 25 AS `mock_field_107`\n), \n\n`mock_cte_5` AS (\n    SELECT \n        `m`.`mock_field_101`, \n        `ap`.`mock_field_107`, \n        `ap`.`mock_field_108`, \n        `jlc`.`mock_field_107` AS `mock_field_122`, \n        `jfc`.`mock_field_107` AS `mock_field_123`\n    FROM `mock_cte_2` AS `ap`\n    INNER JOIN `mock_cte_1` AS `m` \n        ON LOWER(`m`.`mock_field_108`) = LOWER(`ap`.`mock_field_108`)\n    LEFT JOIN UNNEST(`ap`.`mock_field_110`) AS `t1` (`jl_str`) ON TRUE\n    LEFT JOIN `mock_cte_3` AS `jlc` \n        ON LOWER(`t1`.`jl_str`) = LOWER(`jlc`.`mock_field_108`)\n    LEFT JOIN UNNEST(`ap`.`mock_field_111`) AS `t2` (`jf_str`) ON TRUE\n    LEFT JOIN `mock_cte_4` AS `jfc` \n        ON LOWER(`t2`.`jf_str`) = LOWER(`jfc`.`mock_field_108`)\n) \n\n(\n    SELECT DISTINCT \n        `c`.`mock_field_1`, \n        `c`.`mock_field_2`, \n        `c`.`mock_field_3`, \n        `c`.`mock_field_27`, \n        `c`.`mock_field_50`, \n        `c`.`mock_field_51`, \n        `c`.`mock_field_52`, \n        `c`.`mock_field_30`, \n        `c`.`mock_field_33`\n    FROM `mock_table_1` AS `c`\n    INNER JOIN `mock_cte_5` AS `pj` \n        ON ARRAY_CONTAINS(`c`.`mock_field_36`, `pj`.`mock_field_122`)\n       AND ARRAY_CONTAINS(`c`.`mock_field_37`, `pj`.`mock_field_123`)\n    WHERE `c`.`mock_field_3` = CAST(4057908 AS BIGINT)\n    LIMIT 50\n);\n","table_meta":{"test_db.mock_table_2":"CREATE TABLE `mock_table_2` (\n  `mock_field_99` bigint(20) NULL COMMENT \"\",\n  `mock_field_100` bigint(20) NULL COMMENT \"\",\n  `mock_field_101` bigint(20) NULL COMMENT \"\",\n  `mock_field_102` bigint(20) NULL COMMENT \"\",\n  `mock_field_103` bigint(20) NULL COMMENT \"\",\n  `mock_field_104` decimal(10, 2) NULL COMMENT \"\",\n  `mock_field_105` array<varchar(65533)> NULL COMMENT \"\",\n  `mock_field_106` array<varchar(65533)> NULL COMMENT \"\"\n) ENGINE=OLAP \nDUPLICATE KEY(`mock_field_99`)\nPARTITION BY (`mock_field_99`)\nDISTRIBUTED BY HASH(`mock_field_99`, `mock_field_101`) BUCKETS 40 \nPROPERTIES (\n\"colocate_with\" = \"cg2\",\n\"compression\" = \"LZ4\",\n\"fast_schema_evolution\" = \"true\",\n\"replicated_storage\" = \"true\",\n\"replication_num\" = \"1\"\n);","test_db.mock_table_3":"CREATE TABLE `mock_table_3` (\n  `mock_field_99` bigint(20) NOT NULL COMMENT \"\",\n  `mock_field_107` bigint(20) NOT NULL COMMENT \"\",\n  `mock_field_108` varchar(65533) NULL COMMENT \"\",\n  `mock_field_109` bigint(20) NULL COMMENT \"\",\n  `mock_field_110` array<varchar(65533)> NULL COMMENT \"\",\n  `mock_field_111` array<varchar(65533)> NULL COMMENT \"\",\n  `mock_field_112` array<varchar(65533)> NULL COMMENT \"\",\n  `mock_field_113` array<varchar(65533)> NULL COMMENT \"\",\n  `mock_field_114` varchar(65533) NULL COMMENT \"\",\n  `mock_field_115` varchar(65533) NULL COMMENT \"\",\n  `mock_field_116` varchar(65533) NULL COMMENT \"\",\n  `mock_field_117` varchar(65533) NULL COMMENT \"\",\n  `mock_field_118` datetime NULL COMMENT \"\",\n  `mock_field_119` bigint(20) NULL COMMENT \"\",\n  `mock_field_120` datetime NULL COMMENT \"\",\n  `mock_field_121` bigint(20) NULL COMMENT \"\"\n) ENGINE=OLAP \nDUPLICATE KEY(`mock_field_99`, `mock_field_107`)\nPARTITION BY (`mock_field_99`)\nDISTRIBUTED BY HASH(`mock_field_99`, `mock_field_107`) BUCKETS 40 \nPROPERTIES (\n\"compression\" = \"LZ4\",\n\"fast_schema_evolution\" = \"true\",\n\"replicated_storage\" = \"true\",\n\"replication_num\" = \"1\"\n);","test_db.mock_table_1":"CREATE TABLE `mock_table_1` (\n  `mock_field_1` bigint(20) NOT NULL COMMENT \"\",\n  `mock_field_2` bigint(20) NOT NULL COMMENT \"\",\n  `mock_field_3` bigint(20) NOT NULL COMMENT \"\",\n  `mock_field_4` varchar(20) NULL COMMENT \"\",\n  `mock_field_5` datetime NULL COMMENT \"\",\n  `mock_field_6` boolean NULL COMMENT \"\",\n  `mock_field_7` varchar(255) NULL COMMENT \"\",\n  `mock_field_8` boolean NULL COMMENT \"\",\n  `mock_field_9` varchar(65533) NULL COMMENT \"\",\n  `mock_field_10` varchar(255) NULL COMMENT \"\",\n  `mock_field_11` boolean NULL COMMENT \"\",\n  `mock_field_12` varchar(255) NULL COMMENT \"\",\n  `mock_field_13` json NULL COMMENT \"\",\n  `mock_field_14` varchar(255) NULL COMMENT \"\",\n  `mock_field_15` varchar(255) NULL COMMENT \"\",\n  `mock_field_16` datetime NULL COMMENT \"\",\n  `mock_field_17` varchar(255) NULL COMMENT \"\",\n  `mock_field_18` datetime NULL COMMENT \"\",\n  `mock_field_19` varchar(255) NULL COMMENT \"\",\n  `mock_field_20` boolean NULL COMMENT \"\",\n  `mock_field_21` varchar(255) NULL COMMENT \"\",\n  `mock_field_22` json NULL COMMENT \"\",\n  `mock_field_23` json NULL COMMENT \"\",\n  `mock_field_24` varchar(255) NULL COMMENT \"\",\n  `mock_field_25` double NULL COMMENT \"\",\n  `mock_field_26` varchar(255) NULL COMMENT \"\",\n  `mock_field_27` varchar(1000) NULL COMMENT \"\",\n  `mock_field_28` varchar(255) NULL COMMENT \"\",\n  `mock_field_29` varchar(1000) NULL COMMENT \"\",\n  `mock_field_30` varchar(255) NULL COMMENT \"\",\n  `mock_field_31` json NULL COMMENT \"\",\n  `mock_field_32` varchar(255) NULL COMMENT \"\",\n  `mock_field_33` varchar(255) NULL COMMENT \"\",\n  `mock_field_34` datetime NULL COMMENT \"\",\n  `mock_field_35` datetime NULL COMMENT \"\",\n  `mock_field_36` array<int(11)> NULL COMMENT \"\",\n  `mock_field_37` array<int(11)> NULL COMMENT \"\",\n  `mock_field_38` varchar(255) NULL COMMENT \"\",\n  `mock_field_39` boolean NULL COMMENT \"\",\n  `mock_field_40` boolean NULL COMMENT \"\",\n  `mock_field_41` boolean NULL COMMENT \"\",\n  `mock_field_42` boolean NULL COMMENT \"\",\n  `mock_field_43` json NULL COMMENT \"\",\n  `mock_field_44` datetime NULL COMMENT \"\",\n  `mock_field_45` datetime NULL COMMENT \"\",\n  `mock_field_46` datetime NULL COMMENT \"\",\n  `mock_field_47` datetime NULL COMMENT \"\",\n  `mock_field_48` int(11) NULL COMMENT \"\",\n  `mock_field_49` varchar(255) NULL COMMENT \"\",\n  `mock_field_50` varchar(255) NULL COMMENT \"\",\n  `mock_field_51` varchar(255) NULL COMMENT \"\",\n  `mock_field_52` varchar(255) NULL COMMENT \"\",\n  `mock_field_53` varchar(255) NULL COMMENT \"\",\n  `mock_field_54` varchar(255) NULL COMMENT \"\",\n  `mock_field_55` varchar(255) NULL COMMENT \"\",\n  `mock_field_56` varchar(255) NULL COMMENT \"\",\n  `mock_field_57` varchar(255) NULL COMMENT \"\",\n  `mock_field_58` varchar(255) NULL COMMENT \"\",\n  `mock_field_59` varchar(255) NULL COMMENT \"\",\n  `mock_field_60` json NULL COMMENT \"\",\n  `mock_field_61` json NULL COMMENT \"\",\n  `mock_field_62` boolean NULL COMMENT \"\",\n  `mock_field_63` bigint(20) NULL COMMENT \"\",\n  `mock_field_64` varchar(1000) NULL COMMENT \"\",\n  `mock_field_65` varchar(255) NULL COMMENT \"\",\n  `mock_field_66` varchar(255) NULL COMMENT \"\",\n  `mock_field_67` varchar(255) NULL COMMENT \"\",\n  `mock_field_68` varchar(100) NULL COMMENT \"\",\n  `mock_field_69` double NULL COMMENT \"\",\n  `mock_field_70` double NULL COMMENT \"\",\n  `mock_field_71` varchar(255) NULL COMMENT \"\",\n  `mock_field_72` boolean NULL COMMENT \"\",\n  `mock_field_73` int(11) NULL COMMENT \"\",\n  `mock_field_74` int(11) NULL COMMENT \"\",\n  `mock_field_75` int(11) NULL COMMENT \"\",\n  `mock_field_76` int(11) NULL COMMENT \"\",\n  `mock_field_77` int(11) NULL COMMENT \"\",\n  `mock_field_78` boolean NULL COMMENT \"\",\n  `mock_field_79` varchar(255) NULL COMMENT \"\",\n  `mock_field_80` int(11) NULL COMMENT \"\",\n  `mock_field_81` int(11) NULL COMMENT \"\",\n  `mock_field_82` json NULL COMMENT \"\",\n  `mock_field_83` array<varchar(255)> NULL COMMENT \"\",\n  `mock_field_84` json NULL COMMENT \"\",\n  `mock_field_85` boolean NULL COMMENT \"\",\n  `mock_field_86` varchar(255) NULL COMMENT \"\",\n  `mock_field_87` int(11) NULL COMMENT \"\",\n  `mock_field_88` datetime NULL COMMENT \"\",\n  `mock_field_89` varchar(255) NULL COMMENT \"\",\n  `mock_field_90` varchar(1000) NULL COMMENT \"\",\n  `mock_field_91` array<varchar(255)> NULL COMMENT \"\",\n  `mock_field_92` array<varchar(255)> NULL COMMENT \"\",\n  `mock_field_93` array<varchar(255)> NULL COMMENT \"\",\n  `mock_field_94` varchar(255) NULL COMMENT \"\",\n  `mock_field_95` double NULL COMMENT \"\",\n  `mock_field_96` array<varchar(255)> NULL COMMENT \"\",\n  `mock_field_97` array<varchar(255)> NULL COMMENT \"\",\n  `mock_field_98` varchar(255) NULL COMMENT \"\"\n) ENGINE=OLAP \nDUPLICATE KEY(`mock_field_1`, `mock_field_2`)\nDISTRIBUTED BY HASH(`mock_field_3`) BUCKETS 40 \nPROPERTIES (\n\"colocate_with\" = \"cg1\",\n\"compression\" = \"LZ4\",\n\"fast_schema_evolution\" = \"true\",\n\"replicated_storage\" = \"true\",\n\"replication_num\" = \"1\"\n);"},"table_row_count":{"test_db.mock_table_3":{"p1681":10000},"test_db.mock_table_1":{"mock_table_1":10000},"test_db.mock_table_2":{"p1681":10000}},"column_statistics":{"test_db.mock_table_3":{"mock_field_110":"[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE","mock_field_111":"[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE","mock_field_99":"[1681.0, 1681.0, 0.0, 8.0, 1.0] ESTIMATE","mock_field_108":"[-Infinity, Infinity, 0.0, 11.8899, 9941.0] ESTIMATE","mock_field_116":"[-Infinity, Infinity, 0.0, 6.0, 1.0] ESTIMATE"},"test_db.mock_table_1":{"mock_field_2":"[600001.0, 610000.0, 0.0, 8.0, 10015.0] ESTIMATE","mock_field_3":"[4000001.0, 4057908.0, 0.0, 8.0, 9863.0] ESTIMATE","mock_field_33":"[-Infinity, Infinity, 0.0, 9.0, 1.0] ESTIMATE","mock_field_36":"[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE","mock_field_27":"[-Infinity, Infinity, 0.0, 9.8902, 10050.0] ESTIMATE","mock_field_37":"[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE","mock_field_50":"[-Infinity, Infinity, 0.0, 9.8894, 10008.0] ESTIMATE","mock_field_30":"[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE","mock_field_52":"[-Infinity, Infinity, 0.0, 8.8894, 9978.0] ESTIMATE","mock_field_1":"[500001.0, 510000.0, 0.0, 8.0, 9991.0] ESTIMATE","mock_field_51":"[-Infinity, Infinity, 1.0, 0.0, 1.0] ESTIMATE"},"test_db.mock_table_2":{"mock_field_99":"[1681.0, 1681.0, 0.0, 8.0, 1.0] ESTIMATE","mock_field_105":"[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE","mock_field_101":"[1890001.0, 1900000.0, 0.0, 8.0, 9978.0] ESTIMATE"}},"explain_info":"PLAN COST\n  CPU: 8808336.286705088\n  Memory: 23100.251546182706\n\nPLAN FRAGMENT 0(F12)\n  Output Exprs:10: mock_field_1 | 11: mock_field_2 | 12: mock_field_3 | 36: mock_field_27 | 59: mock_field_50 | 60: mock_field_51 | 61: mock_field_52 | 39: mock_field_30 | 42: mock_field_33\n  Input Partition: UNPARTITIONED\n  RESULT SINK\n\n  42:Decode\n  |  <dict id 289> : <string id 42>\n  |  <dict id 290> : <string id 60>\n  |  <dict id 288> : <string id 39>\n  |  cardinality: 50\n  |  column statistics: \n  |  * mock_field_1-->[500001.0, 510000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_2-->[600001.0, 610000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_3-->[4057908.0, 4057908.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_27-->[-Infinity, Infinity, 0.0, 9.8902, 1.0138902970698571] ESTIMATE\n  |  * mock_field_30-->[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE\n  |  * mock_field_33-->[-Infinity, Infinity, 0.0, 9.0, 1.0] ESTIMATE\n  |  * mock_field_50-->[-Infinity, Infinity, 0.0, 9.8894, 1.0138902970698571] ESTIMATE\n  |  * mock_field_51-->[-Infinity, Infinity, 0.5, 0.0, 1.0] ESTIMATE\n  |  * mock_field_52-->[-Infinity, Infinity, 0.0, 8.8894, 1.0138902970698571] ESTIMATE\n  |  \n  41:EXCHANGE\n     distribution type: GATHER\n     limit: 50\n     cardinality: 1\n\nPLAN FRAGMENT 1(F11)\n\n  Input Partition: HASH_PARTITIONED: 10: mock_field_1, 11: mock_field_2, 12: mock_field_3, 36: mock_field_27, 59: mock_field_50, 290: mock_field_51, 61: mock_field_52, 288: mock_field_30, 289: mock_field_33\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange Id: 41\n\n  40:AGGREGATE (merge finalize)\n  |  group by: [10: mock_field_1, BIGINT, true], [11: mock_field_2, BIGINT, true], [12: mock_field_3, BIGINT, true], [36: mock_field_27, VARCHAR, true], [59: mock_field_50, VARCHAR, true], [290: mock_field_51, INT, true], [61: mock_field_52, VARCHAR, true], [288: mock_field_30, INT, true], [289: mock_field_33, INT, true]\n  |  hasNullableGenerateChild: true\n  |  limit: 50\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_field_1-->[500001.0, 510000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_2-->[600001.0, 610000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_3-->[4057908.0, 4057908.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_27-->[-Infinity, Infinity, 0.0, 9.8902, 1.0138902970698571] ESTIMATE\n  |  * mock_field_30-->[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE\n  |  * mock_field_33-->[-Infinity, Infinity, 0.0, 9.0, 1.0] ESTIMATE\n  |  * mock_field_50-->[-Infinity, Infinity, 0.0, 9.8894, 1.0138902970698571] ESTIMATE\n  |  * mock_field_51-->[-Infinity, Infinity, 0.5, 0.0, 1.0] ESTIMATE\n  |  * mock_field_52-->[-Infinity, Infinity, 0.0, 8.8894, 1.0138902970698571] ESTIMATE\n  |  \n  39:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [10: mock_field_1, BIGINT, true], [11: mock_field_2, BIGINT, true], [12: mock_field_3, BIGINT, true], [36: mock_field_27, VARCHAR, true], [59: mock_field_50, VARCHAR, true], [290: mock_field_51, INT, true], [61: mock_field_52, VARCHAR, true], [288: mock_field_30, INT, true], [289: mock_field_33, INT, true]\n     cardinality: 1\n\nPLAN FRAGMENT 2(F00)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 10: mock_field_1, 11: mock_field_2, 12: mock_field_3, 36: mock_field_27, 59: mock_field_50, 290: mock_field_51, 61: mock_field_52, 288: mock_field_30, 289: mock_field_33\n  OutPut Exchange Id: 39\n\n  38:AGGREGATE (update serialize)\n  |  STREAMING\n  |  group by: [10: mock_field_1, BIGINT, true], [11: mock_field_2, BIGINT, true], [12: mock_field_3, BIGINT, true], [36: mock_field_27, VARCHAR, true], [59: mock_field_50, VARCHAR, true], [290: mock_field_51, INT, true], [61: mock_field_52, VARCHAR, true], [288: mock_field_30, INT, true], [289: mock_field_33, INT, true]\n  |  hasNullableGenerateChild: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_field_1-->[500001.0, 510000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_2-->[600001.0, 610000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_3-->[4057908.0, 4057908.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_27-->[-Infinity, Infinity, 0.0, 9.8902, 1.0138902970698571] ESTIMATE\n  |  * mock_field_30-->[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE\n  |  * mock_field_33-->[-Infinity, Infinity, 0.0, 9.0, 1.0] ESTIMATE\n  |  * mock_field_50-->[-Infinity, Infinity, 0.0, 9.8894, 1.0138902970698571] ESTIMATE\n  |  * mock_field_51-->[-Infinity, Infinity, 0.5, 0.0, 1.0] ESTIMATE\n  |  * mock_field_52-->[-Infinity, Infinity, 0.0, 8.8894, 1.0138902970698571] ESTIMATE\n  |  \n  37:Project\n  |  output columns:\n  |  10 <-> [10: mock_field_1, BIGINT, false]\n  |  11 <-> [11: mock_field_2, BIGINT, false]\n  |  12 <-> [12: mock_field_3, BIGINT, false]\n  |  36 <-> [36: mock_field_27, VARCHAR, true]\n  |  59 <-> [59: mock_field_50, VARCHAR, true]\n  |  61 <-> [61: mock_field_52, VARCHAR, true]\n  |  288 <-> [288: mock_field_30, INT, true]\n  |  289 <-> [289: mock_field_33, INT, true]\n  |  290 <-> [290: mock_field_51, INT, true]\n  |  hasNullableGenerateChild: true\n  |  cardinality: 2535\n  |  column statistics: \n  |  * mock_field_1-->[500001.0, 510000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_2-->[600001.0, 610000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_3-->[4057908.0, 4057908.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_27-->[-Infinity, Infinity, 0.0, 9.8902, 1.0138902970698571] ESTIMATE\n  |  * mock_field_50-->[-Infinity, Infinity, 0.0, 9.8894, 1.0138902970698571] ESTIMATE\n  |  * mock_field_52-->[-Infinity, Infinity, 0.0, 8.8894, 1.0138902970698571] ESTIMATE\n  |  \n  36:NESTLOOP JOIN\n  |  join op: INNER JOIN\n  |  other join predicates: array_contains[([45: mock_field_36, ARRAY<INT>, true], cast([176: expr, TINYINT, true] as INT)); args: INVALID_TYPE,INT; result: BOOLEAN; args nullable: true; result nullable: true], array_contains[([46: mock_field_37, ARRAY<INT>, true], cast([275: expr, TINYINT, true] as INT)); args: INVALID_TYPE,INT; result: BOOLEAN; args nullable: true; result nullable: true]\n  |  can local shuffle: false\n  |  cardinality: 2535\n  |  column statistics: \n  |  * mock_field_1-->[500001.0, 510000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_2-->[600001.0, 610000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_3-->[4057908.0, 4057908.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n  |  * mock_field_27-->[-Infinity, Infinity, 0.0, 9.8902, 1.0138902970698571] ESTIMATE\n  |  * mock_field_30-->[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE\n  |  * mock_field_33-->[-Infinity, Infinity, 0.0, 9.0, 1.0] ESTIMATE\n  |  * mock_field_36-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_field_37-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_field_50-->[-Infinity, Infinity, 0.0, 9.8894, 1.0138902970698571] ESTIMATE\n  |  * mock_field_51-->[-Infinity, Infinity, 1.0, 0.0, 1.0] ESTIMATE\n  |  * mock_field_52-->[-Infinity, Infinity, 0.0, 8.8894, 1.0138902970698571] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----35:EXCHANGE\n  |       distribution type: BROADCAST\n  |       cardinality: 1\n  |    \n  33:Project\n  |  output columns:\n  |  176 <-> [176: expr, TINYINT, true]\n  |  275 <-> [275: expr, TINYINT, true]\n  |  hasNullableGenerateChild: true\n  |  cardinality: 10000\n  |  column statistics: \n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  32:HASH JOIN\n  |  join op: LEFT OUTER JOIN (BROADCAST)\n  |  equal join conjunct: [276: lower, VARCHAR, true] = [277: lower, VARCHAR, true]\n  |  output columns: 176, 275\n  |  can local shuffle: false\n  |  cardinality: 10000\n  |  column statistics: \n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----31:EXCHANGE\n  |       distribution type: BROADCAST\n  |       cardinality: 24\n  |    \n  28:Project\n  |  output columns:\n  |  176 <-> [176: expr, TINYINT, false]\n  |  276 <-> lower[([177: jf_str, VARCHAR(65533), true]); args: VARCHAR; result: VARCHAR; args nullable: true; result nullable: true]\n  |  hasNullableGenerateChild: true\n  |  cardinality: 10000\n  |  column statistics: \n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  27:TableValueFunction\n  |  tableFunctionName: unnest\n  |  columns: [unnest]\n  |  returnTypes: [INT]\n  |  cardinality: 10000\n  |  column statistics: \n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * jf_str-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  26:Project\n  |  output columns:\n  |  176 <-> [176: expr, TINYINT, true]\n  |  284 <-> [284: mock_field_111, ARRAY<INT>, true]\n  |  hasNullableGenerateChild: true\n  |  cardinality: 10000\n  |  column statistics: \n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  25:HASH JOIN\n  |  join op: LEFT OUTER JOIN (BROADCAST)\n  |  equal join conjunct: [278: lower, VARCHAR, true] = [279: lower, VARCHAR, true]\n  |  output columns: 176, 284\n  |  can local shuffle: false\n  |  cardinality: 10000\n  |  column statistics: \n  |  * mock_field_111-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----24:EXCHANGE\n  |       distribution type: BROADCAST\n  |       cardinality: 8\n  |    \n  21:Project\n  |  output columns:\n  |  278 <-> lower[([142: jl_str, VARCHAR(65533), true]); args: VARCHAR; result: VARCHAR; args nullable: true; result nullable: true]\n  |  284 <-> [284: mock_field_111, ARRAY<INT>, true]\n  |  cardinality: 10000\n  |  column statistics: \n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  20:TableValueFunction\n  |  tableFunctionName: unnest\n  |  columns: [unnest]\n  |  returnTypes: [VARCHAR(65533)]\n  |  cardinality: 10000\n  |  column statistics: \n  |  * mock_field_111-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * jl_str-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  19:Project\n  |  output columns:\n  |  112 <-> [112: mock_field_110, ARRAY<VARCHAR(65533)>, true]\n  |  284 <-> [284: mock_field_111, ARRAY<INT>, true]\n  |  cardinality: 10000\n  |  column statistics: \n  |  * mock_field_110-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  \n  18:HASH JOIN\n  |  join op: INNER JOIN (BROADCAST)\n  |  equal join conjunct: [281: lower, VARCHAR, true] = [280: lower, VARCHAR, true]\n  |  build runtime filters:\n  |  - filter_id = 1, build_expr = (280: lower), remote = false\n  |  output columns: 112, 284\n  |  can local shuffle: false\n  |  cardinality: 10000\n  |  column statistics: \n  |  * mock_field_110-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_field_111-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----17:EXCHANGE\n  |       distribution type: BROADCAST\n  |       cardinality: 1\n  |    \n  10:Project\n  |  output columns:\n  |  112 <-> [112: mock_field_110, ARRAY<VARCHAR(65533)>, true]\n  |  281 <-> lower[([110: mock_field_108, VARCHAR, true]); args: VARCHAR; result: VARCHAR; args nullable: true; result nullable: true]\n  |  284 <-> [284: mock_field_111, ARRAY<INT>, true]\n  |  cardinality: 10000\n  |  column statistics: \n  |  * mock_field_110-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  9:HASH JOIN\n  |  join op: INNER JOIN (BROADCAST)\n  |  equal join conjunct: [282: lower, VARCHAR, true] = [283: lower, VARCHAR, true]\n  |  build runtime filters:\n  |  - filter_id = 0, build_expr = (283: lower), remote = false\n  |  output columns: 110, 112, 284\n  |  can local shuffle: false\n  |  cardinality: 10000\n  |  column statistics: \n  |  * mock_field_108-->[-Infinity, Infinity, 0.0, 11.8899, 9941.0] ESTIMATE\n  |  * mock_field_110-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_field_111-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----8:EXCHANGE\n  |       distribution type: BROADCAST\n  |       cardinality: 1\n  |    \n  1:Project\n  |  output columns:\n  |  110 <-> [110: mock_field_108, VARCHAR, true]\n  |  112 <-> [112: mock_field_110, ARRAY<VARCHAR(65533)>, true]\n  |  282 <-> lower[([110: mock_field_108, VARCHAR, true]); args: VARCHAR; result: VARCHAR; args nullable: true; result nullable: true]\n  |  284 <-> [284: mock_field_111, ARRAY<INT>, true]\n  |  cardinality: 10000\n  |  probe runtime filters:\n  |  - filter_id = 1, probe_expr = (lower(110: mock_field_108))\n  |  column statistics: \n  |  * mock_field_108-->[-Infinity, Infinity, 0.0, 11.8899, 9941.0] ESTIMATE\n  |  * mock_field_110-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  0:OlapScanNode\n     table: mock_table_3, rollup: mock_table_3\n     preAggregation: on\n     Predicates: lower(110: mock_field_108) IS NOT NULL, [108: mock_field_99, BIGINT, false] = 1681, DictDecode(285: mock_field_116, [<place-holder> = 'active'])\n     dict_col=mock_field_111,mock_field_116\n     partitionsRatio=1/1, tabletsRatio=40/40\n     tabletList=11134,11136,11138,11140,11142,11144,11146,11148,11150,11152 ...\n     actualRows=10000, avgRowSize=58.8899\n     Pruned type: 284 <-> [ARRAY<INT>]\n     Pruned type: 112 <-> [ARRAY<VARCHAR(65533)>]\n     cardinality: 10000\n     probe runtime filters:\n     - filter_id = 0, probe_expr = (lower(110: mock_field_108))\n     column statistics: \n     * mock_field_99-->[1681.0, 1681.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_field_108-->[-Infinity, Infinity, 0.0, 11.8899, 9941.0] ESTIMATE\n     * mock_field_110-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_field_111-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_field_116-->[-Infinity, Infinity, 0.0, 6.0, 1.0] ESTIMATE\n     * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n\nPLAN FRAGMENT 3(F09)\n\n  Input Partition: RANDOM\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange Id: 35\n\n  34:OlapScanNode\n     table: mock_table_1, rollup: mock_table_1\n     preAggregation: on\n     Predicates: [12: mock_field_3, BIGINT, false] = 4057908\n     dict_col=mock_field_33,mock_field_51,mock_field_30\n     partitionsRatio=1/1, tabletsRatio=1/40\n     tabletList=10811\n     actualRows=274, avgRowSize=100.669\n     Pruned type: 45 <-> [ARRAY<INT>]\n     Pruned type: 46 <-> [ARRAY<INT>]\n     cardinality: 1\n     column statistics: \n     * mock_field_1-->[500001.0, 510000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n     * mock_field_2-->[600001.0, 610000.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n     * mock_field_3-->[4057908.0, 4057908.0, 0.0, 8.0, 1.0138902970698571] ESTIMATE\n     * mock_field_27-->[-Infinity, Infinity, 0.0, 9.8902, 1.0138902970698571] ESTIMATE\n     * mock_field_30-->[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE\n     * mock_field_33-->[-Infinity, Infinity, 0.0, 9.0, 1.0] ESTIMATE\n     * mock_field_36-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_field_37-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_field_50-->[-Infinity, Infinity, 0.0, 9.8894, 1.0138902970698571] ESTIMATE\n     * mock_field_51-->[-Infinity, Infinity, 1.0, 0.0, 1.0] ESTIMATE\n     * mock_field_52-->[-Infinity, Infinity, 0.0, 8.8894, 1.0138902970698571] ESTIMATE\n\nPLAN FRAGMENT 4(F07)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange Id: 31\n\n  30:Project\n  |  output columns:\n  |  275 <-> [275: expr, TINYINT, false]\n  |  277 <-> lower[([274: cast, VARCHAR(26), true]); args: VARCHAR; result: VARCHAR; args nullable: true; result nullable: true]\n  |  cardinality: 24\n  |  column statistics: \n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  29:UNION\n     constant exprs: \n         'academics' | 1\n         'accounting_and_finance' | 2\n         'administration' | 3\n         'business_development' | 4\n         'construction_engineering' | 5\n         'consulting' | 6\n         'customer_support' | 7\n         'human_resources' | 8\n         'information_technology' | 9\n         'investment_management' | 10\n         'legal' | 11\n         'logistics' | 12\n         'manufacturing' | 13\n         'marketing' | 14\n         'medical' | 15\n         'operations' | 16\n         'purchasing_and_procurement' | 17\n         'quality_assurance' | 18\n         'research_and_development' | 19\n         'safety_and_security' | 20\n         'sales' | 21\n         'others' | 22\n         'product_management' | 24\n         'project_management' | 25\n     cardinality: 24\n     column statistics: \n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n\nPLAN FRAGMENT 5(F05)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange Id: 24\n\n  23:Project\n  |  output columns:\n  |  176 <-> [176: expr, TINYINT, false]\n  |  279 <-> lower[([175: cast, VARCHAR(16), true]); args: VARCHAR; result: VARCHAR; args nullable: true; result nullable: true]\n  |  cardinality: 8\n  |  column statistics: \n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  22:UNION\n     constant exprs: \n         'board_member' | 0\n         'clevel' | 1\n         'senior_executive' | 2\n         'vp' | 3\n         'director' | 4\n         'manager' | 5\n         'others' | 6\n         'lead' | 8\n     cardinality: 8\n     column statistics: \n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n\nPLAN FRAGMENT 6(F03)\n\n  Input Partition: RANDOM\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange Id: 17\n\n  16:Project\n  |  output columns:\n  |  280 <-> lower[([141: mp, VARCHAR(65533), true]); args: VARCHAR; result: VARCHAR; args nullable: true; result nullable: true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  15:SELECT\n  |  predicates: lower(141: mp) IS NOT NULL\n  |  cardinality: 1\n  |  column statistics: \n  |  * mp-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  14:Decode\n  |  <dict id 292> : <string id 141>\n  |  cardinality: 1\n  |  column statistics: \n  |  * mp-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  13:TableValueFunction\n  |  tableFunctionName: unnest\n  |  columns: [unnest]\n  |  returnTypes: [INT]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mp-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  12:Project\n  |  output columns:\n  |  287 <-> [287: mock_field_105, ARRAY<INT>, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  \n  11:OlapScanNode\n     table: mock_table_2, rollup: mock_table_2\n     preAggregation: on\n     Predicates: [133: mock_field_99, BIGINT, true] = 1681, [135: mock_field_101, BIGINT, true] = 1890242\n     dict_col=mock_field_105\n     partitionsRatio=1/1, tabletsRatio=1/40\n     tabletList=11118\n     actualRows=252, avgRowSize=32.0\n     Pruned type: 287 <-> [ARRAY<INT>]\n     cardinality: 1\n     column statistics: \n     * mock_field_99-->[1681.0, 1681.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_field_101-->[1890242.0, 1890242.0, 0.0, 8.0, 1.0022048506714774] ESTIMATE\n     * mock_field_105-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 7(F01)\n\n  Input Partition: RANDOM\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange Id: 08\n\n  7:Project\n  |  output columns:\n  |  283 <-> lower[([132: mp, VARCHAR(65533), true]); args: VARCHAR; result: VARCHAR; args nullable: true; result nullable: true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * lower-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  6:SELECT\n  |  predicates: lower(132: mp) IS NOT NULL\n  |  cardinality: 1\n  |  column statistics: \n  |  * mp-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  5:Decode\n  |  <dict id 291> : <string id 132>\n  |  cardinality: 1\n  |  column statistics: \n  |  * mp-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  4:TableValueFunction\n  |  tableFunctionName: unnest\n  |  columns: [unnest]\n  |  returnTypes: [INT]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mp-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  3:Project\n  |  output columns:\n  |  286 <-> [286: mock_field_105, ARRAY<INT>, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  \n  2:OlapScanNode\n     table: mock_table_2, rollup: mock_table_2\n     preAggregation: on\n     Predicates: [124: mock_field_99, BIGINT, true] = 1681, [126: mock_field_101, BIGINT, true] = 1890242\n     dict_col=mock_field_105\n     partitionsRatio=1/1, tabletsRatio=1/40\n     tabletList=11118\n     actualRows=252, avgRowSize=32.0\n     Pruned type: 286 <-> [ARRAY<INT>]\n     cardinality: 1\n     column statistics: \n     * mock_field_99-->[1681.0, 1681.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_field_101-->[1890242.0, 1890242.0, 0.0, 8.0, 1.0022048506714774] ESTIMATE\n     * mock_field_105-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n","session_variables":"{\"partial_update_mode\":\"auto\",\"cbo_cte_reuse\":true,\"character_set_connection\":\"utf8\",\"cbo_use_correlated_join_estimate\":true,\"enable_insert_strict\":true,\"enable_connector_adaptive_io_tasks\":true,\"tx_isolation\":\"REPEATABLE-READ\",\"enable_hive_metadata_cache_with_insert\":false,\"automv_prune_rollup_unable_aggregate_with_conjuncts\":true,\"hive_temp_staging_dir\":\"/tmp/starrocks\",\"cbo_cte_reuse_rate_v2\":1.15,\"spill_rand_ratio\":0.1,\"enable_datacache_io_adaptor\":true,\"character_set_results\":\"utf8\",\"materialized_view_union_rewrite_mode\":0,\"enable_count_star_optimization\":true,\"enable_iceberg_column_statistics\":false,\"thrift_plan_protocol\":\"binary\",\"enable_plan_serialize_concurrently\":true,\"materialized_view_max_relation_mapping_size\":10,\"enable_rewrite_partition_column_minmax\":true,\"global_runtime_filter_build_min_size\":131072,\"enable_iceberg_identity_column_optimize\":true,\"enable_view_based_mv_rewrite\":true,\"query_excluding_mv_names\":\"\",\"enable_rewrite_simple_agg_to_meta_scan\":false,\"enable_ukfk_opt\":false,\"enable_adaptive_sink_dop\":true,\"enable_ukfk_join_reorder\":false,\"consistent_hash_virtual_number\":256,\"warehouse\":\"default_warehouse\",\"enable_profile\":false,\"load_mem_limit\":0,\"spill_storage_volume\":\"\",\"cbo_eq_base_type\":\"decimal\",\"enable_materialized_view_for_insert\":false,\"large_decimal_underlying_type\":\"panic\",\"sql_safe_updates\":0,\"runtime_filter_early_return_selectivity\":0.05,\"enable_local_shuffle_agg\":true,\"disable_function_fold_constants\":false,\"enable_query_queue\":true,\"enable_cbo_view_based_mv_rewrite\":false,\"automv_sampling_buckets\":512,\"select_ratio_threshold\":0.15,\"automv_decay_accelerated_queries\":false,\"enable_connector_sink_global_shuffle\":true,\"query_delivery_timeout\":300,\"collation_database\":\"utf8_general_ci\",\"spill_mem_table_size\":104857600,\"enable_gin_filter\":true,\"follower_query_forward_mode\":\"\",\"orc_use_column_names\":false,\"spill_enable_compaction\":true,\"cbo_use_lock_db\":false,\"new_planner_agg_stage\":0,\"enable_strict_order_by\":true,\"hash_join_interpolate_passthrough\":false,\"cbo_enable_intersect_add_distinct\":true,\"use_compute_nodes\":-1,\"enable_metadata_profile\":false,\"collation_connection\":\"utf8_general_ci\",\"enable_rewrite_bitmap_union_to_bitamp_agg\":true,\"enable_force_rule_based_mv_rewrite\":true,\"enable_array_distinct_after_agg_opt\":true,\"resource_group\":\"\",\"group_execution_max_groups\":128,\"scan_hive_partition_num_limit\":0,\"always_collect_low_card_dict\":false,\"enable_materialized_view_plan_cache\":true,\"spill_operator_max_bytes\":1048576000,\"enable_materialized_view_agg_pushdown_rewrite\":false,\"cbo_max_reorder_node_use_dp\":10,\"cbo_prepare_metadata_thread_pool_size\":16,\"enable_result_sink_accumulate\":true,\"enable_hive_column_stats\":true,\"enable_async_profile\":true,\"enable_groupby_use_output_alias\":false,\"global_runtime_filter_wait_timeout\":20,\"forward_to_leader\":false,\"enable_prune_column_after_index_filter\":true,\"count_distinct_column_buckets\":1024,\"cross_join_cost_penalty\":1000000,\"query_cache_agg_cardinality_limit\":5000000,\"connector_sink_spill_mem_limit_threshold\":0.5,\"cboPushDownAggregateMode_v1\":-1,\"window_partition_mode\":1,\"enable_tablet_internal_parallel_v2\":true,\"enable_predicate_expr_reuse\":true,\"interpolate_passthrough\":true,\"analyze_mv_v2\":\"\",\"enable_incremental_mv\":false,\"cbo_push_down_topn_limit\":1000,\"automv_enable_semi_anti_join\":true,\"SQL_AUTO_IS_NULL\":false,\"event_scheduler\":\"OFF\",\"parallel_merge_late_materialization_mode\":\"auto\",\"max_pipeline_dop\":64,\"broadcast_right_table_scale_factor\":10,\"materialized_view_rewrite_mode\":\"DEFAULT\",\"enable_read_iceberg_puffin_ndv\":true,\"enable_write_hive_external_table\":false,\"enable_simplify_case_when\":true,\"enable_aggregation_pipeline_share_limit\":true,\"runtime_join_filter_push_down_limit\":1024000,\"trace_log_mode\":\"command\",\"enable_scan_datacache\":true,\"enable_scan_predicate_expr_reuse\":false,\"big_query_log_cpu_second_threshold\":480,\"div_precision_increment\":4,\"runtime_adaptive_dop_max_block_rows_per_driver_seq\":16384,\"log_rejected_record_num\":0,\"phased_scheduler_max_concurrency\":2,\"populate_datacache_mode\":\"auto\",\"enable_short_circuit\":false,\"cbo_push_down_distinct_below_window\":true,\"sql_mode_v2\":34,\"prefer_cte_rewrite\":false,\"optimizer_materialized_view_timelimit\":1000,\"hdfs_backend_selector_scan_range_shuffle\":false,\"automv_card_rowcount_ratio_lwm_v2\":0.1,\"pipeline_profile_level\":1,\"parallel_fragment_exec_instance_num\":1,\"max_scan_key_num\":-1,\"net_read_timeout\":60,\"streaming_preaggregation_mode\":\"auto\",\"hive_partition_stats_sample_size\":3000,\"enable_mv_planner\":false,\"enable_collect_table_level_scan_stats\":true,\"enable_fine_grained_range_predicate\":false,\"enable_populate_datacache\":true,\"enable_connector_sink_writer_scaling\":true,\"query_debug_options\":\"\",\"profile_timeout\":10,\"cbo_push_down_aggregate\":\"global\",\"spill_encode_level\":7,\"enable_query_dump\":false,\"max_spill_read_buffer_bytes_per_driver\":16777216,\"global_runtime_filter_build_max_size\":67108864,\"cbo_push_down_groupingset_reshuffle\":true,\"enable_rewrite_sum_by_associative_rule\":true,\"query_cache_hot_partition_num\":3,\"enable_prune_complex_types\":true,\"enable_delta_lake_column_statistics\":false,\"metadata_collect_query_timeout\":60,\"query_cache_type\":0,\"max_parallel_scan_instance_num\":-1,\"enable_dynamic_prune_scan_range\":true,\"query_cache_entry_max_rows\":409600,\"enable_paimon_column_statistics\":false,\"connector_io_tasks_per_scan_operator\":16,\"disable_spill_to_local_disk\":false,\"enable_materialized_view_union_rewrite\":true,\"sql_quote_show_create\":true,\"enable_constant_execute_in_fe\":true,\"scan_or_to_union_threshold\":50000000,\"enable_materialized_view_rewrite_partition_compensate\":true,\"enable_exchange_pass_through\":true,\"runtime_profile_report_interval\":10,\"automv_use_bitmap_count_distinct\":true,\"query_cache_entry_max_bytes\":4194304,\"enable_partition_column_value_only_optimization\":true,\"scan_olap_partition_num_limit\":0,\"connector_max_split_size\":67108864,\"array_low_cardinality_optimize\":true,\"interleaving_group_size\":10,\"automv_sampling_ratio_low_bound\":0.01,\"enable_exchange_perf\":false,\"enable_prepare_stmt\":true,\"workgroup_id\":0,\"enable_pipeline_level_multi_partitioned_rf\":false,\"enable_rewrite_groupingsets_to_union_all\":false,\"spill_enable_direct_io\":false,\"cbo_push_down_groupingset\":true,\"custom_query_id\":\"\",\"transmission_compression_type\":\"NO_COMPRESSION\",\"interactive_timeout\":3600,\"use_page_cache\":true,\"automv_push_down_agg_below_semi_anti_join\":false,\"big_query_log_scan_bytes_threshold\":10737418240,\"collation_server\":\"utf8_general_ci\",\"cbo_decimal_cast_string_strict\":true,\"enable_hyperscan_vec\":true,\"count_distinct_implementation\":\"default\",\"enable_datacache_async_populate_mode\":true,\"cbo_enable_predicate_subfield_path\":true,\"tablet_internal_parallel_mode\":\"auto\",\"enable_pipeline\":true,\"spill_mode\":\"auto\",\"allow_hive_without_partition_filter\":true,\"cbo_prune_json_subfield_depth\":20,\"enable_lambda_pushdown\":true,\"enable_query_debug_trace\":false,\"like_predicate_consolidate_min\":2,\"cbo_materialized_view_rewrite_related_mvs_limit\":16,\"enable_lake_tablet_internal_parallel\":false,\"enable_show_all_variables\":false,\"hdfs_backend_selector_force_rebalance\":false,\"full_sort_max_buffered_bytes\":268435456,\"catalog\":\"default_catalog\",\"wait_timeout\":28800,\"automv_partial_rollup_min_agg_pieces\":3,\"max_buckets_per_be_to_use_balancer_assignment\":6,\"enable_query_tablet_affinity\":false,\"transmission_encode_level\":7,\"query_including_mv_names\":\"\",\"transaction_isolation\":\"REPEATABLE-READ\",\"automv_use_array_agg_count_distinct\":false,\"enable_global_runtime_filter\":true,\"enable_load_profile\":false,\"enable_rewrite_simple_agg_to_hdfs_scan\":false,\"enable_plan_validation\":true,\"load_transmission_compression_type\":\"NO_COMPRESSION\",\"global_runtime_filter_rpc_http_min_size\":67108864,\"cbo_materialized_view_rewrite_rule_output_limit\":3,\"cbo_enable_low_cardinality_optimize\":true,\"scan_use_query_mem_ratio\":0.3,\"datacache_evict_probability\":100,\"enable_analyze_phase_prune_columns\":false,\"connector_huge_file_size\":536870912,\"new_planner_optimize_timeout\":3000,\"enable_outer_join_reorder\":true,\"force_schedule_local\":false,\"hudi_mor_force_jni_reader\":false,\"enable_agg_spill_preaggregation\":true,\"cbo_enable_greedy_join_reorder\":true,\"range_pruner_max_predicate\":100,\"enable_rbo_table_prune\":false,\"spillable_operator_mask\":-1,\"enable_wait_dependent_event\":false,\"rpc_http_min_size\":2147482624,\"low_cardinality_optimize_v2\":true,\"enable_file_metacache\":true,\"cbo_debug_alive_backend_number\":0,\"global_runtime_filter_probe_min_size\":102400,\"topn_filter_back_pressure_mode\":0,\"scan_or_to_union_limit\":4,\"automv_default_partition_by_time_granule\":\"day\",\"enable_cbo_table_prune\":false,\"enable_parallel_merge\":true,\"cbo_materialized_view_rewrite_candidate_limit\":12,\"skew_join_use_mcv_count\":5,\"skip_page_cache\":false,\"cbo_derive_join_is_null_predicate\":true,\"nested_mv_rewrite_max_level\":3,\"enable_materialized_view_text_match_rewrite\":true,\"big_query_profile_threshold\":\"30s\",\"net_write_timeout\":60,\"cbo_prune_shuffle_column_rate\":0.1,\"spill_revocable_max_bytes\":0,\"hash_join_push_down_right_table\":true,\"connector_sink_target_max_file_size\":1073741824,\"max_ukfk_join_reorder_scale_ratio\":100,\"pipeline_sink_dop\":0,\"automv_relative_error_bound\":0.05,\"broadcast_row_limit\":15000000,\"enable_prune_iceberg_manifest\":true,\"exec_mem_limit\":2147483648,\"enable_sort_aggregate\":false,\"query_cache_force_populate\":false,\"computation_fragment_scheduling_policy\":\"COMPUTE_NODES_ONLY\",\"runtime_filter_on_exchange_node\":false,\"disable_join_reorder\":false,\"enable_evaluate_schema_scan_rule\":true,\"global_runtime_filter_rpc_timeout\":400,\"connector_scan_use_query_mem_ratio\":0.3,\"net_buffer_length\":16384,\"cbo_prune_subfield\":true,\"full_sort_max_buffered_rows\":1073741824,\"automv_use_cardinality_estimation\":true,\"query_timeout\":300,\"connector_io_tasks_slow_io_latency_ms\":50,\"cbo_max_reorder_node\":50,\"automv_sampling_timeout\":300000,\"enable_distinct_column_bucketization\":false,\"enable_big_query_log\":true,\"enable_spill_buffer_read\":true,\"group_execution_min_scan_rows\":5000000,\"runtime_filter_scan_wait_time\":20,\"enable_count_distinct_rewrite_by_hll_bitmap\":true,\"enable_sync_materialized_view_rewrite\":true,\"prefer_compute_node\":true,\"enable_strict_type\":false,\"automv_enable_complex_derived_dimensions\":true,\"enable_table_prune_on_update\":false,\"group_concat_max_len\":1024,\"enable_stats_to_optimize_skew_join\":false,\"parse_tokens_limit\":3500000,\"chunk_size\":4096,\"global_runtime_filter_probe_min_selectivity\":0.5,\"query_mem_limit\":0,\"enable_filter_unused_columns_in_scan_stage\":true,\"enable_materialized_view_single_table_view_delta_rewrite\":false,\"cbo_prune_json_subfield\":false,\"enable_spill_to_remote_storage\":false,\"enable_materialized_view_transparent_union_rewrite\":true,\"enable_prune_complex_types_in_unnest\":true,\"automv_max_calculate_steps\":2147483647,\"auto_increment_increment\":1,\"sql_dialect\":\"StarRocks\",\"automv_use_hll_count_distinct\":false,\"enable_per_bucket_optimize\":true,\"automv_enable_complex_derived_metrics\":false,\"enable_eliminate_agg\":true,\"enable_group_execution\":true,\"big_query_log_scan_rows_threshold\":1000000000,\"character_set_client\":\"utf8\",\"autocommit\":true,\"enable_column_expr_predicate\":true,\"enable_partition_bucket_optimize\":false,\"skip_local_disk_cache\":false,\"max_ukfk_join_reorder_fk_rows\":100000000,\"enable_subfield_no_copy\":true,\"jit_level\":1,\"enable_runtime_adaptive_dop\":false,\"cbo_cte_max_limit\":10,\"connector_sink_compression_codec\":\"uncompressed\",\"automv_min_sampling_rows\":1073741824,\"storage_engine\":\"olap\",\"enable_rewrite_unnest_bitmap_to_array\":true,\"spill_operator_min_bytes\":52428800,\"cbo_enable_dp_join_reorder\":true,\"tx_visible_wait_timeout\":10,\"materialized_view_join_same_table_permutation_limit\":5,\"enable_materialized_view_view_delta_rewrite\":true,\"cbo_max_reorder_node_use_exhaustive\":4,\"enable_sql_digest\":false,\"spill_mem_table_num\":2,\"enable_spill\":false,\"enable_materialized_view_rewrite_greedy_mode\":false,\"pipeline_dop\":0,\"single_node_exec_plan\":false,\"full_sort_late_materialization_v2\":true,\"automv_max_order_by_columns\":3,\"join_implementation_mode_v2\":\"auto\",\"enable_connector_split_io_tasks\":true,\"sql_select_limit\":9223372036854775807,\"enable_materialized_view_rewrite\":true,\"materialized_view_subuqery_text_match_max_count\":4,\"statistic_collect_parallel\":1,\"hdfs_backend_selector_hash_algorithm\":\"consistent\",\"enable_expr_prune_partition\":true,\"plan_mode\":\"auto\",\"enable_topn_runtime_filter\":true,\"disable_colocate_join\":false,\"max_pushdown_conditions_per_column\":-1,\"back_pressure_back_rounds\":3,\"default_table_compression\":\"lz4_frame\",\"automv_enable_view_inline\":true,\"runtime_adaptive_dop_max_output_amplification_factor\":0,\"skew_join_rand_range\":1000,\"choose_execute_instances_mode\":\"LOCALITY\",\"back_pressure_throttle_time_upper_bound\":300,\"skew_join_data_skew_threshold\":0.2,\"innodb_read_only\":true,\"spill_mem_limit_threshold\":0.8,\"cbo_reorder_threshold_use_exhaustive\":6,\"disable_generated_column_rewrite\":false,\"automv_card_rowcount_ratio_hwm_v2\":0.6,\"enable_predicate_reorder\":false,\"enable_connector_sink_spill\":true,\"enable_query_cache\":false,\"enable_phased_scheduler\":false,\"group_execution_group_scale\":64,\"transaction_read_only\":false,\"max_allowed_packet\":33554432,\"enable_partition_level_cardinality_estimation\":true,\"enable_materialized_view_multi_stages_rewrite\":true,\"enable_parallel_prepare_metadata\":false,\"enable_cloud_native_persistent_index_by_default\":false,\"time_zone\":\"Asia/Shanghai\",\"enable_multicolumn_global_runtime_filter\":false,\"character_set_server\":\"utf8\",\"cbo_use_nth_exec_plan\":0,\"io_tasks_per_scan_operator\":4,\"parallel_exchange_instance_num\":-1,\"enable_shared_scan\":false,\"join_late_materialization\":false,\"audit_execute_stmt\":false,\"cbo_derive_range_join_predicate\":false,\"allow_default_partition\":false,\"cbo_use_histogram_evaluate_list_partition\":false,\"paimon_force_jni_reader\":false,\"enable_pipeline_level_shuffle\":true}","be_number":3,"be_core_stat":{"numOfHardwareCoresPerBe":"{\"10001\":16,\"10002\":16,\"10003\":16}","cachedAvgNumOfHardwareCores":16},"exception":["cte mock_cte_1 not be desensitized"],"version":"3.3.17-db-d1ea7ef-0808","commit_version":"d1ea7ef"}