{"statement":"SELECT tbl_mock_026.mock_019, tbl_mock_026.mock_023 AS mock_020, sum(tbl_mock_026.mock_024) AS mock_021, sum(tbl_mock_026.mock_025) AS mock_022\nFROM ((SELECT tbl_mock_031.mock_027 AS mock_019, tbl_mock_031.mock_028 AS mock_023, tbl_mock_031.mock_029 AS mock_024, tbl_mock_031.mock_030 AS mock_025\nFROM (SELECT tbl_mock_047.mock_032 AS mock_027, tbl_mock_047.mock_033 AS mock_028, tbl_mock_047.mock_034 AS mock_029, tbl_mock_047.mock_035 AS mock_030\nFROM (SELECT tbl_mock_047.mock_002 AS mock_032, tbl_mock_047.mock_009 AS mock_036, tbl_mock_047.mock_010 AS mock_037, tbl_mock_047.mock_011 AS mock_038, tbl_mock_047.mock_012 AS mock_039, tbl_mock_047.mock_013 AS mock_040, tbl_mock_047.mock_014 AS mock_033, tbl_mock_047.mock_015 AS mock_041, tbl_mock_047.mock_016 AS mock_034, tbl_mock_047.mock_003 AS mock_042, tbl_mock_047.mock_004 AS mock_043, tbl_mock_047.mock_005 AS mock_044, tbl_mock_047.mock_006 AS mock_045, tbl_mock_047.mock_007 AS mock_046, tbl_mock_047.mock_008 AS mock_035\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_047) tbl_mock_047) tbl_mock_031) UNION ALL (SELECT tbl_mock_053.mock_049 AS mock_019, tbl_mock_053.mock_050 AS mock_023, tbl_mock_053.mock_051 AS mock_024, tbl_mock_053.mock_052 AS mock_025\nFROM (SELECT tbl_mock_058.mock_054 AS mock_049, tbl_mock_058.mock_055 AS mock_050, tbl_mock_058.mock_056 AS mock_051, tbl_mock_058.mock_057 AS mock_052\nFROM ((SELECT tbl_mock_063.mock_059 AS mock_054, tbl_mock_063.mock_060 AS mock_055, tbl_mock_063.mock_061 AS mock_056, tbl_mock_063.mock_062 AS mock_057\nFROM (SELECT tbl_mock_017.mock_032 AS mock_059, tbl_mock_017.mock_033 AS mock_060, tbl_mock_017.mock_034 AS mock_061, tbl_mock_017.mock_035 AS mock_062\nFROM (SELECT tbl_mock_017.mock_002 AS mock_032, tbl_mock_017.mock_009 AS mock_036, tbl_mock_017.mock_010 AS mock_037, tbl_mock_017.mock_011 AS mock_038, tbl_mock_017.mock_012 AS mock_039, tbl_mock_017.mock_013 AS mock_040, tbl_mock_017.mock_014 AS mock_033, tbl_mock_017.mock_015 AS mock_041, tbl_mock_017.mock_016 AS mock_034, tbl_mock_017.mock_003 AS mock_042, tbl_mock_017.mock_004 AS mock_043, tbl_mock_017.mock_005 AS mock_044, tbl_mock_017.mock_006 AS mock_045, tbl_mock_017.mock_007 AS mock_046, tbl_mock_017.mock_008 AS mock_035\nFROM db_mock_000.tbl_mock_017 AS tbl_mock_017) tbl_mock_017) tbl_mock_063) UNION ALL (SELECT NULL AS mock_054, tbl_mock_065.mock_064 AS mock_055, NULL AS mock_056, NULL AS mock_057\nFROM (SELECT tbl_mock_018.mock_033 AS mock_064\nFROM (SELECT tbl_mock_018.mock_002 AS mock_032, tbl_mock_018.mock_009 AS mock_036, tbl_mock_018.mock_010 AS mock_037, tbl_mock_018.mock_011 AS mock_038, tbl_mock_018.mock_012 AS mock_039, tbl_mock_018.mock_013 AS mock_040, tbl_mock_018.mock_014 AS mock_033, tbl_mock_018.mock_015 AS mock_041, tbl_mock_018.mock_016 AS mock_034, tbl_mock_018.mock_003 AS mock_042, tbl_mock_018.mock_004 AS mock_043, tbl_mock_018.mock_005 AS mock_044, tbl_mock_018.mock_006 AS mock_045, tbl_mock_018.mock_007 AS mock_046, tbl_mock_018.mock_008 AS mock_035\nFROM db_mock_000.tbl_mock_018 AS tbl_mock_018) tbl_mock_018) tbl_mock_065)) tbl_mock_058) tbl_mock_053)) tbl_mock_026\nWHERE (((tbl_mock_026.mock_019 >= (timestamp('2024-02-01 00:00:00.0'))) AND (1 = 1)) AND (tbl_mock_026.mock_023 != '')) AND (tbl_mock_026.mock_023 IS NOT NULL)\nGROUP BY 1, 2","table_meta":{"db_mock_000.tbl_mock_001":"CREATE TABLE db_mock_000.tbl_mock_001 (\nmock_002 datetime ,\nmock_009 varchar(65535) ,\nmock_010 varchar(65535) ,\nmock_011 varchar(65535) ,\nmock_012 varchar(65535) ,\nmock_013 varchar(65535) ,\nmock_014 varchar(65535) ,\nmock_015 decimal(27, 4) ,\nmock_016 decimal(27, 4) ,\nmock_003 decimal(27, 4) ,\nmock_004 varchar(65535) ,\nmock_005 decimal(27, 4) ,\nmock_006 decimal(27, 4) ,\nmock_007 decimal(27, 4) ,\nmock_008 decimal(27, 4) \n) ENGINE= OLAP \nDUPLICATE KEY(mock_002)\nDISTRIBUTED BY HASH(mock_002)\nPROPERTIES (\n\"replication_num\" = \"1\"\n);","db_mock_000.tbl_mock_017":"CREATE TABLE db_mock_000.tbl_mock_017 (\nmock_002 datetime ,\nmock_009 varchar(65535) ,\nmock_010 varchar(65535) ,\nmock_011 varchar(65535) ,\nmock_012 varchar(65535) ,\nmock_013 varchar(65535) ,\nmock_014 varchar(65535) ,\nmock_015 decimal(27, 4) ,\nmock_016 decimal(27, 4) ,\nmock_003 decimal(27, 4) ,\nmock_004 varchar(65535) ,\nmock_005 decimal(27, 4) ,\nmock_006 varchar(65535) ,\nmock_007 decimal(27, 4) ,\nmock_008 decimal(27, 4) \n) ENGINE= OLAP \nDUPLICATE KEY(mock_002)\nDISTRIBUTED BY HASH(mock_002)\nPROPERTIES (\n\"replication_num\" = \"1\"\n);","db_mock_000.tbl_mock_018":"CREATE TABLE db_mock_000.tbl_mock_018 (\nmock_002 datetime ,\nmock_009 varchar(65535) ,\nmock_010 varchar(65535) ,\nmock_011 varchar(65535) ,\nmock_012 varchar(65535) ,\nmock_013 varchar(65535) ,\nmock_014 varchar(65535) ,\nmock_015 decimal(27, 4) ,\nmock_016 decimal(27, 4) ,\nmock_003 decimal(27, 4) ,\nmock_004 decimal(27, 4) ,\nmock_005 decimal(27, 4) ,\nmock_006 decimal(27, 4) ,\nmock_007 decimal(27, 4) ,\nmock_008 decimal(27, 4) \n) ENGINE= OLAP \nDUPLICATE KEY(mock_002)\nDISTRIBUTED BY HASH(mock_002)\nPROPERTIES (\n\"replication_num\" = \"1\"\n);"},"table_row_count":{"db_mock_000.tbl_mock_001":{"tbl_mock_001":14},"db_mock_000.tbl_mock_017":{"tbl_mock_017":18}},"column_statistics":{"db_mock_000.tbl_mock_001":{"mock_002":"[1.7067168E9, 1.7088768E9, 0.0, 8.0, 4.0] ESTIMATE","mock_008":"[716.04, 108956.95, 0.0, 16.0, 10.0] ESTIMATE","mock_014":"[-Infinity, Infinity, 0.0, 9.3, 4.0] ESTIMATE","mock_016":"[1.8352, 239.5625, 0.0, 16.0, 10.0] ESTIMATE"},"db_mock_000.tbl_mock_017":{"mock_002":"[1.7042976E9, 1.709136E9, 0.0, 8.0, 10.0] ESTIMATE","mock_008":"[833.37, 833.37, 0.0, 16.0, 1.0] ESTIMATE","mock_014":"[-Infinity, Infinity, 0.0, 3.0, 1.0] ESTIMATE","mock_016":"[0.3137, 1.9901, 0.0, 16.0, 10.0] ESTIMATE"}},"explain_info":"PLAN FRAGMENT 0(F04)\n  Output Exprs:56: mock_002 | 57: mock_014 | 60: sum | 61: sum\n  Input Partition: UNPARTITIONED\n  RESULT SINK\n\n  11:EXCHANGE\n     cardinality: 10\n\nPLAN FRAGMENT 1(F03)\n\n  Input Partition: HASH_PARTITIONED: 56: mock_002, 57: mock_014\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 11\n\n  10:AGGREGATE (merge finalize)\n  |  aggregate: sum[([60: sum, DECIMAL128(38,4), true]); args: DECIMAL128; result: DECIMAL128(38,4); args nullable: true; result nullable: true], sum[([61: sum, DECIMAL128(38,4), true]); args: DECIMAL128; result: DECIMAL128(38,4); args nullable: true; result nullable: true]\n  |  group by: [56: mock_002, DATETIME, true], [57: mock_014, VARCHAR(65535), true]\n  |  cardinality: 10\n  |  column statistics: \n  |  * mock_002-->[1.7067168E9, 1.709136E9, 0.0, 8.0, 4.5] ESTIMATE\n  |  * mock_014-->[-Infinity, Infinity, 0.0, 7.41, 4.0] ESTIMATE\n  |  * sum-->[0.3137, 239.5625, 0.0, 16.0, 10.125] ESTIMATE\n  |  * sum-->[716.04, 110318.91187499999, 0.0, 16.0, 10.0] ESTIMATE\n  |  \n  9:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [56: mock_002, DATETIME, true], [57: mock_014, VARCHAR(65535), true]\n     cardinality: 10\n\nPLAN FRAGMENT 2(F00)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 56: mock_002, 57: mock_014\n  OutPut Exchange id: 09\n\n  8:AGGREGATE (update serialize)\n  |  STREAMING\n  |  aggregate: sum[([58: mock_016, DECIMAL128(27,4), true]); args: DECIMAL128; result: DECIMAL128(38,4); args nullable: true; result nullable: true], sum[([59: mock_008, DECIMAL128(27,4), true]); args: DECIMAL128; result: DECIMAL128(38,4); args nullable: true; result nullable: true]\n  |  group by: [56: mock_002, DATETIME, true], [57: mock_014, VARCHAR(65535), true]\n  |  cardinality: 10\n  |  column statistics: \n  |  * mock_002-->[1.7067168E9, 1.709136E9, 0.0, 8.0, 4.5] ESTIMATE\n  |  * mock_014-->[-Infinity, Infinity, 0.0, 7.41, 4.0] ESTIMATE\n  |  * sum-->[0.3137, 239.5625, 0.0, 16.0, 10.125] ESTIMATE\n  |  * sum-->[716.04, 110318.91187499999, 0.0, 16.0, 10.0] ESTIMATE\n  |  \n  0:UNION\n  |  output exprs:\n  |      [56, DATETIME, true] | [57, VARCHAR(65535), true] | [58, DECIMAL128(27,4), true] | [59, DECIMAL128(27,4), true]\n  |  child exprs:\n  |      [1: mock_002, DATETIME, true] | [7, VARCHAR, true] | [9: mock_016, DECIMAL128(27,4), true] | [15: mock_008, DECIMAL128(27,4), true]\n  |      [52: mock_002, DATETIME, true] | [53, VARCHAR, true] | [54: mock_016, DECIMAL128(27,4), true] | [55: mock_008, DECIMAL128(27,4), true]\n  |  pass-through-operands: all\n  |  cardinality: 15\n  |  column statistics: \n  |  * mock_002-->[1.7067168E9, 1.709136E9, 0.0, 8.0, 4.5] ESTIMATE\n  |  * mock_014-->[-Infinity, Infinity, 0.0, 7.41, 4.0] ESTIMATE\n  |  * mock_016-->[0.3137, 239.5625, 0.0, 16.0, 14.493484130766639] ESTIMATE\n  |  * mock_008-->[716.04, 108956.95, 0.0, 16.0, 10.0] ESTIMATE\n  |  \n  |----7:EXCHANGE\n  |       cardinality: 5\n  |    \n  3:EXCHANGE\n     cardinality: 11\n\nPLAN FRAGMENT 3(F02)\n\n  Input Partition: RANDOM\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 07\n\n  6:Decode\n  |  <dict id 63> : <string id 53>\n  |  cardinality: 5\n  |  column statistics: \n  |  * mock_002-->[1.7067168E9, 1.709136E9, 0.0, 8.0, 4.5] ESTIMATE\n  |  * mock_014-->[-Infinity, Infinity, 0.0, 3.0, 1.0] ESTIMATE\n  |  * mock_016-->[0.3137, 1.9901, 0.0, 16.0, 4.5] ESTIMATE\n  |  * mock_008-->[833.37, 833.37, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_002-->[1.7067168E9, 1.709136E9, 0.0, 8.0, 4.5] ESTIMATE\n  |  * mock_014-->[-Infinity, Infinity, 0.0, 3.0, 1.0] ESTIMATE\n  |  * mock_016-->[0.3137, 1.9901, 0.0, 16.0, 4.5] ESTIMATE\n  |  * mock_008-->[833.37, 833.37, 0.0, 16.0, 1.0] ESTIMATE\n  |  \n  5:Project\n  |  output columns:\n  |  52 <-> [16: mock_002, DATETIME, true]\n  |  54 <-> [24: mock_016, DECIMAL128(27,4), true]\n  |  55 <-> [30: mock_008, DECIMAL128(27,4), true]\n  |  63 <-> [63: mock_014, INT, true]\n  |  cardinality: 5\n  |  column statistics: \n  |  * mock_002-->[1.7067168E9, 1.709136E9, 0.0, 8.0, 4.5] ESTIMATE\n  |  * mock_016-->[0.3137, 1.9901, 0.0, 16.0, 4.5] ESTIMATE\n  |  * mock_008-->[833.37, 833.37, 0.0, 16.0, 1.0] ESTIMATE\n  |  \n  4:OlapScanNode\n     table: mock_017, rollup: mock_017\n     preAggregation: on\n     Predicates: [16: mock_002, DATETIME, true] >= '2024-02-01 00:00:00', DictExpr(63: mock_014,[<place-holder> != '']), DictExpr(63: mock_014,[<place-holder> IS NOT NULL])\n     dict_col=mock_014\n     partitionsRatio=1/1, tabletsRatio=6/6\n     tabletList=68048,68050,68052,68054,68056,68058\n     actualRows=0, avgRowSize=86.0\n     cardinality: 5\n     column statistics: \n     * mock_002-->[1.7067168E9, 1.709136E9, 0.0, 8.0, 4.5] ESTIMATE\n     * mock_014-->[-Infinity, Infinity, 0.0, 3.0, 1.0] ESTIMATE\n     * mock_016-->[0.3137, 1.9901, 0.0, 16.0, 4.5] ESTIMATE\n     * mock_008-->[833.37, 833.37, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_002-->[1.7067168E9, 1.709136E9, 0.0, 8.0, 4.5] ESTIMATE\n     * mock_014-->[-Infinity, Infinity, 0.0, 3.0, 1.0] ESTIMATE\n     * mock_016-->[0.3137, 1.9901, 0.0, 16.0, 4.5] ESTIMATE\n     * mock_008-->[833.37, 833.37, 0.0, 16.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 4(F01)\n\n  Input Partition: RANDOM\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 03\n\n  2:Decode\n  |  <dict id 62> : <string id 7>\n  |  cardinality: 11\n  |  column statistics: \n  |  * mock_002-->[1.7067168E9, 1.7088768E9, 0.0, 8.0, 4.0] ESTIMATE\n  |  * mock_014-->[-Infinity, Infinity, 0.0, 9.3, 4.0] ESTIMATE\n  |  * mock_016-->[1.8352, 239.5625, 0.0, 16.0, 10.0] ESTIMATE\n  |  * mock_008-->[716.04, 108956.95, 0.0, 16.0, 10.0] ESTIMATE\n  |  \n  1:OlapScanNode\n     table: mock_001, rollup: mock_001\n     preAggregation: on\n     Predicates: [1: mock_002, DATETIME, true] >= '2024-02-01 00:00:00', DictExpr(62: mock_014,[<place-holder> != '']), DictExpr(62: mock_014,[<place-holder> IS NOT NULL])\n     dict_col=mock_014\n     partitionsRatio=1/1, tabletsRatio=6/6\n     tabletList=68018,68020,68022,68024,68026,68028\n     actualRows=0, avgRowSize=49.3\n     cardinality: 11\n     column statistics: \n     * mock_002-->[1.7067168E9, 1.7088768E9, 0.0, 8.0, 4.0] ESTIMATE\n     * mock_014-->[-Infinity, Infinity, 0.0, 9.3, 4.0] ESTIMATE\n     * mock_016-->[1.8352, 239.5625, 0.0, 16.0, 10.0] ESTIMATE\n     * mock_008-->[716.04, 108956.95, 0.0, 16.0, 10.0] ESTIMATE\n","session_variables":"{\"partial_update_mode\":\"auto\",\"cbo_cte_reuse\":true,\"character_set_connection\":\"utf8\",\"cbo_use_correlated_join_estimate\":true,\"enable_insert_strict\":true,\"enable_connector_adaptive_io_tasks\":true,\"tx_isolation\":\"REPEATABLE-READ\",\"enable_hive_metadata_cache_with_insert\":false,\"cbo_cte_reuse_rate_v2\":1.15,\"character_set_results\":\"utf8\",\"enable_iceberg_column_statistics\":true,\"enable_count_star_optimization\":true,\"automv_card_rowcount_ratio_lwm\":0.05,\"global_runtime_filter_build_min_size\":131072,\"enable_iceberg_identity_column_optimize\":true,\"query_excluding_mv_names\":\"\",\"enable_rewrite_simple_agg_to_meta_scan\":false,\"enable_adaptive_sink_dop\":true,\"consistent_hash_virtual_number\":128,\"enable_profile\":false,\"load_mem_limit\":0,\"cbo_eq_base_type\":\"varchar\",\"enable_materialized_view_for_insert\":false,\"large_decimal_underlying_type\":\"panic\",\"sql_safe_updates\":0,\"runtime_filter_early_return_selectivity\":0.05,\"enable_local_shuffle_agg\":true,\"disable_function_fold_constants\":false,\"enable_query_queue\":true,\"automv_sampling_buckets\":512,\"select_ratio_threshold\":0.15,\"query_delivery_timeout\":300,\"collation_database\":\"utf8_general_ci\",\"spill_mem_table_size\":104857600,\"follower_query_forward_mode\":\"\",\"cbo_use_lock_db\":false,\"new_planner_agg_stage\":0,\"enable_strict_order_by\":true,\"hash_join_interpolate_passthrough\":false,\"use_compute_nodes\":-1,\"collation_connection\":\"utf8_general_ci\",\"enable_rewrite_bitmap_union_to_bitamp_agg\":false,\"resource_group\":\"\",\"enable_materialized_view_plan_cache\":true,\"spill_operator_max_bytes\":1048576000,\"cbo_max_reorder_node_use_dp\":10,\"enable_hive_column_stats\":true,\"enable_async_profile\":true,\"enable_groupby_use_output_alias\":false,\"global_runtime_filter_wait_timeout\":20,\"forward_to_leader\":false,\"count_distinct_column_buckets\":1024,\"cross_join_cost_penalty\":1000000,\"query_cache_agg_cardinality_limit\":5000000,\"enable_pipeline_query_statistic\":true,\"cboPushDownAggregateMode_v1\":-1,\"window_partition_mode\":1,\"enable_deliver_batch_fragments\":true,\"enable_tablet_internal_parallel_v2\":true,\"interpolate_passthrough\":true,\"enable_incremental_mv\":false,\"cbo_push_down_topn_limit\":0,\"SQL_AUTO_IS_NULL\":false,\"event_scheduler\":\"OFF\",\"max_pipeline_dop\":64,\"broadcast_right_table_scale_factor\":10,\"materialized_view_rewrite_mode\":\"DEFAULT\",\"enable_simplify_case_when\":true,\"runtime_join_filter_push_down_limit\":1024000,\"big_query_log_cpu_second_threshold\":480,\"div_precision_increment\":4,\"runtime_adaptive_dop_max_block_rows_per_driver_seq\":16384,\"log_rejected_record_num\":0,\"cbo_push_down_distinct_below_window\":true,\"sql_mode_v2\":34,\"prefer_cte_rewrite\":false,\"optimizer_materialized_view_timelimit\":1000,\"hdfs_backend_selector_scan_range_shuffle\":false,\"pipeline_profile_level\":1,\"parallel_fragment_exec_instance_num\":1,\"max_scan_key_num\":-1,\"net_read_timeout\":60,\"streaming_preaggregation_mode\":\"auto\",\"hive_partition_stats_sample_size\":3000,\"enable_mv_planner\":false,\"enable_collect_table_level_scan_stats\":true,\"query_debug_options\":\"\",\"profile_timeout\":2,\"cbo_push_down_aggregate\":\"global\",\"spill_encode_level\":7,\"enable_query_dump\":false,\"global_runtime_filter_build_max_size\":67108864,\"enable_rewrite_sum_by_associative_rule\":true,\"query_cache_hot_partition_num\":3,\"enable_prune_complex_types\":true,\"query_cache_type\":0,\"max_parallel_scan_instance_num\":-1,\"query_cache_entry_max_rows\":409600,\"enable_mv_optimizer_trace_log\":false,\"connector_io_tasks_per_scan_operator\":16,\"enable_materialized_view_union_rewrite\":true,\"sql_quote_show_create\":true,\"scan_or_to_union_threshold\":50000000,\"enable_materialized_view_rewrite_partition_compensate\":true,\"enable_exchange_pass_through\":true,\"runtime_profile_report_interval\":10,\"query_cache_entry_max_bytes\":4194304,\"enable_partition_column_value_only_optimization\":true,\"enable_iceberg_ndv\":true,\"automv_sampling_ratio_low_bound\":0.01,\"enable_exchange_perf\":false,\"workgroup_id\":0,\"enable_rewrite_groupingsets_to_union_all\":false,\"transmission_compression_type\":\"NO_COMPRESSION\",\"interactive_timeout\":3600,\"use_page_cache\":true,\"big_query_log_scan_bytes_threshold\":10737418240,\"collation_server\":\"utf8_general_ci\",\"cbo_decimal_cast_string_strict\":true,\"tablet_internal_parallel_mode\":\"auto\",\"enable_pipeline\":true,\"spill_mode\":\"auto\",\"enable_query_debug_trace\":false,\"enable_show_all_variables\":false,\"full_sort_max_buffered_bytes\":16777216,\"wait_timeout\":28800,\"automv_partial_rollup_min_agg_pieces\":3,\"enable_query_tablet_affinity\":false,\"transmission_encode_level\":7,\"query_including_mv_names\":\"\",\"transaction_isolation\":\"REPEATABLE-READ\",\"enable_global_runtime_filter\":true,\"enable_load_profile\":false,\"enable_plan_validation\":true,\"load_transmission_compression_type\":\"NO_COMPRESSION\",\"global_runtime_filter_rpc_http_min_size\":67108864,\"cbo_materialized_view_rewrite_rule_output_limit\":3,\"automv_card_rowcount_ratio_hwm\":0.5,\"cbo_enable_low_cardinality_optimize\":true,\"scan_use_query_mem_ratio\":0.3,\"new_planner_optimize_timeout\":3000,\"enable_outer_join_reorder\":true,\"force_schedule_local\":false,\"hudi_mor_force_jni_reader\":false,\"full_sort_late_materialization\":false,\"cbo_enable_greedy_join_reorder\":true,\"range_pruner_max_predicate\":100,\"enable_rbo_table_prune\":false,\"spillable_operator_mask\":-1,\"rpc_http_min_size\":2147482624,\"cbo_debug_alive_backend_number\":0,\"global_runtime_filter_probe_min_size\":102400,\"scan_or_to_union_limit\":4,\"enable_cbo_table_prune\":false,\"enable_parallel_merge\":true,\"cbo_materialized_view_rewrite_candidate_limit\":12,\"nested_mv_rewrite_max_level\":3,\"big_query_profile_threshold\":\"0s\",\"net_write_timeout\":60,\"cbo_prune_shuffle_column_rate\":0.1,\"enable_persistent_index_by_default\":true,\"hash_join_push_down_right_table\":true,\"pipeline_sink_dop\":0,\"automv_relative_error_bound\":0.05,\"broadcast_row_limit\":15000000,\"enable_populate_block_cache\":true,\"exec_mem_limit\":2147483648,\"enable_sort_aggregate\":false,\"query_cache_force_populate\":false,\"runtime_filter_on_exchange_node\":false,\"disable_join_reorder\":false,\"enable_rule_based_materialized_view_rewrite\":true,\"global_runtime_filter_rpc_timeout\":400,\"connector_scan_use_query_mem_ratio\":0.3,\"net_buffer_length\":16384,\"cbo_prune_subfield\":true,\"full_sort_max_buffered_rows\":1024000,\"automv_use_cardinality_estimation\":true,\"query_timeout\":259200,\"connector_io_tasks_slow_io_latency_ms\":50,\"cbo_max_reorder_node\":50,\"automv_sampling_timeout\":300000,\"enable_distinct_column_bucketization\":false,\"enable_big_query_log\":true,\"analyze_mv\":\"sample\",\"runtime_filter_scan_wait_time\":20,\"enable_sync_materialized_view_rewrite\":true,\"prefer_compute_node\":true,\"enable_strict_type\":false,\"enable_table_prune_on_update\":false,\"group_concat_max_len\":1024,\"parse_tokens_limit\":3500000,\"chunk_size\":4096,\"global_runtime_filter_probe_min_selectivity\":0.5,\"query_mem_limit\":0,\"enable_filter_unused_columns_in_scan_stage\":true,\"enable_scan_block_cache\":false,\"enable_materialized_view_single_table_view_delta_rewrite\":false,\"enable_prune_complex_types_in_unnest\":true,\"automv_max_calculate_steps\":2147483647,\"auto_increment_increment\":1,\"sql_dialect\":\"StarRocks\",\"big_query_log_scan_rows_threshold\":1000000000,\"character_set_client\":\"utf8\",\"autocommit\":true,\"enable_column_expr_predicate\":true,\"enable_runtime_adaptive_dop\":false,\"cbo_cte_max_limit\":10,\"automv_min_sampling_rows\":1073741824,\"storage_engine\":\"olap\",\"enable_optimizer_trace_log\":false,\"spill_operator_min_bytes\":10485760,\"cbo_enable_dp_join_reorder\":true,\"tx_visible_wait_timeout\":10,\"materialized_view_join_same_table_permutation_limit\":5,\"enable_materialized_view_view_delta_rewrite\":true,\"cbo_max_reorder_node_use_exhaustive\":4,\"enable_sql_digest\":false,\"spill_mem_table_num\":2,\"enable_spill\":false,\"enable_materialized_view_rewrite_greedy_mode\":false,\"pipeline_dop\":0,\"single_node_exec_plan\":false,\"join_implementation_mode_v2\":\"auto\",\"sql_select_limit\":9223372036854775807,\"enable_materialized_view_rewrite\":true,\"statistic_collect_parallel\":1,\"hdfs_backend_selector_hash_algorithm\":\"consistent\",\"enable_expr_prune_partition\":true,\"enable_topn_runtime_filter\":true,\"disable_colocate_join\":false,\"max_pushdown_conditions_per_column\":-1,\"default_table_compression\":\"lz4_frame\",\"runtime_adaptive_dop_max_output_amplification_factor\":0,\"choose_execute_instances_mode\":\"LOCALITY\",\"innodb_read_only\":true,\"spill_mem_limit_threshold\":0.8,\"cbo_reorder_threshold_use_exhaustive\":6,\"enable_predicate_reorder\":false,\"enable_query_cache\":false,\"transaction_read_only\":\"OFF\",\"max_allowed_packet\":33554432,\"time_zone\":\"Asia/Shanghai\",\"enable_multicolumn_global_runtime_filter\":false,\"character_set_server\":\"utf8\",\"cbo_use_nth_exec_plan\":0,\"io_tasks_per_scan_operator\":4,\"parallel_exchange_instance_num\":-1,\"enable_shared_scan\":false,\"cbo_derive_range_join_predicate\":false,\"allow_default_partition\":false,\"enable_pipeline_level_shuffle\":true}","be_number":3,"be_core_stat":{"numOfHardwareCoresPerBe":"{\"10004\":16,\"10005\":16,\"10006\":16}","cachedAvgNumOfHardwareCores":16},"exception":[],"version":"branch-3.1-automv","commit_version":"8d92559"}