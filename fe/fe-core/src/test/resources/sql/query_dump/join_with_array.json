{
  "statement": "WITH tbl_mock_082 (mock_058, mock_055, mock_056, mock_044, mock_057, mock_043, mock_041, mock_060, mock_061, mock_052, mock_049, mock_050, mock_053, mock_051, mock_054, mock_048, mock_059, mock_042, mock_040, mock_045, mock_046, mock_047, mock_008, mock_007) AS (SELECT array_agg(tbl_mock_001.mock_020 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_058, array_agg(tbl_mock_001.mock_017 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_055, array_agg(tbl_mock_001.mock_018 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_056, array_agg(tbl_mock_001.mock_006 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_044, array_agg(tbl_mock_001.mock_019 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_057, array_agg(tbl_mock_001.mock_005 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_043, array_agg(tbl_mock_001.mock_003 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_041, array_agg(tbl_mock_001.mock_022 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_060, array_agg(tbl_mock_001.mock_023 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_061, array_agg(tbl_mock_001.mock_014 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_052, array_agg(tbl_mock_001.mock_011 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_049, array_agg(tbl_mock_001.mock_012 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_050, array_agg(tbl_mock_001.mock_015 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_053, array_agg(tbl_mock_001.mock_013 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_051, array_agg(tbl_mock_001.mock_016 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_054, array_agg(tbl_mock_001.mock_010 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_048, array_agg(tbl_mock_001.mock_021 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_059, array_agg(tbl_mock_001.mock_004 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_042, array_agg(tbl_mock_001.mock_002 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_040, array_agg(tbl_mock_001.mock_007 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_045, array_agg(tbl_mock_001.mock_008 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_046, array_agg(tbl_mock_001.mock_009 ORDER BY tbl_mock_001.mock_019 ASC, tbl_mock_001.mock_005 ASC) AS mock_047, any_value(tbl_mock_001.mock_008) AS mock_008, tbl_mock_001.mock_007\nFROM db_mock_000.tbl_mock_001\nGROUP BY tbl_mock_001.mock_008, tbl_mock_001.mock_007) SELECT tbl_mock_024.mock_055, tbl_mock_082.mock_055, tbl_mock_024.mock_057, tbl_mock_082.mock_057, tbl_mock_024.mock_041, tbl_mock_082.mock_041, tbl_mock_024.mock_043, tbl_mock_082.mock_043, tbl_mock_024.mock_058, tbl_mock_082.mock_058, tbl_mock_024.mock_056, tbl_mock_082.mock_056, tbl_mock_024.mock_044, tbl_mock_082.mock_044, tbl_mock_024.mock_060, tbl_mock_082.mock_060, tbl_mock_024.mock_061, tbl_mock_082.mock_061, tbl_mock_024.mock_052, tbl_mock_082.mock_052, tbl_mock_024.mock_049, tbl_mock_082.mock_049, tbl_mock_024.mock_050, tbl_mock_082.mock_050, tbl_mock_024.mock_053, tbl_mock_082.mock_053, tbl_mock_024.mock_051, tbl_mock_082.mock_051, tbl_mock_024.mock_054, tbl_mock_082.mock_054, tbl_mock_024.mock_048, tbl_mock_082.mock_048, tbl_mock_024.mock_059, tbl_mock_082.mock_059, tbl_mock_024.mock_042, tbl_mock_082.mock_042, tbl_mock_024.mock_040, tbl_mock_082.mock_040, tbl_mock_024.mock_045, tbl_mock_082.mock_045, tbl_mock_024.mock_046, tbl_mock_082.mock_046, tbl_mock_024.mock_047, tbl_mock_082.mock_047\nFROM db_mock_000.tbl_mock_024 , tbl_mock_082 \nWHERE (tbl_mock_082.mock_007 = tbl_mock_024.mock_007) AND (tbl_mock_082.mock_008 = tbl_mock_024.mock_008)",
  "table_meta": {
    "db_mock_000.tbl_mock_001": "CREATE TABLE db_mock_000.tbl_mock_001 (\nmock_007 int(11) ,\nmock_008 largeint(40) ,\nmock_019 datetime ,\nmock_005 bigint(20) ,\nmock_006 varchar(65536) ,\nmock_017 varchar(65536) ,\nmock_003 varchar(65536) ,\nmock_020 varchar(65536) ,\nmock_018 varchar(65536) ,\nmock_022 varchar(65536) ,\nmock_023 varchar(65536) ,\nmock_014 varchar(65536) ,\nmock_011 varchar(65536) ,\nmock_012 varchar(65536) ,\nmock_015 varchar(65536) ,\nmock_013 double ,\nmock_016 double ,\nmock_010 varchar(65536) ,\nmock_021 varchar(65536) ,\nmock_004 datetime ,\nmock_002 varchar(65536) ,\nmock_009 largeint(40) \n) ENGINE= OLAP \nUNIQUE KEY(mock_007, mock_008, mock_019, mock_005, mock_006)\nDISTRIBUTED BY HASH(mock_007) BUCKETS 826 \nPROPERTIES (\n\"replication_num\" = \"1\",\n\"colocate_with\" = \"a09434946_d772_444c_818b_a25c0e589bf0_398cd2a4_abad_437a_bf85_1ef4c19b72bf_a0b981ef_2d89_4630_b905_0f697f89218b_cg_group1\"\n);",
    "db_mock_000.tbl_mock_024": "CREATE TABLE db_mock_000.tbl_mock_024 (\nmock_007 int(11) NOT NULL ,\nmock_039 largeint(40) NOT NULL ,\nmock_018 varchar(65536) ,\nmock_020 varchar(65536) ,\nmock_017 varchar(65536) ,\nmock_025 datetime ,\nmock_064 varchar(65536) ,\nmock_063 varchar(65536) ,\nmock_028 varchar(65536) ,\nmock_026 varchar(65536) ,\nmock_076 varchar(65536) ,\nmock_065 varchar(65536) ,\nmock_029 varchar(65536) ,\nmock_066 varchar(65536) ,\nmock_072 double ,\nmock_070 double ,\nmock_069 double ,\nmock_074 double ,\nmock_081 double ,\nmock_067 varchar(65536) ,\nmock_077 varchar(65536) ,\nmock_027 varchar(65536) ,\nmock_062 datetime ,\nmock_075 varchar(65536) ,\nmock_003 varchar(65536) ,\nmock_068 varchar(65536) ,\nmock_030 varchar(65536) ,\nmock_080 varchar(65536) ,\nmock_078 varchar(65536) ,\nmock_073 double ,\nmock_071 double ,\nmock_079 varchar(65536) ,\nmock_031 largeint(40) ,\nmock_032 largeint(40) ,\nmock_033 largeint(40) ,\nmock_034 largeint(40) ,\nmock_035 largeint(40) ,\nmock_036 largeint(40) ,\nmock_037 largeint(40) ,\nmock_038 largeint(40) ,\nmock_008 largeint(40) ,\nmock_055 array<varchar(65536)> ,\nmock_057 array<datetime> ,\nmock_041 array<varchar(65536)> ,\nmock_043 array<bigint(20)> ,\nmock_058 array<varchar(65536)> ,\nmock_056 array<varchar(65536)> ,\nmock_044 array<varchar(65536)> ,\nmock_060 array<varchar(65536)> ,\nmock_061 array<varchar(65536)> ,\nmock_052 array<varchar(65536)> ,\nmock_049 array<varchar(65536)> ,\nmock_050 array<varchar(65536)> ,\nmock_053 array<varchar(65536)> ,\nmock_051 array<double> ,\nmock_054 array<double> ,\nmock_048 array<varchar(65536)> ,\nmock_059 array<varchar(65536)> ,\nmock_042 array<datetime> ,\nmock_040 array<varchar(65536)> ,\nmock_045 array<bigint(20)> ,\nmock_046 array<largeint(40)> ,\nmock_047 array<largeint(40)> \n) ENGINE= OLAP \nPRIMARY KEY(mock_007, mock_039)\nDISTRIBUTED BY HASH(mock_007) BUCKETS 826 \nPROPERTIES (\n\"replication_num\" = \"1\",\n\"colocate_with\" = \"a09434946_d772_444c_818b_a25c0e589bf0_398cd2a4_abad_437a_bf85_1ef4c19b72bf_a0b981ef_2d89_4630_b905_0f697f89218b_cg_group1\"\n);"
  },
  "table_row_count": {
    "db_mock_000.tbl_mock_001": {
      "tbl_mock_001": 4124821639
    },
    "db_mock_000.tbl_mock_024": {
      "tbl_mock_024": 1369457446
    }
  },
  "column_statistics": {
    "db_mock_000.tbl_mock_001": {
      "mock_021": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_017": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_019": "[1.637269633E9, 1.677743999E9, 0.0, 8.0, 6372.0] ESTIMATE",
      "mock_014": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_010": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_012": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_013": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_018": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_004": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_002": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_009": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_005": "[500.0, 2500.0, 0.0, 8.0, 20.0] ESTIMATE",
      "mock_022": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_003": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_011": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_020": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_023": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_007": "[-2.147457524E9, 1.34212282E9, 0.0, 4.0, 2.6893696E7] ESTIMATE",
      "mock_015": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_016": "[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN",
      "mock_008": "[-1.701390865185367E38, 1.7013923040822768E38, 0.0, 16.0, 66530.0] ESTIMATE",
      "mock_006": "[-Infinity, Infinity, 0.0, 0.002375, 21.0] ESTIMATE"
    },
    "db_mock_000.tbl_mock_024": {
      "mock_048": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_051": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_043": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_044": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_041": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_060": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_040": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_047": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_045": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_057": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_058": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_050": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_053": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_046": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_056": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_061": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_049": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_007": "[-2.147457524E9, -1.630230928E9, 0.0, 4.0, 2.9243537E7] ESTIMATE",
      "mock_052": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_054": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_042": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_059": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_008": "[-1.7014089515795118E38, 1.7013947549024062E38, 0.0, 16.0, 1.369457446E9] ESTIMATE",
      "mock_055": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE"
    }
  },
  "explain_info": "PLAN FRAGMENT 0(F02)\n  Output Exprs:87: mock_055 | 132: array_agg | 88: mock_057 | 135: array_agg | 89: mock_041 | 137: array_agg | 90: mock_043 | 136: array_agg | 91: mock_058 | 131: array_agg | 92: mock_056 | 133: array_agg | 93: mock_044 | 134: array_agg | 94: mock_060 | 138: array_agg | 95: mock_061 | 139: array_agg | 96: mock_052 | 140: array_agg | 97: mock_049 | 141: array_agg | 98: mock_050 | 142: array_agg | 99: mock_053 | 143: array_agg | 100: mock_051 | 144: array_agg | 101: mock_054 | 145: array_agg | 102: mock_048 | 146: array_agg | 103: mock_059 | 147: array_agg | 104: mock_042 | 148: array_agg | 105: mock_040 | 149: array_agg | 106: mock_045 | 150: array_agg | 107: mock_046 | 151: array_agg | 108: mock_047 | 152: array_agg\n  Input Partition: UNPARTITIONED\n  RESULT SINK\n\n  6:EXCHANGE\n     cardinality: 3712339475\n\nPLAN FRAGMENT 1(F00)\n\n  Input Partition: RANDOM\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 06\n\n  5:Project\n  |  output columns:\n  |  87 <-> [87: mock_055, ARRAY<VARCHAR(65536)>, true]\n  |  88 <-> [88: mock_057, ARRAY<DATETIME>, true]\n  |  89 <-> [89: mock_041, ARRAY<VARCHAR(65536)>, true]\n  |  90 <-> [90: mock_043, ARRAY<BIGINT>, true]\n  |  91 <-> [91: mock_058, ARRAY<VARCHAR(65536)>, true]\n  |  92 <-> [92: mock_056, ARRAY<VARCHAR(65536)>, true]\n  |  93 <-> [93: mock_044, ARRAY<VARCHAR(65536)>, true]\n  |  94 <-> [94: mock_060, ARRAY<VARCHAR(65536)>, true]\n  |  95 <-> [95: mock_061, ARRAY<VARCHAR(65536)>, true]\n  |  96 <-> [96: mock_052, ARRAY<VARCHAR(65536)>, true]\n  |  97 <-> [97: mock_049, ARRAY<VARCHAR(65536)>, true]\n  |  98 <-> [98: mock_050, ARRAY<VARCHAR(65536)>, true]\n  |  99 <-> [99: mock_053, ARRAY<VARCHAR(65536)>, true]\n  |  100 <-> [100: mock_051, ARRAY<DOUBLE>, true]\n  |  101 <-> [101: mock_054, ARRAY<DOUBLE>, true]\n  |  102 <-> [102: mock_048, ARRAY<VARCHAR(65536)>, true]\n  |  103 <-> [103: mock_059, ARRAY<VARCHAR(65536)>, true]\n  |  104 <-> [104: mock_042, ARRAY<DATETIME>, true]\n  |  105 <-> [105: mock_040, ARRAY<VARCHAR(65536)>, true]\n  |  106 <-> [106: mock_045, ARRAY<BIGINT>, true]\n  |  107 <-> [107: mock_046, ARRAY<LARGEINT>, true]\n  |  108 <-> [108: mock_047, ARRAY<LARGEINT>, true]\n  |  131 <-> [131: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  132 <-> [132: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  133 <-> [133: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  134 <-> [134: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  135 <-> [135: array_agg, ARRAY<DATETIME>, true]\n  |  136 <-> [136: array_agg, ARRAY<BIGINT>, true]\n  |  137 <-> [137: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  138 <-> [138: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  139 <-> [139: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  140 <-> [140: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  141 <-> [141: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  142 <-> [142: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  143 <-> [143: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  144 <-> [144: array_agg, ARRAY<DOUBLE>, true]\n  |  145 <-> [145: array_agg, ARRAY<DOUBLE>, true]\n  |  146 <-> [146: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  147 <-> [147: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  148 <-> [148: array_agg, ARRAY<DATETIME>, true]\n  |  149 <-> [149: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |  150 <-> [150: array_agg, ARRAY<INT>, true]\n  |  151 <-> [151: array_agg, ARRAY<LARGEINT>, true]\n  |  152 <-> [152: array_agg, ARRAY<LARGEINT>, true]\n  |  cardinality: 3712339475\n  |  column statistics: \n  |  * mock_055-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_057-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_041-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_043-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_058-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_056-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_044-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_060-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_061-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_052-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_049-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_050-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_053-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_051-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_054-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_048-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_059-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_042-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_040-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_045-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_046-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_047-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  4:HASH JOIN\n  |  join op: INNER JOIN (COLOCATE)\n  |  colocate: true\n  |  equal join conjunct: [46: mock_007, INT, false] = [109: mock_007, INT, true]\n  |  equal join conjunct: [86: mock_008, LARGEINT, true] = [153: any_value, LARGEINT, true]\n  |  build runtime filters:\n  |  - filter_id = 0, build_expr = (109: mock_007), remote = false\n  |  - filter_id = 1, build_expr = (153: any_value), remote = false\n  |  output columns: 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152\n  |  cardinality: 3712339475\n  |  column statistics: \n  |  * mock_007-->[-2.147457524E9, -1.630230928E9, 0.0, 4.0, 2.9243537E7] ESTIMATE\n  |  * mock_008-->[-1.701390865185367E38, 1.7013923040822768E38, 0.0, 16.0, 66530.0] ESTIMATE\n  |  * mock_055-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_057-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_041-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_043-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_058-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_056-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_044-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_060-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_061-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_052-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_049-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_050-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_053-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_051-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_054-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_048-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_059-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_042-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_040-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_045-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_046-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_047-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_007-->[-2.147457524E9, 1.34212282E9, 0.0, 4.0, 2.6893696E7] ESTIMATE\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * any_value-->[-1.701390865185367E38, 1.7013923040822768E38, 0.0, 16.0, 66530.0] ESTIMATE\n  |  \n  |----3:Project\n  |    |  output columns:\n  |    |  109 <-> [109: mock_007, INT, true]\n  |    |  131 <-> [131: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  132 <-> [132: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  133 <-> [133: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  134 <-> [134: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  135 <-> [135: array_agg, ARRAY<DATETIME>, true]\n  |    |  136 <-> [136: array_agg, ARRAY<BIGINT>, true]\n  |    |  137 <-> [137: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  138 <-> [138: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  139 <-> [139: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  140 <-> [140: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  141 <-> [141: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  142 <-> [142: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  143 <-> [143: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  144 <-> [144: array_agg, ARRAY<DOUBLE>, true]\n  |    |  145 <-> [145: array_agg, ARRAY<DOUBLE>, true]\n  |    |  146 <-> [146: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  147 <-> [147: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  148 <-> [148: array_agg, ARRAY<DATETIME>, true]\n  |    |  149 <-> [149: array_agg, ARRAY<VARCHAR(65536)>, true]\n  |    |  150 <-> [150: array_agg, ARRAY<INT>, true]\n  |    |  151 <-> [151: array_agg, ARRAY<LARGEINT>, true]\n  |    |  152 <-> [152: array_agg, ARRAY<LARGEINT>, true]\n  |    |  153 <-> [153: any_value, LARGEINT, true]\n  |    |  cardinality: 4124821639\n  |    |  column statistics: \n  |    |  * mock_007-->[-2.147457524E9, 1.34212282E9, 0.0, 4.0, 2.6893696E7] ESTIMATE\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * any_value-->[-1.701390865185367E38, 1.7013923040822768E38, 0.0, 16.0, 66530.0] ESTIMATE\n  |    |  \n  |    2:AGGREGATE (update finalize)\n  |    |  aggregate: array_agg[([116: mock_020, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([114: mock_017, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([117: mock_018, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([113: mock_006, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([111: mock_019, DATETIME, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: DATETIME,DATETIME,BIGINT; result: ARRAY<DATETIME>; args nullable: true; result nullable: true], array_agg[([112: mock_005, BIGINT, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: BIGINT,DATETIME,BIGINT; result: ARRAY<BIGINT>; args nullable: true; result nullable: true], array_agg[([115: mock_003, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([118: mock_022, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([119: mock_023, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([120: mock_014, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([121: mock_011, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([122: mock_012, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([123: mock_015, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([124: mock_013, DOUBLE, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: DOUBLE,DATETIME,BIGINT; result: ARRAY<DOUBLE>; args nullable: true; result nullable: true], array_agg[([125: mock_016, DOUBLE, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: DOUBLE,DATETIME,BIGINT; result: ARRAY<DOUBLE>; args nullable: true; result nullable: true], array_agg[([126: mock_010, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([127: mock_021, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([128: mock_004, DATETIME, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: DATETIME,DATETIME,BIGINT; result: ARRAY<DATETIME>; args nullable: true; result nullable: true], array_agg[([129: mock_002, VARCHAR, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: VARCHAR,DATETIME,BIGINT; result: ARRAY<VARCHAR(65536)>; args nullable: true; result nullable: true], array_agg[([109: mock_007, INT, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: INT,DATETIME,BIGINT; result: ARRAY<INT>; args nullable: true; result nullable: true], array_agg[([110: mock_008, LARGEINT, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: LARGEINT,DATETIME,BIGINT; result: ARRAY<LARGEINT>; args nullable: true; result nullable: true], array_agg[([130: mock_009, LARGEINT, true], [111: mock_019, DATETIME, true], [112: mock_005, BIGINT, true]); args: LARGEINT,DATETIME,BIGINT; result: ARRAY<LARGEINT>; args nullable: true; result nullable: true], any_value[([110: mock_008, LARGEINT, true]); args: LARGEINT; result: LARGEINT; args nullable: true; result nullable: true]\n  |    |  group by: [110: mock_008, LARGEINT, true], [109: mock_007, INT, true]\n  |    |  having: 153: any_value IS NOT NULL\n  |    |  cardinality: 4124821639\n  |    |  column statistics: \n  |    |  * mock_007-->[-2.147457524E9, 1.34212282E9, 0.0, 4.0, 2.6893696E7] ESTIMATE\n  |    |  * mock_008-->[-1.701390865185367E38, 1.7013923040822768E38, 0.0, 16.0, 66530.0] ESTIMATE\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  * any_value-->[-1.701390865185367E38, 1.7013923040822768E38, 0.0, 16.0, 66530.0] ESTIMATE\n  |    |  \n  |    1:OlapScanNode\n  |       table: mock_001, rollup: mock_001\n  |       preAggregation: off. Reason: Aggregate function has more than one parameter\n  |       Predicates: 109: mock_007 IS NOT NULL\n  |       partitionsRatio=1/1, tabletsRatio=826/826\n  |       tabletList=110580,110588,110593,110597,110613,110617,110621,110626,110630,110634 ...\n  |       actualRows=4124821639, avgRowSize=53.002377\n  |       cardinality: 4124821639\n  |       column statistics: \n  |       * mock_007-->[-2.147457524E9, 1.34212282E9, 0.0, 4.0, 2.6893696E7] ESTIMATE\n  |       * mock_008-->[-1.701390865185367E38, 1.7013923040822768E38, 0.0, 16.0, 66530.0] ESTIMATE\n  |       * mock_019-->[1.637269633E9, 1.677743999E9, 0.0, 8.0, 6372.0] ESTIMATE\n  |       * mock_005-->[500.0, 2500.0, 0.0, 8.0, 20.0] ESTIMATE\n  |       * mock_006-->[-Infinity, Infinity, 0.0, 0.002375, 21.0] ESTIMATE\n  |       * mock_017-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_003-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_020-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_018-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_022-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_023-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_014-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_011-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_012-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_015-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_013-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_016-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_010-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_021-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_004-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |       * mock_009-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    \n  0:OlapScanNode\n     table: mock_024, rollup: mock_024\n     preAggregation: on\n     Predicates: 86: mock_008 IS NOT NULL\n     partitionsRatio=1/1, tabletsRatio=826/826\n     tabletList=273412,273416,273420,273424,273428,273432,273436,273440,273444,273448 ...\n     actualRows=1369457446, avgRowSize=372.0\n     Pruned type: 97 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 98 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 99 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 100 <-> [ARRAY<DOUBLE>]\n     Pruned type: 101 <-> [ARRAY<DOUBLE>]\n     Pruned type: 102 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 103 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 104 <-> [ARRAY<DATETIME>]\n     Pruned type: 105 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 106 <-> [ARRAY<BIGINT>]\n     Pruned type: 107 <-> [ARRAY<LARGEINT>]\n     Pruned type: 108 <-> [ARRAY<LARGEINT>]\n     Pruned type: 87 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 88 <-> [ARRAY<DATETIME>]\n     Pruned type: 89 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 90 <-> [ARRAY<BIGINT>]\n     Pruned type: 91 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 92 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 93 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 94 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 95 <-> [ARRAY<VARCHAR(65536)>]\n     Pruned type: 96 <-> [ARRAY<VARCHAR(65536)>]\n     cardinality: 1369457446\n     probe runtime filters:\n     - filter_id = 0, probe_expr = (46: mock_007)\n     - filter_id = 1, probe_expr = (86: mock_008)\n     column statistics: \n     * mock_007-->[-2.147457524E9, -1.630230928E9, 0.0, 4.0, 2.9243537E7] ESTIMATE\n     * mock_008-->[-1.7014089515795118E38, 1.7013947549024062E38, 0.0, 16.0, 1.369457446E9] ESTIMATE\n     * mock_055-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_057-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_041-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_043-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_058-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_056-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_044-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_060-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_061-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_052-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_049-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_050-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_053-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_051-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_054-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_048-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_059-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_042-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_040-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_045-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_046-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_047-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n",
  "session_variables": "{\"partial_update_mode\":\"auto\",\"cbo_cte_reuse\":true,\"character_set_connection\":\"utf8\",\"cbo_use_correlated_join_estimate\":true,\"enable_insert_strict\":true,\"enable_connector_adaptive_io_tasks\":true,\"tx_isolation\":\"REPEATABLE-READ\",\"enable_hive_metadata_cache_with_insert\":false,\"cbo_cte_reuse_rate_v2\":1.15,\"character_set_results\":\"utf8\",\"enable_count_star_optimization\":true,\"global_runtime_filter_build_min_size\":131072,\"enable_iceberg_identity_column_optimize\":true,\"query_excluding_mv_names\":\"\",\"enable_rewrite_simple_agg_to_meta_scan\":false,\"enable_adaptive_sink_dop\":true,\"consistent_hash_virtual_number\":32,\"enable_profile\":false,\"load_mem_limit\":0,\"large_decimal_underlying_type\":\"panic\",\"sql_safe_updates\":0,\"runtime_filter_early_return_selectivity\":0.05,\"enable_local_shuffle_agg\":true,\"disable_function_fold_constants\":false,\"select_ratio_threshold\":0.15,\"query_delivery_timeout\":300,\"collation_database\":\"utf8_general_ci\",\"spill_mem_table_size\":104857600,\"cbo_use_lock_db\":false,\"new_planner_agg_stage\":0,\"use_compute_nodes\":-1,\"collation_connection\":\"utf8_general_ci\",\"resource_group\":\"\",\"profile_limit_fold\":true,\"enable_materialized_view_plan_cache\":true,\"spill_operator_max_bytes\":1048576000,\"cbo_max_reorder_node_use_dp\":10,\"enable_hive_column_stats\":true,\"enable_groupby_use_output_alias\":false,\"forward_to_leader\":false,\"count_distinct_column_buckets\":1024,\"query_cache_agg_cardinality_limit\":5000000,\"enable_pipeline_query_statistic\":true,\"cboPushDownAggregateMode_v1\":-1,\"window_partition_mode\":1,\"enable_deliver_batch_fragments\":true,\"enable_tablet_internal_parallel_v2\":true,\"interpolate_passthrough\":true,\"enable_incremental_mv\":false,\"cbo_push_down_topn_limit\":1000,\"SQL_AUTO_IS_NULL\":false,\"event_scheduler\":\"OFF\",\"max_pipeline_dop\":64,\"broadcast_right_table_scale_factor\":10,\"materialized_view_rewrite_mode\":\"DEFAULT\",\"enable_simplify_case_when\":true,\"runtime_join_filter_push_down_limit\":1024000,\"big_query_log_cpu_second_threshold\":480,\"div_precision_increment\":4,\"runtime_adaptive_dop_max_block_rows_per_driver_seq\":16384,\"log_rejected_record_num\":0,\"cbo_push_down_distinct_below_window\":true,\"sql_mode_v2\":32,\"prefer_cte_rewrite\":false,\"hdfs_backend_selector_scan_range_shuffle\":false,\"pipeline_profile_level\":1,\"parallel_fragment_exec_instance_num\":1,\"max_scan_key_num\":-1,\"net_read_timeout\":60,\"streaming_preaggregation_mode\":\"auto\",\"hive_partition_stats_sample_size\":3000,\"enable_mv_planner\":false,\"enable_collect_table_level_scan_stats\":true,\"profile_timeout\":2,\"cbo_push_down_aggregate\":\"global\",\"spill_encode_level\":7,\"enable_query_dump\":false,\"global_runtime_filter_build_max_size\":67108864,\"enable_rewrite_sum_by_associative_rule\":true,\"query_cache_hot_partition_num\":3,\"enable_prune_complex_types\":true,\"query_cache_type\":0,\"max_parallel_scan_instance_num\":-1,\"query_cache_entry_max_rows\":409600,\"enable_mv_optimizer_trace_log\":false,\"connector_io_tasks_per_scan_operator\":16,\"enable_materialized_view_union_rewrite\":true,\"sql_quote_show_create\":true,\"scan_or_to_union_threshold\":50000000,\"enable_exchange_pass_through\":true,\"runtime_profile_report_interval\":60,\"query_cache_entry_max_bytes\":4194304,\"enable_partition_column_value_only_optimization\":true,\"enable_iceberg_ndv\":true,\"enable_exchange_perf\":false,\"workgroup_id\":0,\"enable_rewrite_groupingsets_to_union_all\":false,\"transmission_compression_type\":\"NO_COMPRESSION\",\"interactive_timeout\":3600,\"use_page_cache\":true,\"big_query_log_scan_bytes_threshold\":10737418240,\"collation_server\":\"utf8_general_ci\",\"tablet_internal_parallel_mode\":\"auto\",\"enable_pipeline\":true,\"spill_mode\":\"auto\",\"enable_query_debug_trace\":false,\"enable_show_all_variables\":false,\"full_sort_max_buffered_bytes\":16777216,\"wait_timeout\":28800,\"transmission_encode_level\":7,\"query_including_mv_names\":\"\",\"transaction_isolation\":\"REPEATABLE-READ\",\"enable_global_runtime_filter\":true,\"enable_load_profile\":false,\"enable_plan_validation\":true,\"load_transmission_compression_type\":\"NO_COMPRESSION\",\"cbo_enable_low_cardinality_optimize\":true,\"scan_use_query_mem_ratio\":0.3,\"new_planner_optimize_timeout\":3000,\"enable_outer_join_reorder\":true,\"force_schedule_local\":false,\"hudi_mor_force_jni_reader\":false,\"full_sort_late_materialization\":false,\"cbo_enable_greedy_join_reorder\":true,\"range_pruner_max_predicate\":100,\"enable_rbo_table_prune\":false,\"spillable_operator_mask\":-1,\"rpc_http_min_size\":2147482624,\"cbo_debug_alive_backend_number\":0,\"global_runtime_filter_probe_min_size\":102400,\"scan_or_to_union_limit\":4,\"enable_cbo_table_prune\":false,\"enable_parallel_merge\":true,\"nested_mv_rewrite_max_level\":3,\"net_write_timeout\":60,\"cbo_prune_shuffle_column_rate\":0.1,\"hash_join_push_down_right_table\":true,\"pipeline_sink_dop\":0,\"broadcast_row_limit\":15000000,\"enable_populate_block_cache\":true,\"exec_mem_limit\":2147483648,\"enable_sort_aggregate\":false,\"query_cache_force_populate\":false,\"runtime_filter_on_exchange_node\":false,\"disable_join_reorder\":false,\"enable_rule_based_materialized_view_rewrite\":true,\"connector_scan_use_query_mem_ratio\":0.3,\"net_buffer_length\":16384,\"cbo_prune_subfield\":true,\"full_sort_max_buffered_rows\":1024000,\"query_timeout\":300,\"connector_io_tasks_slow_io_latency_ms\":50,\"cbo_max_reorder_node\":50,\"enable_distinct_column_bucketization\":false,\"enable_big_query_log\":true,\"analyze_mv\":\"sample\",\"runtime_filter_scan_wait_time\":20,\"enable_sync_materialized_view_rewrite\":true,\"prefer_compute_node\":false,\"enable_strict_type\":false,\"enable_table_prune_on_update\":false,\"group_concat_max_len\":1024,\"parse_tokens_limit\":3500000,\"chunk_size\":4096,\"global_runtime_filter_probe_min_selectivity\":0.5,\"query_mem_limit\":0,\"enable_filter_unused_columns_in_scan_stage\":false,\"enable_scan_block_cache\":false,\"enable_materialized_view_single_table_view_delta_rewrite\":false,\"enable_prune_complex_types_in_unnest\":true,\"auto_increment_increment\":1,\"sql_dialect\":\"StarRocks\",\"big_query_log_scan_rows_threshold\":1000000000,\"character_set_client\":\"utf8\",\"autocommit\":true,\"enable_column_expr_predicate\":true,\"enable_runtime_adaptive_dop\":false,\"cbo_cte_max_limit\":10,\"storage_engine\":\"olap\",\"enable_optimizer_trace_log\":false,\"spill_operator_min_bytes\":10485760,\"cbo_enable_dp_join_reorder\":true,\"tx_visible_wait_timeout\":10,\"enable_materialized_view_view_delta_rewrite\":true,\"cbo_max_reorder_node_use_exhaustive\":4,\"enable_sql_digest\":false,\"spill_mem_table_num\":2,\"enable_spill\":false,\"enable_materialized_view_rewrite_greedy_mode\":false,\"pipeline_dop\":0,\"single_node_exec_plan\":false,\"join_implementation_mode_v2\":\"auto\",\"sql_select_limit\":9223372036854775807,\"enable_materialized_view_rewrite\":true,\"statistic_collect_parallel\":1,\"hdfs_backend_selector_hash_algorithm\":\"consistent\",\"enable_expr_prune_partition\":true,\"disable_colocate_join\":false,\"max_pushdown_conditions_per_column\":-1,\"default_table_compression\":\"lz4_frame\",\"runtime_adaptive_dop_max_output_amplification_factor\":0,\"choose_execute_instances_mode\":\"ADAPTIVE_DECREASE\",\"innodb_read_only\":true,\"spill_mem_limit_threshold\":0.8,\"cbo_reorder_threshold_use_exhaustive\":6,\"enable_predicate_reorder\":false,\"enable_query_cache\":false,\"max_allowed_packet\":33554432,\"time_zone\":\"America/Los_Angeles\",\"enable_multicolumn_global_runtime_filter\":false,\"character_set_server\":\"utf8\",\"cbo_use_nth_exec_plan\":0,\"io_tasks_per_scan_operator\":4,\"parallel_exchange_instance_num\":-1,\"enable_shared_scan\":false,\"cbo_derive_range_join_predicate\":false,\"allow_default_partition\":false}",
  "be_number": 20,
  "be_core_stat": {
    "numOfHardwareCoresPerBe": "{\"10016\":64,\"10017\":64,\"10018\":64,\"10019\":64,\"10020\":64,\"10025\":64,\"10026\":64,\"10027\":64,\"10028\":64,\"10029\":64,\"10005\":64,\"10006\":64,\"10010\":64,\"10202\":64,\"10011\":64,\"10203\":64,\"10012\":64,\"10204\":64,\"10205\":64,\"10206\":64}",
    "cachedAvgNumOfHardwareCores": 64
  },
  "exception": [],
  "version": "kw_patch_and_trans_4c0a013c",
  "commit_version": "208360d"
}