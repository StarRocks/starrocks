{
  "statement": "SELECT tbl_mock_256.mock_251, CAST((sum(((coalesce(db_mock_000.tbl_mock_253.mock_086, 0)) * 1.00) / db_mock_000.tbl_mock_253.mock_053)) AS DOUBLE) AS mock_252\nFROM db_mock_000.tbl_mock_242 AS tbl_mock_253 LEFT OUTER JOIN (SELECT db_mock_000.tbl_mock_243.mock_039, max(db_mock_000.tbl_mock_243.mock_251) AS mock_251\nFROM db_mock_000.tbl_mock_243\nGROUP BY 1) tbl_mock_256 ON tbl_mock_256.mock_039 = db_mock_000.tbl_mock_253.mock_039\nWHERE ((((date_trunc('day', db_mock_000.tbl_mock_253.mock_050)) >= (str_to_date('2020-07-28 00:00:00', '%Y-%m-%d %H:%i:%S'))) AND ((date_trunc('day', db_mock_000.tbl_mock_253.mock_050)) < (str_to_date('2025-08-02 00:00:00', '%Y-%m-%d %H:%i:%S')))) AND (db_mock_000.tbl_mock_253.mock_052 >= 20200726)) AND (db_mock_000.tbl_mock_253.mock_052 < 20250804)\nGROUP BY 1 LIMIT 10001",
  "table_meta": {
    "db_mock_000.tbl_mock_001": "CREATE TABLE db_mock_000.tbl_mock_001 (\nmock_052 int(11) ,\nmock_027 varchar(255) ,\nmock_045 int(11) ,\nmock_039 int(11) ,\nmock_060 int(11) ,\nmock_059 int(11) ,\nmock_149 int(11) ,\nmock_157 int(11) ,\nmock_179 int(11) ,\nmock_190 int(11) ,\nmock_050 datetime ,\nmock_089 int(11) ,\nmock_167 datetime ,\nmock_030 varchar(50) ,\nmock_036 varchar(50) ,\nmock_095 boolean ,\nmock_096 boolean ,\nmock_099 boolean ,\nmock_128 boolean ,\nmock_098 boolean ,\nmock_111 boolean ,\nmock_119 boolean ,\nmock_116 boolean ,\nmock_108 boolean ,\nmock_117 boolean ,\nmock_115 boolean ,\nmock_123 boolean ,\nmock_130 boolean ,\nmock_112 boolean ,\nmock_127 boolean ,\nmock_082 decimal(18, 4) ,\nmock_053 decimal(18, 4) ,\nmock_152 decimal(18, 4) ,\nmock_186 decimal(18, 4) ,\nmock_041 decimal(18, 4) ,\nmock_040 decimal(18, 4) ,\nmock_028 decimal(18, 4) ,\nmock_199 decimal(18, 4) ,\nmock_035 decimal(18, 4) ,\nmock_173 decimal(18, 4) ,\nmock_086 decimal(18, 4) ,\nmock_155 decimal(18, 4) ,\nmock_091 decimal(18, 4) ,\nmock_184 decimal(18, 4) ,\nmock_197 decimal(18, 4) ,\nmock_092 decimal(18, 4) ,\nmock_137 decimal(18, 4) ,\nmock_141 decimal(18, 4) ,\nmock_189 decimal(18, 4) ,\nmock_188 decimal(18, 4) ,\nmock_160 double ,\nmock_161 double ,\nmock_067 double ,\nmock_068 double ,\nmock_078 decimal(10, 2) ,\nmock_079 decimal(10, 2) ,\nmock_002 decimal(10, 2) ,\nmock_003 decimal(10, 2) ,\nmock_080 int(11) ,\nmock_004 int(11) ,\nmock_081 int(11) ,\nmock_005 int(11) ,\nmock_191 int(11) ,\nmock_192 int(11) ,\nmock_193 int(11) ,\nmock_200 int(11) ,\nmock_025 int(11) ,\nmock_090 int(11) ,\nmock_057 int(11) ,\nmock_205 int(11) ,\nmock_142 int(11) ,\nmock_077 int(11) ,\nmock_075 varchar(100) ,\nmock_076 varchar(100) ,\nmock_032 decimal(18, 4) ,\nmock_169 decimal(18, 4) ,\nmock_093 varchar(100) ,\nmock_172 varchar(50) ,\nmock_168 decimal(18, 4) ,\nmock_138 decimal(18, 4) ,\nmock_033 varchar(255) ,\nmock_038 decimal(18, 4) ,\nmock_185 int(11) ,\nmock_180 varchar(50) ,\nmock_037 decimal(18, 4) ,\nmock_162 varchar(255) ,\nmock_069 varchar(255) ,\nmock_008 varchar(255) ,\nmock_006 double ,\nmock_007 double ,\nmock_029 varchar(50) ,\nmock_126 boolean ,\nmock_129 boolean ,\nmock_183 int(11) ,\nmock_176 varchar(50) ,\nmock_034 boolean ,\nmock_015 int(11) ,\nmock_014 int(11) ,\nmock_049 int(11) ,\nmock_048 int(11) ,\nmock_047 int(11) ,\nmock_046 int(11) ,\nmock_016 int(11) ,\nmock_058 datetime ,\nmock_074 datetime ,\nmock_159 varchar(255) ,\nmock_066 varchar(255) ,\nmock_065 int(11) ,\nmock_064 int(11) ,\nmock_118 boolean ,\nmock_125 boolean ,\nmock_204 varchar(255) ,\nmock_145 varchar(255) ,\nmock_101 boolean ,\nmock_150 varchar(100) ,\nmock_063 varchar(100) ,\nmock_135 varchar(100) ,\nmock_054 decimal(18, 4) ,\nmock_055 decimal(18, 4) ,\nmock_203 decimal(18, 4) ,\nmock_158 int(11) ,\nmock_122 boolean ,\nmock_170 decimal(18, 4) ,\nmock_174 decimal(18, 4) ,\nmock_104 boolean ,\nmock_105 boolean ,\nmock_196 int(11) ,\nmock_010 decimal(10, 2) ,\nmock_102 boolean ,\nmock_154 decimal(18, 4) ,\nmock_087 boolean ,\nmock_194 int(11) ,\nmock_051 datetime ,\nmock_187 decimal(18, 4) ,\nmock_140 decimal(18, 4) ,\nmock_139 decimal(18, 4) ,\nmock_021 varchar(1000) ,\nmock_103 boolean ,\nmock_019 varchar(1000) ,\nmock_020 varchar(1000) ,\nmock_022 varchar(1000) ,\nmock_201 int(11) ,\nmock_177 decimal(18, 4) ,\nmock_178 varchar(50) ,\nmock_084 decimal(18, 4) ,\nmock_083 decimal(18, 4) ,\nmock_206 int(11) ,\nmock_136 datetime ,\nmock_070 varchar(100) ,\nmock_071 double ,\nmock_072 double ,\nmock_073 varchar(50) ,\nmock_163 varchar(100) ,\nmock_164 double ,\nmock_165 double ,\nmock_166 varchar(50) ,\nmock_061 double ,\nmock_062 double ,\nmock_109 boolean ,\nmock_106 boolean ,\nmock_121 boolean ,\nmock_024 datetime ,\nmock_043 datetime ,\nmock_011 datetime ,\nmock_042 datetime ,\nmock_026 datetime ,\nmock_110 boolean ,\nmock_171 decimal(18, 4) ,\nmock_202 varchar(255) ,\nmock_120 boolean ,\nmock_017 varchar(1000) ,\nmock_018 varchar(1000) ,\nmock_208 varchar(100) ,\nmock_209 varchar(100) ,\nmock_198 decimal(18, 4) ,\nmock_009 varchar(50) ,\nmock_131 boolean ,\nmock_100 boolean ,\nmock_151 decimal(18, 4) ,\nmock_013 varchar(255) ,\nmock_210 int(11) ,\nmock_023 varchar(1000) ,\nmock_134 varchar(50) ,\nmock_012 boolean ,\nmock_031 boolean ,\nmock_088 boolean ,\nmock_132 varchar(50) ,\nmock_133 boolean ,\nmock_097 boolean ,\nmock_056 int(11) ,\nmock_182 decimal(18, 4) ,\nmock_181 decimal(18, 4) ,\nmock_147 int(11) ,\nmock_148 int(11) ,\nmock_207 int(11) ,\nmock_044 varchar(1000) ,\nmock_175 decimal(18, 4) ,\nmock_146 varchar(255) ,\nmock_143 datetime ,\nmock_085 datetime ,\nmock_114 boolean ,\nmock_144 datetime ,\nmock_156 datetime ,\nmock_153 decimal(18, 4) ,\nmock_094 boolean ,\nmock_195 int(11) ,\nmock_113 boolean ,\nmock_107 boolean ,\nmock_124 boolean \n) ENGINE= OLAP \nDUPLICATE KEY(mock_052, mock_027)\nPARTITION BY RANGE(mock_052)\n(PARTITION p202301 VALUES [(\"-2147483648\"), (\"20230201\")),\nPARTITION p202302 VALUES [(\"20230201\"), (\"20230301\")),\nPARTITION p202303 VALUES [(\"20230301\"), (\"20230401\")),\nPARTITION p202304 VALUES [(\"20230401\"), (\"20230501\")),\nPARTITION p202305 VALUES [(\"20230501\"), (\"20230601\")),\nPARTITION p202306 VALUES [(\"20230601\"), (\"20230701\")),\nPARTITION p202307 VALUES [(\"20230701\"), (\"20230801\")),\nPARTITION p202308 VALUES [(\"20230801\"), (\"20230901\")),\nPARTITION p202309 VALUES [(\"20230901\"), (\"20231001\")),\nPARTITION p202310 VALUES [(\"20231001\"), (\"20231101\")),\nPARTITION p202311 VALUES [(\"20231101\"), (\"20231201\")),\nPARTITION p202312 VALUES [(\"20231201\"), (\"20240101\")),\nPARTITION pmax VALUES [(\"20240101\"), (MAXVALUE)))\nDISTRIBUTED BY HASH(mock_027) BUCKETS 32 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);",
    "db_mock_000.tbl_mock_211": "CREATE TABLE db_mock_000.tbl_mock_211 (\nmock_214 varchar(3) ,\nmock_045 int(11) ,\nmock_216 decimal(18, 6) ,\nmock_223 int(11) ,\nmock_215 int(11) ,\nmock_217 boolean ,\nmock_213 datetime ,\nmock_224 datetime ,\nmock_222 varchar(50) ,\nmock_219 boolean ,\nmock_218 boolean ,\nmock_220 boolean ,\nmock_221 varchar(20) ,\nmock_225 datetime ,\nmock_226 datetime ,\nmock_212 varchar(3) \n) ENGINE= OLAP \nDUPLICATE KEY(mock_214)\nPARTITION BY RANGE(mock_223)\n(PARTITION p202201 VALUES [(\"-2147483648\"), (\"20220201\")),\nPARTITION p202202 VALUES [(\"20220201\"), (\"20220301\")),\nPARTITION p202203 VALUES [(\"20220301\"), (\"20220401\")),\nPARTITION p202204 VALUES [(\"20220401\"), (\"20220501\")),\nPARTITION p202205 VALUES [(\"20220501\"), (\"20220601\")),\nPARTITION p202206 VALUES [(\"20220601\"), (\"20220701\")),\nPARTITION p202207 VALUES [(\"20220701\"), (\"20220801\")),\nPARTITION p202208 VALUES [(\"20220801\"), (\"20220901\")),\nPARTITION p202209 VALUES [(\"20220901\"), (\"20221001\")),\nPARTITION p202210 VALUES [(\"20221001\"), (\"20221101\")),\nPARTITION p202211 VALUES [(\"20221101\"), (\"20221201\")),\nPARTITION p202212 VALUES [(\"20221201\"), (\"20230101\")),\nPARTITION p202301 VALUES [(\"20230101\"), (\"20230201\")),\nPARTITION p202302 VALUES [(\"20230201\"), (\"20230301\")),\nPARTITION p202303 VALUES [(\"20230301\"), (\"20230401\")),\nPARTITION p202304 VALUES [(\"20230401\"), (\"20230501\")),\nPARTITION p202305 VALUES [(\"20230501\"), (\"20230601\")),\nPARTITION p202306 VALUES [(\"20230601\"), (\"20230701\")),\nPARTITION p202307 VALUES [(\"20230701\"), (\"20230801\")),\nPARTITION p202308 VALUES [(\"20230801\"), (\"20230901\")),\nPARTITION p202309 VALUES [(\"20230901\"), (\"20231001\")),\nPARTITION p202310 VALUES [(\"20231001\"), (\"20231101\")),\nPARTITION p202311 VALUES [(\"20231101\"), (\"20231201\")),\nPARTITION p202312 VALUES [(\"20231201\"), (\"20240101\")),\nPARTITION pmax VALUES [(\"20240101\"), (MAXVALUE)))\nDISTRIBUTED BY HASH(mock_214) BUCKETS 10 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);",
    "db_mock_000.tbl_mock_227": "CREATE TABLE db_mock_000.tbl_mock_227 (\nmock_039 int(11) ,\nmock_228 varchar(100) ,\nmock_045 int(11) ,\nmock_231 varchar(50) ,\nmock_229 double ,\nmock_230 double ,\nmock_217 boolean \n) ENGINE= OLAP \nDUPLICATE KEY(mock_039, mock_228)\nDISTRIBUTED BY HASH(mock_039) BUCKETS 10 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);",
    "db_mock_000.tbl_mock_232": "CREATE TABLE db_mock_000.tbl_mock_232 (\nmock_016 varchar(255) ,\nmock_233 varchar(255) ,\nmock_235 varchar(50) ,\nmock_238 varchar(50) ,\nmock_039 int(11) ,\nmock_237 varchar(255) ,\nmock_236 varchar(255) ,\nmock_234 varchar(12) ,\nmock_217 boolean ,\nmock_213 datetime ,\nmock_224 datetime \n) ENGINE= OLAP \nDUPLICATE KEY(mock_016)\nPARTITION BY RANGE(mock_039)\n(PARTITION p0 VALUES [(\"-2147483648\"), (\"100\")),\nPARTITION p1 VALUES [(\"100\"), (\"200\")),\nPARTITION p2 VALUES [(\"200\"), (\"300\")),\nPARTITION p3 VALUES [(\"300\"), (MAXVALUE)))\nDISTRIBUTED BY HASH(mock_016) BUCKETS 10 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);",
    "db_mock_000.tbl_mock_239": "CREATE MATERIALIZED VIEW `tbl_mock_239` (`mock_241`, `mock_240`)\n\nDISTRIBUTED BY RANDOM BUCKETS 1\nREFRESH MANUAL\nPROPERTIES (\n\"replication_num\" = \"1\"\n)\nAS SELECT tbl_mock_243.mock_039 AS mock_241, max(tbl_mock_243.mock_251) AS mock_240\nFROM db_mock_000.tbl_mock_243\nGROUP BY 1;"
  },
  "table_row_count": {
    "db_mock_000.tbl_mock_239": {
      "tbl_mock_239": 1
    },
    "db_mock_000.tbl_mock_232": {
      "p0": 3,
      "p1": 0,
      "p2": 0,
      "p3": 0
    },
    "db_mock_000.tbl_mock_227": {
      "tbl_mock_227": 2
    },
    "db_mock_000.tbl_mock_001": {
      "tbl_mock_248": 1
    },
    "db_mock_000.tbl_mock_211": {
      "p202301": 19,
      "p202302": 1
    }
  },
  "view_meta": {
    "db_mock_000.tbl_mock_242": "SELECT tbl_mock_255.mock_052, tbl_mock_255.mock_027, tbl_mock_255.mock_045, tbl_mock_255.mock_039, tbl_mock_255.mock_060, tbl_mock_255.mock_059, tbl_mock_255.mock_149, tbl_mock_255.mock_157, tbl_mock_255.mock_179, tbl_mock_255.mock_190, tbl_mock_255.mock_050, tbl_mock_255.mock_089, tbl_mock_255.mock_167, tbl_mock_255.mock_030, tbl_mock_255.mock_036, tbl_mock_255.mock_095, tbl_mock_255.mock_096, tbl_mock_255.mock_099, tbl_mock_255.mock_128, tbl_mock_255.mock_098, tbl_mock_255.mock_111, tbl_mock_255.mock_119, tbl_mock_255.mock_116, tbl_mock_255.mock_108, tbl_mock_255.mock_117, tbl_mock_255.mock_115, tbl_mock_255.mock_123, tbl_mock_255.mock_130, tbl_mock_255.mock_112, tbl_mock_255.mock_127, tbl_mock_255.mock_082, tbl_mock_255.mock_053, tbl_mock_255.mock_152, tbl_mock_255.mock_186, tbl_mock_255.mock_041, tbl_mock_255.mock_040, tbl_mock_255.mock_028, tbl_mock_255.mock_199, tbl_mock_255.mock_035, tbl_mock_255.mock_173, tbl_mock_255.mock_086, tbl_mock_255.mock_155, tbl_mock_255.mock_091, tbl_mock_255.mock_184, tbl_mock_255.mock_197, tbl_mock_255.mock_092, tbl_mock_255.mock_137, tbl_mock_255.mock_141, tbl_mock_255.mock_189, tbl_mock_255.mock_188, tbl_mock_255.mock_160, tbl_mock_255.mock_161, tbl_mock_255.mock_067, tbl_mock_255.mock_068, tbl_mock_255.mock_078, tbl_mock_255.mock_079, tbl_mock_255.mock_002, tbl_mock_255.mock_003, tbl_mock_255.mock_080, tbl_mock_255.mock_004, tbl_mock_255.mock_081, tbl_mock_255.mock_005, tbl_mock_255.mock_191, tbl_mock_255.mock_192, tbl_mock_255.mock_193, tbl_mock_255.mock_200, tbl_mock_255.mock_025, tbl_mock_255.mock_090, tbl_mock_255.mock_057, tbl_mock_255.mock_205, tbl_mock_255.mock_142, tbl_mock_255.mock_077, tbl_mock_255.mock_075, tbl_mock_255.mock_076, tbl_mock_255.mock_032, tbl_mock_255.mock_169, tbl_mock_255.mock_093, tbl_mock_255.mock_172, tbl_mock_255.mock_168, tbl_mock_255.mock_138, tbl_mock_255.mock_033, tbl_mock_255.mock_038, tbl_mock_255.mock_185, tbl_mock_255.mock_180, tbl_mock_255.mock_037, tbl_mock_255.mock_162, tbl_mock_255.mock_069, tbl_mock_255.mock_008, tbl_mock_255.mock_006, tbl_mock_255.mock_007, tbl_mock_255.mock_029, tbl_mock_255.mock_126, tbl_mock_255.mock_129, tbl_mock_255.mock_183, tbl_mock_255.mock_176, tbl_mock_255.mock_034, tbl_mock_255.mock_015, tbl_mock_255.mock_014, tbl_mock_255.mock_049, tbl_mock_255.mock_048, tbl_mock_255.mock_047, tbl_mock_255.mock_046, tbl_mock_255.mock_016, tbl_mock_255.mock_058, tbl_mock_255.mock_074, tbl_mock_255.mock_159, tbl_mock_255.mock_066, tbl_mock_255.mock_065, tbl_mock_255.mock_064, tbl_mock_255.mock_118, tbl_mock_255.mock_125, tbl_mock_255.mock_204, tbl_mock_255.mock_145, tbl_mock_255.mock_101, tbl_mock_255.mock_150, tbl_mock_255.mock_063, tbl_mock_255.mock_135, tbl_mock_255.mock_054, tbl_mock_255.mock_055, tbl_mock_255.mock_203, tbl_mock_255.mock_158, tbl_mock_255.mock_122, tbl_mock_255.mock_170, tbl_mock_255.mock_174, tbl_mock_255.mock_104, tbl_mock_255.mock_105, tbl_mock_255.mock_196, tbl_mock_255.mock_010, tbl_mock_255.mock_102, tbl_mock_255.mock_154, tbl_mock_255.mock_087, tbl_mock_255.mock_194, tbl_mock_255.mock_051, tbl_mock_255.mock_187, tbl_mock_255.mock_140, tbl_mock_255.mock_139, tbl_mock_255.mock_021, tbl_mock_255.mock_103, tbl_mock_255.mock_019, tbl_mock_255.mock_020, tbl_mock_255.mock_022, tbl_mock_255.mock_201, tbl_mock_255.mock_177, tbl_mock_255.mock_178, tbl_mock_255.mock_084, tbl_mock_255.mock_083, tbl_mock_255.mock_206, tbl_mock_255.mock_136, tbl_mock_255.mock_070, tbl_mock_255.mock_071, tbl_mock_255.mock_072, tbl_mock_255.mock_073, tbl_mock_255.mock_163, tbl_mock_255.mock_164, tbl_mock_255.mock_165, tbl_mock_255.mock_166, tbl_mock_255.mock_061, tbl_mock_255.mock_062, tbl_mock_255.mock_109, tbl_mock_255.mock_106, tbl_mock_255.mock_121, tbl_mock_255.mock_024, tbl_mock_255.mock_043, tbl_mock_255.mock_011, tbl_mock_255.mock_042, tbl_mock_255.mock_026, tbl_mock_255.mock_110, tbl_mock_255.mock_171, tbl_mock_255.mock_202, tbl_mock_255.mock_120, tbl_mock_255.mock_017, tbl_mock_255.mock_018, tbl_mock_255.mock_208, tbl_mock_255.mock_209, tbl_mock_255.mock_198, tbl_mock_255.mock_009, tbl_mock_255.mock_131, tbl_mock_255.mock_100, tbl_mock_255.mock_151, tbl_mock_255.mock_013, tbl_mock_255.mock_210, tbl_mock_255.mock_023, tbl_mock_255.mock_134, tbl_mock_255.mock_012, tbl_mock_255.mock_031, tbl_mock_255.mock_088, tbl_mock_255.mock_132, tbl_mock_255.mock_133, tbl_mock_255.mock_097, tbl_mock_255.mock_056, tbl_mock_255.mock_182, tbl_mock_255.mock_181, tbl_mock_255.mock_147, tbl_mock_255.mock_148, tbl_mock_255.mock_207, tbl_mock_255.mock_044, tbl_mock_255.mock_175, tbl_mock_255.mock_146, tbl_mock_255.mock_143, tbl_mock_255.mock_085, tbl_mock_255.mock_114, tbl_mock_255.mock_144, tbl_mock_255.mock_156, tbl_mock_255.mock_153, tbl_mock_255.mock_094, tbl_mock_255.mock_195, tbl_mock_255.mock_113, tbl_mock_255.mock_107, tbl_mock_255.mock_124, tbl_mock_211.mock_214, tbl_mock_227.mock_231\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_255 LEFT OUTER JOIN db_mock_000.tbl_mock_211 AS tbl_mock_211 ON (tbl_mock_255.mock_045 = tbl_mock_211.mock_045) AND (tbl_mock_255.mock_052 BETWEEN tbl_mock_211.mock_223 AND tbl_mock_211.mock_215) LEFT OUTER JOIN db_mock_000.tbl_mock_227 AS tbl_mock_227 ON tbl_mock_255.mock_039 = tbl_mock_227.mock_039;",
    "db_mock_000.tbl_mock_243": "WITH tbl_mock_260 (mock_039, mock_238, mock_237, mock_236) AS (SELECT tbl_mock_232.mock_039, tbl_mock_232.mock_238, tbl_mock_232.mock_237, tbl_mock_232.mock_236\nFROM db_mock_000.tbl_mock_232\nWHERE (tbl_mock_232.mock_235 = 'City') AND (tbl_mock_232.mock_238 = 'Generic')) , tbl_mock_261 (mock_016, mock_233, mock_238, mock_235) AS (SELECT tbl_mock_232.mock_016, tbl_mock_232.mock_233, tbl_mock_232.mock_238, tbl_mock_232.mock_235\nFROM db_mock_000.tbl_mock_232\nWHERE (tbl_mock_232.mock_235 = 'Territory') AND (tbl_mock_232.mock_238 = 'Generic')) , tbl_mock_262 (mock_016, mock_233, mock_238, mock_235) AS (SELECT tbl_mock_232.mock_016, tbl_mock_232.mock_233, tbl_mock_232.mock_238, tbl_mock_232.mock_235\nFROM db_mock_000.tbl_mock_232\nWHERE (tbl_mock_232.mock_235 = 'Region') AND (tbl_mock_232.mock_238 = 'Generic')) SELECT tbl_mock_260.mock_039, max(CASE WHEN (tbl_mock_261.mock_235 = 'Territory') THEN tbl_mock_261.mock_016 ELSE NULL END) AS mock_257, max(CASE WHEN (tbl_mock_261.mock_235 = 'Territory') THEN tbl_mock_261.mock_233 ELSE NULL END) AS mock_258, max(CASE WHEN (tbl_mock_262.mock_235 = 'Region') THEN tbl_mock_262.mock_016 ELSE NULL END) AS mock_259, max(CASE WHEN (tbl_mock_262.mock_235 = 'Region') THEN tbl_mock_262.mock_233 ELSE NULL END) AS mock_251\nFROM tbl_mock_260 LEFT OUTER JOIN tbl_mock_261 ON (tbl_mock_260.mock_237 = tbl_mock_261.mock_233) AND (tbl_mock_260.mock_238 = tbl_mock_261.mock_238) LEFT OUTER JOIN tbl_mock_262 ON (tbl_mock_260.mock_236 = tbl_mock_262.mock_233) AND (tbl_mock_260.mock_238 = tbl_mock_262.mock_238)\nGROUP BY 1;"
  },
  "column_statistics": {
    "db_mock_000.tbl_mock_239": {
      "mock_240": "[-Infinity, Infinity, 0.0, 14.0, 1.0] ESTIMATE",
      "mock_241": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE"
    },
    "db_mock_000.tbl_mock_232": {
      "mock_233": "[-Infinity, Infinity, 0.0, 12.333333333333334, 3.0] ESTIMATE",
      "mock_236": "[-Infinity, Infinity, 0.6666666666666666, 4.666666666666667, 1.0] ESTIMATE",
      "mock_237": "[-Infinity, Infinity, 0.3333333333333333, 7.0, 2.0] ESTIMATE",
      "mock_238": "[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE",
      "mock_235": "[-Infinity, Infinity, 0.0, 6.333333333333333, 3.0] ESTIMATE",
      "mock_039": "[1.0, 1.0, 0.6666666666666666, 1.3333333333333333, 1.0] ESTIMATE"
    },
    "db_mock_000.tbl_mock_227": {
      "mock_231": "[-Infinity, Infinity, 0.0, 13.5, 2.0] ESTIMATE",
      "mock_039": "[1.0, 2.0, 0.0, 4.0, 2.0] ESTIMATE"
    },
    "db_mock_000.tbl_mock_001": {
      "mock_082": "[15.5, 15.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_060": "[1001.0, 1001.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_191": "[120.0, 120.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_100": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_198": "[0.5, 0.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_047": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_136": "[1.6855836E9, 1.6855836E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_105": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_173": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_192": "[0.0, 0.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_055": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_064": "[102.0, 102.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_063": "[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE",
      "mock_081": "[1800.0, 1800.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_061": "[10.8231, 10.8231, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_026": "[1.68557988E9, 1.68557988E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_203": "[0.5, 0.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_041": "[2.5, 2.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_190": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_049": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_193": "[1850.0, 1850.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_069": "[-Infinity, Infinity, 0.0, 12.0, 1.0] ESTIMATE",
      "mock_020": "[-Infinity, Infinity, 0.0, 26.0, 1.0] ESTIMATE",
      "mock_095": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_035": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_051": "[1.6855542E9, 1.6855542E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_037": "[0.1, 0.1, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_006": "[-Infinity, Infinity, 1.0, 0.0, 1.0] ESTIMATE",
      "mock_195": "[0.0, 0.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_076": "[-Infinity, Infinity, 1.0, 0.0, 1.0] ESTIMATE",
      "mock_103": "[1.0, 1.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_086": "[16.5, 16.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_092": "[0.2, 0.2, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_008": "[-Infinity, Infinity, 1.0, 0.0, 1.0] ESTIMATE",
      "mock_071": "[10.7736, 10.7736, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_118": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_187": "[15.0, 15.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_125": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_119": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_176": "[-Infinity, Infinity, 0.0, 11.0, 1.0] ESTIMATE",
      "mock_009": "[-Infinity, Infinity, 0.0, 2.0, 1.0] ESTIMATE",
      "mock_022": "[-Infinity, Infinity, 0.0, 14.0, 1.0] ESTIMATE",
      "mock_128": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_126": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_015": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_177": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_120": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_164": "[10.8231, 10.8231, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_059": "[2001.0, 2001.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_149": "[3001.0, 3001.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_162": "[-Infinity, Infinity, 0.0, 11.0, 1.0] ESTIMATE",
      "mock_030": "[-Infinity, Infinity, 0.0, 9.0, 1.0] ESTIMATE",
      "mock_028": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_166": "[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE",
      "mock_165": "[106.6297, 106.6297, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_088": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_067": "[10.7736, 10.7736, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_111": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_010": "[0.75, 0.75, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_144": "[1.6855776E9, 1.6855776E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_023": "[-Infinity, Infinity, 0.0, 5.0, 1.0] ESTIMATE",
      "mock_135": "[-Infinity, Infinity, 0.0, 9.0, 1.0] ESTIMATE",
      "mock_148": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_147": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_004": "[920.0, 920.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_107": "[1.0, 1.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_130": "[1.0, 1.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_029": "[-Infinity, Infinity, 0.0, 10.0, 1.0] ESTIMATE",
      "mock_170": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_024": "[1.6855797E9, 1.6855797E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_209": "[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_039": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_066": "[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_202": "[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_044": "[-Infinity, Infinity, 0.0, 11.0, 1.0] ESTIMATE",
      "mock_003": "[2.8, 2.8, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_110": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_178": "[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_160": "[10.8231, 10.8231, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_194": "[0.0, 0.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_151": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_117": "[1.0, 1.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_141": "[14.0, 14.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_207": "[1001.0, 1001.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_056": "[60.0, 60.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_101": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_168": "[0.5, 0.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_068": "[106.6604, 106.6604, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_033": "[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE",
      "mock_011": "[1.68558E9, 1.68558E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_108": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_174": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_085": "[-Infinity, Infinity, 1.0, 0.0, 1.0] ESTIMATE",
      "mock_134": "[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_019": "[-Infinity, Infinity, 0.0, 23.0, 1.0] ESTIMATE",
      "mock_021": "[-Infinity, Infinity, 0.0, 5.0, 1.0] ESTIMATE",
      "mock_096": "[1.0, 1.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_188": "[0.5, 0.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_027": "[-Infinity, Infinity, 0.0, 10.0, 1.0] ESTIMATE",
      "mock_154": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_186": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_143": "[-Infinity, Infinity, 1.0, 0.0, 1.0] ESTIMATE",
      "mock_102": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_032": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_197": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_131": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_159": "[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE",
      "mock_091": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_058": "[1.6855815E9, 1.6855815E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_002": "[5.5, 5.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_093": "[-Infinity, Infinity, 0.0, 15.0, 1.0] ESTIMATE",
      "mock_157": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_210": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_036": "[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE",
      "mock_054": "[14.0, 14.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_025": "[0.0, 0.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_112": "[1.0, 1.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_113": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_078": "[5.2, 5.2, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_079": "[2.5, 2.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_050": "[1.6855794E9, 1.6855794E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_053": "[14.0, 14.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_062": "[106.6297, 106.6297, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_206": "[3001.0, 3001.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_152": "[15.5, 15.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_184": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_175": "[15.0, 15.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_200": "[5.0, 5.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_163": "[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE",
      "mock_045": "[84.0, 84.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_034": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_014": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_065": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_048": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_138": "[0.1, 0.1, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_090": "[0.0, 0.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_052": "[2.0230601E7, 2.0230601E7, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_172": "[-Infinity, Infinity, 0.0, 9.0, 1.0] ESTIMATE",
      "mock_116": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_077": "[0.0, 0.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_169": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_183": "[0.0, 4.294967296E9, 1.0, 0.0, 1.0] ESTIMATE",
      "mock_073": "[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE",
      "mock_153": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_046": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_133": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_084": "[20.0, 20.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_031": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_142": "[0.0, 0.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_201": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_089": "[8.0, 8.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_139": "[18.0, 18.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_167": "[1.6855812E9, 1.6855812E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_140": "[12.0, 12.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_121": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_017": "[-Infinity, Infinity, 0.0, 3.0, 1.0] ESTIMATE",
      "mock_182": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_042": "[1.6855833E9, 1.6855833E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_007": "[-Infinity, Infinity, 1.0, 0.0, 1.0] ESTIMATE",
      "mock_057": "[0.0, 0.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_179": "[101.0, 101.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_180": "[-Infinity, Infinity, 0.0, 6.0, 1.0] ESTIMATE",
      "mock_040": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_094": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_087": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_137": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_074": "[1.6855833E9, 1.6855833E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_155": "[0.5, 0.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_122": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_132": "[-Infinity, Infinity, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_156": "[1.6855794E9, 1.6855794E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_124": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_072": "[106.6604, 106.6604, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_016": "[101.0, 101.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_199": "[0.5, 0.5, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_080": "[900.0, 900.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_038": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_018": "[-Infinity, Infinity, 0.0, 3.0, 1.0] ESTIMATE",
      "mock_012": "[1.0, 1.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_104": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_208": "[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_161": "[106.6297, 106.6297, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_189": "[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_075": "[-Infinity, Infinity, 1.0, 0.0, 1.0] ESTIMATE",
      "mock_070": "[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE",
      "mock_115": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_205": "[0.0, 0.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_109": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_204": "[-Infinity, Infinity, 0.0, 9.0, 1.0] ESTIMATE",
      "mock_114": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_127": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_158": "[300.0, 300.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_185": "[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_106": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_013": "[-Infinity, Infinity, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_005": "[1850.0, 1850.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_098": "[1.0, 1.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_171": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_150": "[-Infinity, Infinity, 0.0, 7.0, 1.0] ESTIMATE",
      "mock_146": "[-Infinity, Infinity, 0.0, 11.0, 1.0] ESTIMATE",
      "mock_043": "[1.68557976E9, 1.68557976E9, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_181": "[0.0, 0.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_129": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_145": "[-Infinity, Infinity, 1.0, 0.0, 1.0] ESTIMATE",
      "mock_097": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_083": "[12.0, 12.0, 0.0, 8.0, 1.0] ESTIMATE",
      "mock_099": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "mock_196": "[60.0, 60.0, 0.0, 4.0, 1.0] ESTIMATE",
      "mock_123": "[1.0, 1.0, 0.0, 1.0, 1.0] ESTIMATE"
    },
    "db_mock_000.tbl_mock_211": {
      "mock_215": "[2.0230131E7, 2.0231231E7, 0.0, 4.0, 3.0] ESTIMATE",
      "mock_214": "[-Infinity, Infinity, 0.0, 3.0, 19.0] ESTIMATE",
      "mock_045": "[36.0, 978.0, 0.0, 4.0, 19.0] ESTIMATE",
      "mock_223": "[2.0230101E7, 2.0230201E7, 0.0, 4.0, 2.0] ESTIMATE"
    }
  },
  "explain_info": "PLAN COST\n  CPU: 1210.4\n  Memory: 95.0\n\nPLAN FRAGMENT 0(F14)\n  Output Exprs:490: max | 493: cast\n  Input Partition: UNPARTITIONED\n  RESULT SINK\n\n  21:EXCHANGE\n     distribution type: GATHER\n     limit: 10001\n     cardinality: 1\n\nPLAN FRAGMENT 1(F13)\n\n  Input Partition: HASH_PARTITIONED: 490: max\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 21\n\n  20:Project\n  |  output columns:\n  |  490 <-> [490: max, VARCHAR(1048576), true]\n  |  493 <-> cast([492: sum, DECIMAL128(38,12), true] as DOUBLE)\n  |  hasNullableGenerateChild: true\n  |  limit: 10001\n  |  cardinality: 1\n  |  column statistics: \n  |  * max-->[-Infinity, Infinity, 0.0, 14.0, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE\n  |  \n  19:AGGREGATE (merge finalize)\n  |  aggregate: sum[([492: sum, DECIMAL128(38,12), true]); args: DECIMAL128; result: DECIMAL128(38,12); args nullable: true; result nullable: true]\n  |  group by: [490: max, VARCHAR(1048576), true]\n  |  hasNullableGenerateChild: true\n  |  limit: 10001\n  |  cardinality: 1\n  |  column statistics: \n  |  * max-->[-Infinity, Infinity, 0.0, 14.0, 1.0] ESTIMATE\n  |  * sum-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE\n  |  \n  18:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [490: max, VARCHAR(1048576), true]\n     cardinality: 1\n\nPLAN FRAGMENT 2(F12)\n\n  Input Partition: HASH_PARTITIONED: 4: mock_039\n  OutPut Partition: HASH_PARTITIONED: 490: max\n  OutPut Exchange id: 18\n\n  17:AGGREGATE (update serialize)\n  |  STREAMING\n  |  aggregate: sum[([491: expr, DECIMAL128(38,12), true]); args: DECIMAL128; result: DECIMAL128(38,12); args nullable: true; result nullable: true]\n  |  group by: [490: max, VARCHAR(1048576), true]\n  |  hasNullableGenerateChild: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * max-->[-Infinity, Infinity, 0.0, 14.0, 1.0] ESTIMATE\n  |  * sum-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  \n  16:Project\n  |  output columns:\n  |  490 <-> [490: max, VARCHAR(1048576), true]\n  |  491 <-> cast(coalesce[([41: mock_086, DECIMAL64(18,4), true], 0); args: DECIMAL64; result: DECIMAL64(18,4); args nullable: true; result nullable: true] as DECIMAL128(18,4)) * 1.00 / cast([32: mock_053, DECIMAL64(18,4), true] as DECIMAL128(38,4))\n  |  hasNullableGenerateChild: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * max-->[-Infinity, Infinity, 0.0, 14.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  \n  15:HASH JOIN\n  |  join op: LEFT OUTER JOIN (PARTITIONED)\n  |  equal join conjunct: [4: mock_039, INT, true] = [448: mock_039, INT, true]\n  |  output columns: 32, 41, 490\n  |  can local shuffle: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_039-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * mock_053-->[14.0, 14.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_086-->[16.5, 16.5, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_039-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * max-->[-Infinity, Infinity, 0.0, 14.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 16.0, 1.0] ESTIMATE\n  |  \n  |----14:EXCHANGE\n  |       distribution type: SHUFFLE\n  |       partition exprs: [448: mock_039, INT, true]\n  |       cardinality: 1\n  |    \n  11:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [4: mock_039, INT, true]\n     cardinality: 1\n\nPLAN FRAGMENT 3(F10)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 448: mock_039\n  OutPut Exchange id: 14\n\n  13:Project\n  |  output columns:\n  |  448 <-> [496: mock_241, INT, true]\n  |  490 <-> [497: mock_240, VARCHAR(1048576), true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_039-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * max-->[-Infinity, Infinity, 0.0, 14.0, 1.0] ESTIMATE\n  |  \n  12:OlapScanNode\n     table: mock_239, rollup: mock_239\n     preAggregation: on\n     partitionsRatio=1/1, tabletsRatio=1/1\n     tabletList=38856\n     actualRows=1, avgRowSize=36.0\n     MaterializedView: true\n     cardinality: 1\n     column statistics: \n     * mock_039-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n     * max-->[-Infinity, Infinity, 0.0, 14.0, 1.0] ESTIMATE\n     * mock_241-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n     * mock_240-->[-Infinity, Infinity, 0.0, 14.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 4(F08)\n\n  Input Partition: HASH_PARTITIONED: 211: mock_045\n  OutPut Partition: HASH_PARTITIONED: 4: mock_039\n  OutPut Exchange id: 11\n\n  10:Project\n  |  output columns:\n  |  4 <-> [4: mock_039, INT, true]\n  |  32 <-> [32: mock_053, DECIMAL64(18,4), true]\n  |  41 <-> [41: mock_086, DECIMAL64(18,4), true]\n  |  hasNullableGenerateChild: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_039-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * mock_053-->[14.0, 14.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_086-->[16.5, 16.5, 0.0, 8.0, 1.0] ESTIMATE\n  |  \n  9:HASH JOIN\n  |  join op: RIGHT OUTER JOIN (PARTITIONED)\n  |  equal join conjunct: [211: mock_045, INT, true] = [3: mock_045, INT, true]\n  |  other join predicates: [1: mock_052, INT, true] >= [213: mock_223, INT, true], [1: mock_052, INT, true] <= [214: mock_215, INT, true]\n  |  build runtime filters:\n  |  - filter_id = 0, build_expr = (3: mock_045), remote = true\n  |  output columns: 4, 32, 41\n  |  can local shuffle: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_052-->[2.0230601E7, 2.0230701E7, 0.0, 4.0, 1.0] ESTIMATE\n  |  * mock_039-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * mock_050-->[1.6855794E9, 1.6855794E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_053-->[14.0, 14.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_086-->[16.5, 16.5, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_039-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  \n  |----8:EXCHANGE\n  |       distribution type: SHUFFLE\n  |       partition exprs: [3: mock_045, INT, true]\n  |       cardinality: 1\n  |    \n  1:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [211: mock_045, INT, true]\n     cardinality: 20\n\nPLAN FRAGMENT 5(F06)\n\n  Input Partition: HASH_PARTITIONED: 4: mock_039\n  OutPut Partition: HASH_PARTITIONED: 3: mock_045\n  OutPut Exchange id: 08\n\n  7:Project\n  |  output columns:\n  |  1 <-> [1: mock_052, INT, true]\n  |  3 <-> [3: mock_045, INT, true]\n  |  4 <-> [4: mock_039, INT, true]\n  |  32 <-> [32: mock_053, DECIMAL64(18,4), true]\n  |  41 <-> [41: mock_086, DECIMAL64(18,4), true]\n  |  hasNullableGenerateChild: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_052-->[2.0230601E7, 2.0230701E7, 0.0, 4.0, 1.0] ESTIMATE\n  |  * mock_045-->[84.0, 84.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * mock_039-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * mock_053-->[14.0, 14.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_086-->[16.5, 16.5, 0.0, 8.0, 1.0] ESTIMATE\n  |  \n  6:HASH JOIN\n  |  join op: LEFT OUTER JOIN (PARTITIONED)\n  |  equal join conjunct: [4: mock_039, INT, true] = [226: mock_039, INT, true]\n  |  other predicates: date_trunc[('day', [11: mock_050, DATETIME, true]); args: VARCHAR,DATETIME; result: DATETIME; args nullable: true; result nullable: true] >= '2020-07-28 00:00:00', date_trunc[('day', [11: mock_050, DATETIME, true]); args: VARCHAR,DATETIME; result: DATETIME; args nullable: true; result nullable: true] < '2025-08-02 00:00:00', [1: mock_052, INT, true] >= 20200726, [1: mock_052, INT, true] < 20250804\n  |  output columns: 1, 3, 4, 32, 41\n  |  can local shuffle: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_052-->[2.0230601E7, 2.0230701E7, 0.0, 4.0, 1.0] ESTIMATE\n  |  * mock_045-->[84.0, 84.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * mock_039-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * mock_050-->[1.6855794E9, 1.6855794E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_053-->[14.0, 14.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_086-->[16.5, 16.5, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_039-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  \n  |----5:EXCHANGE\n  |       distribution type: SHUFFLE\n  |       partition exprs: [226: mock_039, INT, true]\n  |       cardinality: 2\n  |    \n  3:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [4: mock_039, INT, true]\n     cardinality: 1\n\nPLAN FRAGMENT 6(F04)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 226: mock_039\n  OutPut Exchange id: 05\n\n  4:OlapScanNode\n     table: mock_227, rollup: mock_227\n     preAggregation: on\n     partitionsRatio=1/1, tabletsRatio=10/10\n     tabletList=36129,36131,36133,36135,36137,36139,36141,36143,36145,36147\n     actualRows=2, avgRowSize=4.0\n     cardinality: 2\n     column statistics: \n     * mock_039-->[1.0, 2.0, 0.0, 4.0, 2.0] ESTIMATE\n\nPLAN FRAGMENT 7(F02)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 4: mock_039\n  OutPut Exchange id: 03\n\n  2:OlapScanNode\n     table: mock_001, rollup: mock_001\n     preAggregation: on\n     partitionsRatio=1/13, tabletsRatio=32/32\n     tabletList=36839,36841,36843,36845,36847,36849,36851,36853,36855,36857 ...\n     actualRows=1, avgRowSize=36.0\n     cardinality: 1\n     column statistics: \n     * mock_052-->[2.0230601E7, 2.0230701E7, 0.0, 4.0, 1.0] ESTIMATE\n     * mock_045-->[84.0, 84.0, 0.0, 4.0, 1.0] ESTIMATE\n     * mock_039-->[1.0, 1.0, 0.0, 4.0, 1.0] ESTIMATE\n     * mock_050-->[1.6855794E9, 1.6855794E9, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_053-->[14.0, 14.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_086-->[16.5, 16.5, 0.0, 8.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 8(F00)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 211: mock_045\n  OutPut Exchange id: 01\n\n  0:OlapScanNode\n     table: mock_211, rollup: mock_211\n     preAggregation: on\n     partitionsRatio=2/25, tabletsRatio=20/20\n     tabletList=37283,37285,37287,37289,37291,37293,37295,37297,37299,37301 ...\n     actualRows=20, avgRowSize=12.0\n     cardinality: 20\n     probe runtime filters:\n     - filter_id = 0, probe_expr = (211: mock_045)\n     column statistics: \n     * mock_045-->[36.0, 978.0, 0.0, 4.0, 19.0] ESTIMATE\n     * mock_223-->[2.0230101E7, 2.0230301E7, 0.0, 4.0, 2.0] ESTIMATE\n     * mock_215-->[2.0230131E7, 2.0231231E7, 0.0, 4.0, 3.0] ESTIMATE\n",
  "session_variables": "{\"character_set_connection\":\"utf8\",\"tx_isolation\":\"REPEATABLE-READ\",\"hive_temp_staging_dir\":\"/tmp/starrocks\",\"cbo_cte_reuse_rate_v2\":1.15,\"character_set_results\":\"utf8\",\"materialized_view_union_rewrite_mode\":0,\"cbo_enable_histogram_join_estimation\":true,\"thrift_plan_protocol\":\"binary\",\"enable_plan_serialize_concurrently\":true,\"connector_remote_file_async_task_size\":4,\"enable_rewrite_partition_column_minmax\":true,\"enable_iceberg_identity_column_optimize\":true,\"enable_rewrite_simple_agg_to_meta_scan\":false,\"cbo_max_reorder_node_use_greedy\":16,\"statistic_meta_collect_parallel\":10,\"enable_profile\":false,\"cbo_eq_base_type\":\"decimal\",\"enable_materialized_view_for_insert\":false,\"large_decimal_underlying_type\":\"panic\",\"sql_safe_updates\":0,\"enable_predicate_move_around\":true,\"max_or_to_union_all_join_predicates\":3,\"enable_cbo_view_based_mv_rewrite\":false,\"select_ratio_threshold\":0.15,\"query_delivery_timeout\":300,\"enable_partition_hash_join\":true,\"join_reorder_driving_table_max_element\":5,\"spill_enable_compaction\":true,\"new_planner_agg_stage\":0,\"pq_refine_factor\":1,\"lake_bucket_assign_mode\":\"balance\",\"hash_join_interpolate_passthrough\":false,\"connector_remote_file_async_queue_size\":1000,\"use_compute_nodes\":-1,\"collation_connection\":\"utf8_general_ci\",\"enable_force_rule_based_mv_rewrite\":true,\"group_execution_max_groups\":128,\"scan_hive_partition_num_limit\":0,\"always_collect_low_card_dict\":false,\"enable_materialized_view_plan_cache\":true,\"spill_operator_max_bytes\":1048576000,\"cbo_prepare_metadata_thread_pool_size\":16,\"enable_async_profile\":true,\"enable_groupby_use_output_alias\":false,\"global_runtime_filter_wait_timeout\":20,\"forward_to_leader\":false,\"enable_prune_column_after_index_filter\":true,\"query_cache_agg_cardinality_limit\":5000000,\"cboPushDownAggregateMode_v1\":-1,\"enable_query_trigger_analyze\":true,\"enable_spm_rewrite\":false,\"enable_push_down_pre_agg_with_rank\":true,\"interpolate_passthrough\":true,\"analyze_mv_v2\":\"\",\"SQL_AUTO_IS_NULL\":false,\"event_scheduler\":\"OFF\",\"enable_read_iceberg_puffin_ndv\":true,\"enable_aggregation_pipeline_share_limit\":true,\"runtime_join_filter_push_down_limit\":1024000,\"trace_log_mode\":\"command\",\"enable_scan_datacache\":true,\"big_query_log_cpu_second_threshold\":480,\"enable_iceberg_sink_global_shuffle\":false,\"runtime_adaptive_dop_max_block_rows_per_driver_seq\":16384,\"log_rejected_record_num\":0,\"populate_datacache_mode\":\"auto\",\"cbo_push_down_distinct_below_window\":true,\"sql_mode_v2\":32,\"optimizer_materialized_view_timelimit\":1000,\"enable_cross_join\":true,\"pipeline_profile_level\":1,\"parallel_fragment_exec_instance_num\":1,\"max_scan_key_num\":-1,\"insert_timeout\":14400,\"net_read_timeout\":60,\"hive_partition_stats_sample_size\":3000,\"enable_mv_planner\":false,\"enable_materialized_view_timeseries_agg_pushdown_rewrite\":true,\"enable_collect_table_level_scan_stats\":true,\"enable_fine_grained_range_predicate\":false,\"enable_populate_datacache\":true,\"enable_connector_sink_writer_scaling\":true,\"query_debug_options\":\"\",\"low_cardinality_optimize_on_lake\":true,\"spill_encode_level\":7,\"global_runtime_filter_build_max_size\":67108864,\"cbo_push_down_groupingset_reshuffle\":true,\"cbo_push_down_aggregate_with_multi_column_stats\":true,\"enable_pushdown_or_predicate\":true,\"enable_rewrite_sum_by_associative_rule\":true,\"query_cache_hot_partition_num\":3,\"enable_plan_advisor\":true,\"enable_delta_lake_column_statistics\":false,\"metadata_collect_query_timeout\":60,\"enable_dynamic_prune_scan_range\":true,\"connector_io_tasks_per_scan_operator\":16,\"sql_quote_show_create\":true,\"enable_exchange_pass_through\":true,\"enable_cbo_based_mv_rewrite\":true,\"runtime_profile_report_interval\":10,\"query_cache_entry_max_bytes\":4194304,\"default_storage_engine\":\"InnoDB\",\"connector_max_split_size\":67108864,\"interleaving_group_size\":10,\"enable_plan_analyzer\":false,\"cbo_push_down_groupingset\":true,\"custom_query_id\":\"\",\"big_query_log_scan_bytes_threshold\":10737418240,\"enable_hyperscan_vec\":true,\"count_distinct_implementation\":\"default\",\"enable_datacache_async_populate_mode\":true,\"cbo_enable_predicate_subfield_path\":true,\"lower_upper_support_utf8\":false,\"spill_mode\":\"auto\",\"allow_hive_without_partition_filter\":true,\"cbo_prune_json_subfield_depth\":20,\"cbo_materialized_view_rewrite_related_mvs_limit\":16,\"hdfs_backend_selector_force_rebalance\":false,\"full_sort_max_buffered_bytes\":268435456,\"dynamic_overwrite\":false,\"catalog\":\"default_catalog\",\"wait_timeout\":28800,\"enable_dialect_downgrade\":true,\"max_buckets_per_be_to_use_balancer_assignment\":6,\"transaction_isolation\":\"REPEATABLE-READ\",\"enable_global_runtime_filter\":true,\"load_transmission_compression_type\":\"NO_COMPRESSION\",\"cbo_materialized_view_rewrite_rule_output_limit\":3,\"cbo_enable_low_cardinality_optimize\":true,\"enable_defer_project_after_topn\":true,\"scan_use_query_mem_ratio\":0.3,\"datacache_evict_probability\":100,\"enable_analyze_phase_prune_columns\":false,\"new_planner_optimize_timeout\":3000,\"spill_partitionwise_agg_skew_elimination\":true,\"hudi_mor_force_jni_reader\":false,\"cbo_enable_greedy_join_reorder\":true,\"range_pruner_max_predicate\":100,\"low_cardinality_optimize_v2\":true,\"enable_file_metacache\":true,\"cbo_debug_alive_backend_number\":0,\"global_runtime_filter_probe_min_size\":102400,\"enable_cbo_table_prune\":false,\"cbo_materialized_view_rewrite_candidate_limit\":12,\"nested_mv_rewrite_max_level\":3,\"big_query_profile_threshold\":\"30s\",\"net_write_timeout\":60,\"spill_revocable_max_bytes\":0,\"connector_sink_target_max_file_size\":1073741824,\"disable_colocate_set\":false,\"enable_sort_aggregate\":false,\"global_runtime_filter_rpc_timeout\":400,\"connector_scan_use_query_mem_ratio\":0.3,\"full_sort_max_buffered_rows\":1073741824,\"query_timeout\":300,\"connector_io_tasks_slow_io_latency_ms\":50,\"cbo_max_reorder_node\":50,\"enable_materialized_view_agg_pushdown_rewrite_v2\":true,\"enable_distinct_column_bucketization\":false,\"prefer_compute_node\":false,\"group_concat_max_len\":1024,\"enable_stats_to_optimize_skew_join\":false,\"parse_tokens_limit\":3500000,\"spill_partitionwise_agg\":false,\"enable_filter_unused_columns_in_scan_stage\":true,\"cbo_push_down_distinct\":\"global\",\"enable_spill_to_remote_storage\":false,\"enable_materialized_view_transparent_union_rewrite\":true,\"auto_increment_increment\":1,\"spill_partitionwise_agg_partition_num\":32,\"enable_group_execution\":true,\"enable_partition_bucket_optimize\":false,\"enable_subfield_no_copy\":true,\"jit_level\":1,\"enable_runtime_adaptive_dop\":false,\"cbo_cte_max_limit\":10,\"connector_sink_compression_codec\":\"uncompressed\",\"storage_engine\":\"olap\",\"enable_rewrite_unnest_bitmap_to_array\":true,\"spill_operator_min_bytes\":52428800,\"enable_optimize_skew_join_by_query_rewrite\":true,\"tx_visible_wait_timeout\":10,\"enable_materialized_view_view_delta_rewrite\":true,\"cbo_max_reorder_node_use_exhaustive\":4,\"enable_sql_digest\":false,\"enable_spill\":false,\"full_sort_late_materialization_v2\":true,\"join_implementation_mode_v2\":\"auto\",\"enable_connector_split_io_tasks\":true,\"sql_select_limit\":9223372036854775807,\"enable_materialized_view_rewrite\":true,\"materialized_view_subuqery_text_match_max_count\":4,\"hdfs_backend_selector_hash_algorithm\":\"consistent\",\"enable_expr_prune_partition\":true,\"plan_mode\":\"auto\",\"enable_topn_runtime_filter\":true,\"enable_join_reorder_before_deduplicate\":false,\"runtime_adaptive_dop_max_output_amplification_factor\":0,\"skew_join_rand_range\":1000,\"back_pressure_throttle_time_upper_bound\":300,\"skew_join_data_skew_threshold\":0.2,\"innodb_read_only\":true,\"spill_mem_limit_threshold\":0.8,\"disable_generated_column_rewrite\":false,\"enable_phased_scheduler\":false,\"enable_pipeline_event_scheduler\":true,\"cbo_cte_force_reuse_node_count\":2000,\"transaction_read_only\":false,\"enable_partition_level_cardinality_estimation\":true,\"enable_color_explain_output\":true,\"character_set_server\":\"utf8\",\"cbo_use_nth_exec_plan\":0,\"io_tasks_per_scan_operator\":4,\"parallel_exchange_instance_num\":-1,\"enable_pipeline_level_shuffle\":true,\"partial_update_mode\":\"auto\",\"cbo_cte_reuse\":true,\"cbo_use_correlated_join_estimate\":true,\"agg_in_filter_limit\":1024,\"enable_insert_strict\":true,\"enable_connector_adaptive_io_tasks\":true,\"enable_hive_metadata_cache_with_insert\":false,\"spill_rand_ratio\":0.1,\"enable_datacache_io_adaptor\":true,\"enable_count_star_optimization\":true,\"enable_iceberg_column_statistics\":false,\"materialized_view_max_relation_mapping_size\":10,\"global_runtime_filter_build_min_size\":131072,\"enable_view_based_mv_rewrite\":true,\"query_excluding_mv_names\":\"\",\"semi_join_deduplicat_mode\":-1,\"enable_ukfk_opt\":false,\"enable_adaptive_sink_dop\":true,\"enable_ukfk_join_reorder\":false,\"consistent_hash_virtual_number\":256,\"warehouse\":\"default_warehouse\",\"load_mem_limit\":0,\"spill_storage_volume\":\"\",\"column_view_concat_rows_limit\":-1,\"runtime_filter_early_return_selectivity\":0.05,\"enable_local_shuffle_agg\":true,\"disable_function_fold_constants\":false,\"cbo_use_correlated_predicate_estimate\":true,\"enable_query_queue\":true,\"cbo_push_down_distinct_limit\":4096,\"enable_connector_sink_global_shuffle\":true,\"collation_database\":\"utf8_general_ci\",\"spill_mem_table_size\":104857600,\"enable_gin_filter\":true,\"follower_query_forward_mode\":\"\",\"orc_use_column_names\":false,\"cbo_use_lock_db\":false,\"enable_strict_order_by\":true,\"cbo_enable_intersect_add_distinct\":true,\"enable_metadata_profile\":false,\"enable_rewrite_bitmap_union_to_bitamp_agg\":true,\"enable_array_distinct_after_agg_opt\":true,\"resource_group\":\"\",\"cbo_max_reorder_node_use_dp\":10,\"enable_result_sink_accumulate\":true,\"cbo_push_down_aggregate_on_broadcast_join_row_count_limit\":250000,\"cbo_json_v2_rewrite\":true,\"enable_hive_column_stats\":true,\"count_distinct_column_buckets\":1024,\"cross_join_cost_penalty\":1000000,\"connector_sink_spill_mem_limit_threshold\":0.5,\"window_partition_mode\":1,\"enable_tablet_internal_parallel_v2\":true,\"enable_predicate_expr_reuse\":true,\"enable_incremental_mv\":false,\"cbo_push_down_topn_limit\":1000,\"parallel_merge_late_materialization_mode\":\"auto\",\"max_pipeline_dop\":64,\"broadcast_right_table_scale_factor\":10,\"materialized_view_rewrite_mode\":\"DEFAULT\",\"enable_write_hive_external_table\":false,\"enable_simplify_case_when\":true,\"enable_multicolumn_global_runtime_filter_v2\":true,\"enable_connector_incremental_scan_ranges\":true,\"enable_scan_predicate_expr_reuse\":true,\"div_precision_increment\":4,\"phased_scheduler_max_concurrency\":2,\"enable_short_circuit\":false,\"connector_incremental_scan_ranges_size\":500,\"column_view_concat_bytes_limit\":4294967296,\"prefer_cte_rewrite\":false,\"hdfs_backend_selector_scan_range_shuffle\":false,\"streaming_preaggregation_mode\":\"auto\",\"enable_join_runtime_filter_push_down\":true,\"enable_bucket_aware_execution_on_lake\":true,\"profile_timeout\":10,\"cbo_push_down_aggregate\":\"global\",\"enable_query_dump\":false,\"max_spill_read_buffer_bytes_per_driver\":16777216,\"enable_prune_complex_types\":true,\"query_cache_type\":0,\"max_parallel_scan_instance_num\":-1,\"query_cache_entry_max_rows\":409600,\"enable_paimon_column_statistics\":false,\"disable_spill_to_local_disk\":false,\"enable_materialized_view_union_rewrite\":true,\"enable_constant_execute_in_fe\":true,\"scan_or_to_union_threshold\":50000000,\"enable_materialized_view_rewrite_partition_compensate\":true,\"spm_rewrite_timeout_ms\":1000,\"enable_partition_column_value_only_optimization\":true,\"scan_olap_partition_num_limit\":0,\"array_low_cardinality_optimize\":true,\"enable_exchange_perf\":false,\"enable_prepare_stmt\":true,\"workgroup_id\":0,\"enable_pipeline_level_multi_partitioned_rf\":false,\"enable_file_pagecache\":true,\"enable_parquet_reader_bloom_filter\":true,\"enable_rewrite_groupingsets_to_union_all\":false,\"cbo_json_v2_dict_opt\":true,\"spill_enable_direct_io\":false,\"enable_parquet_reader_page_index\":true,\"transmission_compression_type\":\"AUTO\",\"interactive_timeout\":3600,\"use_page_cache\":true,\"enable_execution_only\":false,\"collation_server\":\"utf8_general_ci\",\"cbo_decimal_cast_string_strict\":true,\"enable_nested_loop_join\":true,\"tablet_internal_parallel_mode\":\"auto\",\"enable_pipeline\":true,\"enable_lambda_pushdown\":true,\"enable_query_debug_trace\":false,\"like_predicate_consolidate_min\":2,\"enable_lake_tablet_internal_parallel\":false,\"enable_show_all_variables\":false,\"enable_hash_join_range_direct_mapping_opt\":true,\"enable_query_tablet_affinity\":false,\"transmission_encode_level\":7,\"query_including_mv_names\":\"\",\"enable_load_profile\":false,\"always_collect_low_card_dict_on_lake\":true,\"enable_rewrite_simple_agg_to_hdfs_scan\":true,\"enable_plan_validation\":true,\"global_runtime_filter_rpc_http_min_size\":67108864,\"enable_drop_table_check_mv_dependency\":false,\"connector_huge_file_size\":536870912,\"insert_local_shuffle_for_window_pre_agg\":true,\"enable_outer_join_reorder\":true,\"force_schedule_local\":false,\"enable_agg_spill_preaggregation\":true,\"enable_rbo_table_prune\":false,\"spillable_operator_mask\":-1,\"enable_wait_dependent_event\":false,\"cbo_enable_single_node_prefer_two_stage_aggregate\":true,\"rpc_http_min_size\":2147482624,\"default_tmp_storage_engine\":\"InnoDB\",\"enable_plan_advisor_blacklist\":true,\"topn_filter_back_pressure_mode\":0,\"scan_or_to_union_limit\":4,\"enable_parallel_merge\":true,\"skew_join_use_mcv_count\":5,\"skip_page_cache\":false,\"cbo_derive_join_is_null_predicate\":true,\"enable_materialized_view_text_match_rewrite\":true,\"cbo_prune_shuffle_column_rate\":0.1,\"hash_join_push_down_right_table\":true,\"max_ukfk_join_reorder_scale_ratio\":100,\"pipeline_sink_dop\":0,\"historical_nodes_min_update_interval\":600,\"broadcast_row_limit\":15000000,\"enable_prune_iceberg_manifest\":true,\"exec_mem_limit\":2147483648,\"query_cache_force_populate\":false,\"enable_connector_async_list_partitions\":false,\"enable_rewrite_or_to_union_all_join\":false,\"computation_fragment_scheduling_policy\":\"COMPUTE_NODES_ONLY\",\"runtime_filter_on_exchange_node\":false,\"disable_join_reorder\":false,\"enable_evaluate_schema_scan_rule\":true,\"net_buffer_length\":16384,\"cbo_prune_subfield\":true,\"enable_optimize_skew_join_by_broadcast_skew_values\":false,\"enable_multi_cast_limit_push_down\":true,\"enable_big_query_log\":true,\"cbo_push_down_aggregate_on_broadcast_join\":true,\"enable_spill_buffer_read\":true,\"group_execution_min_scan_rows\":5000000,\"enable_min_max_optimization\":true,\"runtime_filter_scan_wait_time\":20,\"enable_count_distinct_rewrite_by_hll_bitmap\":true,\"enable_sync_materialized_view_rewrite\":true,\"enable_strict_type\":false,\"enable_group_by_compressed_key\":true,\"enable_table_prune_on_update\":false,\"chunk_size\":4096,\"k_factor\":1,\"global_runtime_filter_probe_min_selectivity\":0.5,\"query_mem_limit\":0,\"enable_materialized_view_single_table_view_delta_rewrite\":false,\"cbo_prune_json_subfield\":false,\"enable_prune_complex_types_in_unnest\":true,\"sql_dialect\":\"StarRocks\",\"enable_per_bucket_optimize\":true,\"enable_eliminate_agg\":true,\"big_query_log_scan_rows_threshold\":1000000000,\"character_set_client\":\"utf8\",\"autocommit\":true,\"enable_read_iceberg_equality_delete_with_partition_evolution\":false,\"enable_column_expr_predicate\":true,\"skip_local_disk_cache\":false,\"max_ukfk_join_reorder_fk_rows\":100000000,\"enable_show_predicate_tree_in_profile\":false,\"enable_join_runtime_bitset_filter\":true,\"cbo_enable_dp_join_reorder\":true,\"materialized_view_join_same_table_permutation_limit\":5,\"spill_mem_table_num\":2,\"enable_materialized_view_rewrite_greedy_mode\":false,\"pipeline_dop\":0,\"single_node_exec_plan\":false,\"enable_materialized_view_concurrent_prepare\":true,\"statistic_collect_parallel\":1,\"ann_params\":\"\",\"disable_colocate_join\":false,\"max_pushdown_conditions_per_column\":-1,\"back_pressure_back_rounds\":3,\"spill_hash_join_probe_op_max_bytes\":2147483648,\"default_table_compression\":\"lz4_frame\",\"choose_execute_instances_mode\":\"LOCALITY\",\"cbo_reorder_threshold_use_exhaustive\":6,\"enable_predicate_reorder\":false,\"enable_connector_sink_spill\":true,\"enable_datacache_sharing\":true,\"enable_query_cache\":false,\"group_execution_group_scale\":64,\"enable_inner_join_to_semi\":false,\"max_allowed_packet\":33554432,\"enable_materialized_view_multi_stages_rewrite\":true,\"enable_parallel_prepare_metadata\":false,\"datacache_sharing_work_period\":600,\"time_zone\":\"Asia/Shanghai\",\"insert_max_filter_ratio\":0,\"enable_shared_scan\":false,\"join_late_materialization\":false,\"audit_execute_stmt\":false,\"cbo_derive_range_join_predicate\":false,\"allow_default_partition\":false,\"cbo_use_histogram_evaluate_list_partition\":false,\"paimon_force_jni_reader\":false}",
  "be_number": 1,
  "be_core_stat": {
    "numOfHardwareCoresPerBe": "{\"10003\":104}",
    "cachedAvgNumOfHardwareCores": 104
  },
  "exception": [

  ],
  "version": "UNKNOWN",
  "commit_version": "UNKNOWN"
}