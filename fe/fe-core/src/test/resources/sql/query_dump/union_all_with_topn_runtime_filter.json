{
    "statement":"WITH tbl_mock_024 (mock_005, mock_008, mock_006, mock_009, mock_007, mock_002, mock_003, mock_004, mock_011, mock_012, mock_022, mock_023, mock_016, mock_019, mock_020, mock_018, value, mock_014) AS (SELECT tbl_mock_001.mock_005, tbl_mock_001.mock_008, tbl_mock_001.mock_006, tbl_mock_001.mock_009, tbl_mock_001.mock_007, tbl_mock_001.mock_002, tbl_mock_001.mock_003, tbl_mock_001.mock_004, tbl_mock_001.mock_011, tbl_mock_001.mock_012, tbl_mock_001.mock_010 AS mock_022, tbl_mock_001.mock_013 AS mock_023, NULL AS mock_016, 'Ether' AS mock_019, 'ETH' AS mock_020, 18 AS mock_018, tbl_mock_001.value, tbl_mock_001.mock_014\nFROM db_mock_000.tbl_mock_001\nWHERE (tbl_mock_001.mock_005 = '1000') OR (tbl_mock_001.mock_008 = '1000') ORDER BY tbl_mock_001.mock_004 DESC  LIMIT 100) , tbl_mock_026 (mock_005, mock_008, mock_006, mock_009, mock_007, mock_002, mock_003, mock_004, mock_011, mock_012, mock_022, mock_023, mock_016, mock_019, mock_020, mock_018, value, mock_014) AS (SELECT tbl_mock_015.mock_005, tbl_mock_015.mock_008, tbl_mock_015.mock_006, tbl_mock_015.mock_009, tbl_mock_015.mock_007, tbl_mock_015.mock_002, tbl_mock_015.mock_003, tbl_mock_015.mock_004, tbl_mock_015.mock_011, tbl_mock_015.mock_012, tbl_mock_015.mock_017 AS mock_022, 'ERC20' AS mock_023, tbl_mock_015.mock_016, tbl_mock_015.mock_019, tbl_mock_015.mock_020, tbl_mock_015.mock_018, tbl_mock_015.value, tbl_mock_015.mock_014\nFROM db_mock_000.tbl_mock_015\nWHERE (tbl_mock_015.mock_005 = '1000') OR (tbl_mock_015.mock_008 = '1000') ORDER BY tbl_mock_015.mock_004 DESC  LIMIT 100) SELECT *\nFROM tbl_mock_024 UNION SELECT *\nFROM tbl_mock_026 ORDER BY tbl_mock_024.mock_004 DESC  LIMIT 100",
    "table_meta":{
        "db_mock_000.tbl_mock_001":"CREATE TABLE db_mock_000.tbl_mock_001 (\nmock_004 datetime NOT NULL ,\nmock_005 varchar(65533) ,\nmock_008 varchar(65533) ,\nmock_006 varchar(65533) ,\nmock_009 varchar(65533) ,\nmock_007 varchar(65533) ,\nmock_002 varchar(65533) ,\nmock_003 bigint(20) ,\nmock_011 varchar(65533) ,\nmock_012 bigint(20) ,\nmock_010 varchar(65533) ,\nmock_013 varchar(65533) ,\nvalue decimal128(38, 0) ,\nmock_014 float ,\n  INDEX from_address_index (mock_005) USING BITMAP,\n  INDEX to_address_index (mock_008) USING BITMAP,\n  INDEX from_cluster_index (mock_006) USING BITMAP,\n  INDEX to_cluster_index (mock_009) USING BITMAP\n) ENGINE= OLAP \nDUPLICATE KEY(mock_004)\nPARTITION BY RANGE(mock_004)\n(PARTITION p20140101 VALUES [(\"2014-01-01 00:00:00\"), (\"2014-01-31 00:00:00\")),\nPARTITION p20140131 VALUES [(\"2014-01-31 00:00:00\"), (\"2014-03-02 00:00:00\")),\nPARTITION p20140302 VALUES [(\"2014-03-02 00:00:00\"), (\"2014-04-01 00:00:00\")),\nPARTITION p20140401 VALUES [(\"2014-04-01 00:00:00\"), (\"2014-05-01 00:00:00\")),\nPARTITION p20140501 VALUES [(\"2014-05-01 00:00:00\"), (\"2014-05-31 00:00:00\")),\nPARTITION p20140531 VALUES [(\"2014-05-31 00:00:00\"), (\"2014-06-30 00:00:00\")),\nPARTITION p20140630 VALUES [(\"2014-06-30 00:00:00\"), (\"2014-07-30 00:00:00\")),\nPARTITION p20140730 VALUES [(\"2014-07-30 00:00:00\"), (\"2014-08-29 00:00:00\")),\nPARTITION p20140829 VALUES [(\"2014-08-29 00:00:00\"), (\"2014-09-28 00:00:00\")),\nPARTITION p20140928 VALUES [(\"2014-09-28 00:00:00\"), (\"2014-10-28 00:00:00\")),\nPARTITION p20141028 VALUES [(\"2014-10-28 00:00:00\"), (\"2014-11-27 00:00:00\")),\nPARTITION p20141127 VALUES [(\"2014-11-27 00:00:00\"), (\"2014-12-27 00:00:00\")),\nPARTITION p20141227 VALUES [(\"2014-12-27 00:00:00\"), (\"2015-01-26 00:00:00\")),\nPARTITION p20150126 VALUES [(\"2015-01-26 00:00:00\"), (\"2015-02-25 00:00:00\")),\nPARTITION p20150225 VALUES [(\"2015-02-25 00:00:00\"), (\"2015-03-27 00:00:00\")),\nPARTITION p20150327 VALUES [(\"2015-03-27 00:00:00\"), (\"2015-04-26 00:00:00\")),\nPARTITION p20150426 VALUES [(\"2015-04-26 00:00:00\"), (\"2015-05-26 00:00:00\")),\nPARTITION p20150526 VALUES [(\"2015-05-26 00:00:00\"), (\"2015-06-25 00:00:00\")),\nPARTITION p20150625 VALUES [(\"2015-06-25 00:00:00\"), (\"2015-07-25 00:00:00\")),\nPARTITION p20150725 VALUES [(\"2015-07-25 00:00:00\"), (\"2015-08-24 00:00:00\")),\nPARTITION p20150824 VALUES [(\"2015-08-24 00:00:00\"), (\"2015-09-23 00:00:00\")),\nPARTITION p20150923 VALUES [(\"2015-09-23 00:00:00\"), (\"2015-10-23 00:00:00\")),\nPARTITION p20151023 VALUES [(\"2015-10-23 00:00:00\"), (\"2015-11-22 00:00:00\")),\nPARTITION p20151122 VALUES [(\"2015-11-22 00:00:00\"), (\"2015-12-22 00:00:00\")),\nPARTITION p20151222 VALUES [(\"2015-12-22 00:00:00\"), (\"2016-01-21 00:00:00\")),\nPARTITION p20160121 VALUES [(\"2016-01-21 00:00:00\"), (\"2016-02-20 00:00:00\")),\nPARTITION p20160220 VALUES [(\"2016-02-20 00:00:00\"), (\"2016-03-21 00:00:00\")),\nPARTITION p20160321 VALUES [(\"2016-03-21 00:00:00\"), (\"2016-04-20 00:00:00\")),\nPARTITION p20160420 VALUES [(\"2016-04-20 00:00:00\"), (\"2016-05-20 00:00:00\")),\nPARTITION p20160520 VALUES [(\"2016-05-20 00:00:00\"), (\"2016-06-19 00:00:00\")),\nPARTITION p20160619 VALUES [(\"2016-06-19 00:00:00\"), (\"2016-07-19 00:00:00\")),\nPARTITION p20160719 VALUES [(\"2016-07-19 00:00:00\"), (\"2016-08-18 00:00:00\")),\nPARTITION p20160818 VALUES [(\"2016-08-18 00:00:00\"), (\"2016-09-17 00:00:00\")),\nPARTITION p20160917 VALUES [(\"2016-09-17 00:00:00\"), (\"2016-10-17 00:00:00\")),\nPARTITION p20161017 VALUES [(\"2016-10-17 00:00:00\"), (\"2016-11-16 00:00:00\")),\nPARTITION p20161116 VALUES [(\"2016-11-16 00:00:00\"), (\"2016-12-16 00:00:00\")),\nPARTITION p20161216 VALUES [(\"2016-12-16 00:00:00\"), (\"2017-01-15 00:00:00\")),\nPARTITION p20170115 VALUES [(\"2017-01-15 00:00:00\"), (\"2017-02-14 00:00:00\")),\nPARTITION p20170214 VALUES [(\"2017-02-14 00:00:00\"), (\"2017-03-16 00:00:00\")),\nPARTITION p20170316 VALUES [(\"2017-03-16 00:00:00\"), (\"2017-04-15 00:00:00\")),\nPARTITION p20170415 VALUES [(\"2017-04-15 00:00:00\"), (\"2017-05-15 00:00:00\")),\nPARTITION p20170515 VALUES [(\"2017-05-15 00:00:00\"), (\"2017-06-14 00:00:00\")),\nPARTITION p20170614 VALUES [(\"2017-06-14 00:00:00\"), (\"2017-07-14 00:00:00\")),\nPARTITION p20170714 VALUES [(\"2017-07-14 00:00:00\"), (\"2017-08-13 00:00:00\")),\nPARTITION p20170813 VALUES [(\"2017-08-13 00:00:00\"), (\"2017-09-12 00:00:00\")),\nPARTITION p20170912 VALUES [(\"2017-09-12 00:00:00\"), (\"2017-10-12 00:00:00\")),\nPARTITION p20171012 VALUES [(\"2017-10-12 00:00:00\"), (\"2017-11-11 00:00:00\")),\nPARTITION p20171111 VALUES [(\"2017-11-11 00:00:00\"), (\"2017-12-11 00:00:00\")),\nPARTITION p20171211 VALUES [(\"2017-12-11 00:00:00\"), (\"2018-01-10 00:00:00\")),\nPARTITION p20180110 VALUES [(\"2018-01-10 00:00:00\"), (\"2018-02-09 00:00:00\")),\nPARTITION p20180209 VALUES [(\"2018-02-09 00:00:00\"), (\"2018-03-11 00:00:00\")),\nPARTITION p20180311 VALUES [(\"2018-03-11 00:00:00\"), (\"2018-04-10 00:00:00\")),\nPARTITION p20180410 VALUES [(\"2018-04-10 00:00:00\"), (\"2018-05-10 00:00:00\")),\nPARTITION p20180510 VALUES [(\"2018-05-10 00:00:00\"), (\"2018-06-09 00:00:00\")),\nPARTITION p20180609 VALUES [(\"2018-06-09 00:00:00\"), (\"2018-07-09 00:00:00\")),\nPARTITION p20180709 VALUES [(\"2018-07-09 00:00:00\"), (\"2018-08-08 00:00:00\")),\nPARTITION p20180808 VALUES [(\"2018-08-08 00:00:00\"), (\"2018-09-07 00:00:00\")),\nPARTITION p20180907 VALUES [(\"2018-09-07 00:00:00\"), (\"2018-10-07 00:00:00\")),\nPARTITION p20181007 VALUES [(\"2018-10-07 00:00:00\"), (\"2018-11-06 00:00:00\")),\nPARTITION p20181106 VALUES [(\"2018-11-06 00:00:00\"), (\"2018-12-06 00:00:00\")),\nPARTITION p20181206 VALUES [(\"2018-12-06 00:00:00\"), (\"2019-01-05 00:00:00\")),\nPARTITION p20190105 VALUES [(\"2019-01-05 00:00:00\"), (\"2019-02-04 00:00:00\")),\nPARTITION p20190204 VALUES [(\"2019-02-04 00:00:00\"), (\"2019-03-06 00:00:00\")),\nPARTITION p20190306 VALUES [(\"2019-03-06 00:00:00\"), (\"2019-04-05 00:00:00\")),\nPARTITION p20190405 VALUES [(\"2019-04-05 00:00:00\"), (\"2019-05-05 00:00:00\")),\nPARTITION p20190505 VALUES [(\"2019-05-05 00:00:00\"), (\"2019-06-04 00:00:00\")),\nPARTITION p20190604 VALUES [(\"2019-06-04 00:00:00\"), (\"2019-07-04 00:00:00\")),\nPARTITION p20190704 VALUES [(\"2019-07-04 00:00:00\"), (\"2019-08-03 00:00:00\")),\nPARTITION p20190803 VALUES [(\"2019-08-03 00:00:00\"), (\"2019-09-02 00:00:00\")),\nPARTITION p20190902 VALUES [(\"2019-09-02 00:00:00\"), (\"2019-10-02 00:00:00\")),\nPARTITION p20191002 VALUES [(\"2019-10-02 00:00:00\"), (\"2019-11-01 00:00:00\")),\nPARTITION p20191101 VALUES [(\"2019-11-01 00:00:00\"), (\"2019-12-01 00:00:00\")),\nPARTITION p20191201 VALUES [(\"2019-12-01 00:00:00\"), (\"2019-12-31 00:00:00\")),\nPARTITION p20191231 VALUES [(\"2019-12-31 00:00:00\"), (\"2020-01-30 00:00:00\")),\nPARTITION p20200130 VALUES [(\"2020-01-30 00:00:00\"), (\"2020-02-29 00:00:00\")),\nPARTITION p20200229 VALUES [(\"2020-02-29 00:00:00\"), (\"2020-03-30 00:00:00\")),\nPARTITION p20200330 VALUES [(\"2020-03-30 00:00:00\"), (\"2020-04-29 00:00:00\")),\nPARTITION p20200429 VALUES [(\"2020-04-29 00:00:00\"), (\"2020-05-29 00:00:00\")),\nPARTITION p20200529 VALUES [(\"2020-05-29 00:00:00\"), (\"2020-06-28 00:00:00\")),\nPARTITION p20200628 VALUES [(\"2020-06-28 00:00:00\"), (\"2020-07-28 00:00:00\")),\nPARTITION p20200728 VALUES [(\"2020-07-28 00:00:00\"), (\"2020-08-27 00:00:00\")),\nPARTITION p20200827 VALUES [(\"2020-08-27 00:00:00\"), (\"2020-09-26 00:00:00\")),\nPARTITION p20200926 VALUES [(\"2020-09-26 00:00:00\"), (\"2020-10-26 00:00:00\")),\nPARTITION p20201026 VALUES [(\"2020-10-26 00:00:00\"), (\"2020-11-25 00:00:00\")),\nPARTITION p20201125 VALUES [(\"2020-11-25 00:00:00\"), (\"2020-12-25 00:00:00\")),\nPARTITION p20201225 VALUES [(\"2020-12-25 00:00:00\"), (\"2021-01-24 00:00:00\")),\nPARTITION p20210124 VALUES [(\"2021-01-24 00:00:00\"), (\"2021-02-23 00:00:00\")),\nPARTITION p20210223 VALUES [(\"2021-02-23 00:00:00\"), (\"2021-03-25 00:00:00\")),\nPARTITION p20210325 VALUES [(\"2021-03-25 00:00:00\"), (\"2021-04-24 00:00:00\")),\nPARTITION p20210424 VALUES [(\"2021-04-24 00:00:00\"), (\"2021-05-24 00:00:00\")),\nPARTITION p20210524 VALUES [(\"2021-05-24 00:00:00\"), (\"2021-06-23 00:00:00\")),\nPARTITION p20210623 VALUES [(\"2021-06-23 00:00:00\"), (\"2021-07-23 00:00:00\")),\nPARTITION p20210723 VALUES [(\"2021-07-23 00:00:00\"), (\"2021-08-22 00:00:00\")),\nPARTITION p20210822 VALUES [(\"2021-08-22 00:00:00\"), (\"2021-09-21 00:00:00\")),\nPARTITION p20210921 VALUES [(\"2021-09-21 00:00:00\"), (\"2021-10-21 00:00:00\")),\nPARTITION p20211021 VALUES [(\"2021-10-21 00:00:00\"), (\"2021-11-20 00:00:00\")),\nPARTITION p20211120 VALUES [(\"2021-11-20 00:00:00\"), (\"2021-12-20 00:00:00\")),\nPARTITION p20211220 VALUES [(\"2021-12-20 00:00:00\"), (\"2022-01-19 00:00:00\")),\nPARTITION p20220119 VALUES [(\"2022-01-19 00:00:00\"), (\"2022-02-18 00:00:00\")),\nPARTITION p20220218 VALUES [(\"2022-02-18 00:00:00\"), (\"2022-03-20 00:00:00\")),\nPARTITION p20220320 VALUES [(\"2022-03-20 00:00:00\"), (\"2022-04-19 00:00:00\")),\nPARTITION p20220419 VALUES [(\"2022-04-19 00:00:00\"), (\"2022-05-19 00:00:00\")),\nPARTITION p20220519 VALUES [(\"2022-05-19 00:00:00\"), (\"2022-06-18 00:00:00\")),\nPARTITION p20220618 VALUES [(\"2022-06-18 00:00:00\"), (\"2022-07-18 00:00:00\")),\nPARTITION p20220718 VALUES [(\"2022-07-18 00:00:00\"), (\"2022-08-17 00:00:00\")),\nPARTITION p20220817 VALUES [(\"2022-08-17 00:00:00\"), (\"2022-09-16 00:00:00\")),\nPARTITION p20220916 VALUES [(\"2022-09-16 00:00:00\"), (\"2022-10-16 00:00:00\")),\nPARTITION p20221016 VALUES [(\"2022-10-16 00:00:00\"), (\"2022-11-15 00:00:00\")),\nPARTITION p20221115 VALUES [(\"2022-11-15 00:00:00\"), (\"2022-12-15 00:00:00\")),\nPARTITION p20221215 VALUES [(\"2022-12-15 00:00:00\"), (\"2023-01-14 00:00:00\")),\nPARTITION p20230114 VALUES [(\"2023-01-14 00:00:00\"), (\"2023-02-13 00:00:00\")),\nPARTITION p20230213 VALUES [(\"2023-02-13 00:00:00\"), (\"2023-03-15 00:00:00\")),\nPARTITION p20230315 VALUES [(\"2023-03-15 00:00:00\"), (\"2023-04-14 00:00:00\")),\nPARTITION p20230414 VALUES [(\"2023-04-14 00:00:00\"), (\"2023-05-14 00:00:00\")),\nPARTITION p20230514 VALUES [(\"2023-05-14 00:00:00\"), (\"2023-06-13 00:00:00\")),\nPARTITION p20230613 VALUES [(\"2023-06-13 00:00:00\"), (\"2023-07-13 00:00:00\")),\nPARTITION p20230713 VALUES [(\"2023-07-13 00:00:00\"), (\"2023-08-12 00:00:00\")),\nPARTITION p20230812 VALUES [(\"2023-08-12 00:00:00\"), (\"2023-09-11 00:00:00\")),\nPARTITION p20230911 VALUES [(\"2023-09-11 00:00:00\"), (\"2023-10-11 00:00:00\")),\nPARTITION p20231011 VALUES [(\"2023-10-11 00:00:00\"), (\"2023-11-10 00:00:00\")),\nPARTITION p20231110 VALUES [(\"2023-11-10 00:00:00\"), (\"2023-12-10 00:00:00\")),\nPARTITION p20231210 VALUES [(\"2023-12-10 00:00:00\"), (\"2024-01-09 00:00:00\")),\nPARTITION p20240109 VALUES [(\"2024-01-09 00:00:00\"), (\"2024-02-08 00:00:00\")),\nPARTITION p20240208 VALUES [(\"2024-02-08 00:00:00\"), (\"2024-03-09 00:00:00\")),\nPARTITION p20240309 VALUES [(\"2024-03-09 00:00:00\"), (\"2024-04-08 00:00:00\")),\nPARTITION p20240408 VALUES [(\"2024-04-08 00:00:00\"), (\"2024-05-08 00:00:00\")),\nPARTITION p20240508 VALUES [(\"2024-05-08 00:00:00\"), (\"2024-06-07 00:00:00\")),\nPARTITION p20240607 VALUES [(\"2024-06-07 00:00:00\"), (\"2024-07-07 00:00:00\")),\nPARTITION p20240707 VALUES [(\"2024-07-07 00:00:00\"), (\"2024-08-06 00:00:00\")),\nPARTITION p20240806 VALUES [(\"2024-08-06 00:00:00\"), (\"2024-09-05 00:00:00\")),\nPARTITION p20240905 VALUES [(\"2024-09-05 00:00:00\"), (\"2024-10-05 00:00:00\")),\nPARTITION p20241005 VALUES [(\"2024-10-05 00:00:00\"), (\"2024-11-04 00:00:00\")),\nPARTITION p20241104 VALUES [(\"2024-11-04 00:00:00\"), (\"2024-12-04 00:00:00\")),\nPARTITION p20241204 VALUES [(\"2024-12-04 00:00:00\"), (\"2025-01-03 00:00:00\")))\nDISTRIBUTED BY HASH(mock_011, mock_010) BUCKETS 16 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);",
        "db_mock_000.tbl_mock_015":"CREATE TABLE db_mock_000.tbl_mock_015 (\nmock_004 datetime NOT NULL ,\nmock_005 varchar(65533) ,\nmock_008 varchar(65533) ,\nmock_006 varchar(65533) ,\nmock_009 varchar(65533) ,\nmock_007 varchar(65533) ,\nmock_002 varchar(65533) ,\nmock_003 bigint(20) ,\nmock_011 varchar(65533) ,\nmock_012 bigint(20) ,\nmock_017 bigint(20) ,\nmock_016 varchar(65533) ,\nmock_019 varchar(65533) ,\nmock_020 varchar(65533) ,\nmock_018 int(11) ,\nvalue varchar(65533) ,\nmock_014 float ,\n  INDEX contract_address_index (mock_016) USING BITMAP,\n  INDEX from_address_index (mock_005) USING BITMAP,\n  INDEX to_address_index (mock_008) USING BITMAP,\n  INDEX from_cluster_index (mock_006) USING BITMAP,\n  INDEX to_cluster_index (mock_009) USING BITMAP\n) ENGINE= OLAP \nDUPLICATE KEY(mock_004)\nPARTITION BY RANGE(mock_004)\n(PARTITION p20140101 VALUES [(\"2014-01-01 00:00:00\"), (\"2014-01-31 00:00:00\")),\nPARTITION p20140131 VALUES [(\"2014-01-31 00:00:00\"), (\"2014-03-02 00:00:00\")),\nPARTITION p20140302 VALUES [(\"2014-03-02 00:00:00\"), (\"2014-04-01 00:00:00\")),\nPARTITION p20140401 VALUES [(\"2014-04-01 00:00:00\"), (\"2014-05-01 00:00:00\")),\nPARTITION p20140501 VALUES [(\"2014-05-01 00:00:00\"), (\"2014-05-31 00:00:00\")),\nPARTITION p20140531 VALUES [(\"2014-05-31 00:00:00\"), (\"2014-06-30 00:00:00\")),\nPARTITION p20140630 VALUES [(\"2014-06-30 00:00:00\"), (\"2014-07-30 00:00:00\")),\nPARTITION p20140730 VALUES [(\"2014-07-30 00:00:00\"), (\"2014-08-29 00:00:00\")),\nPARTITION p20140829 VALUES [(\"2014-08-29 00:00:00\"), (\"2014-09-28 00:00:00\")),\nPARTITION p20140928 VALUES [(\"2014-09-28 00:00:00\"), (\"2014-10-28 00:00:00\")),\nPARTITION p20141028 VALUES [(\"2014-10-28 00:00:00\"), (\"2014-11-27 00:00:00\")),\nPARTITION p20141127 VALUES [(\"2014-11-27 00:00:00\"), (\"2014-12-27 00:00:00\")),\nPARTITION p20141227 VALUES [(\"2014-12-27 00:00:00\"), (\"2015-01-26 00:00:00\")),\nPARTITION p20150126 VALUES [(\"2015-01-26 00:00:00\"), (\"2015-02-25 00:00:00\")),\nPARTITION p20150225 VALUES [(\"2015-02-25 00:00:00\"), (\"2015-03-27 00:00:00\")),\nPARTITION p20150327 VALUES [(\"2015-03-27 00:00:00\"), (\"2015-04-26 00:00:00\")),\nPARTITION p20150426 VALUES [(\"2015-04-26 00:00:00\"), (\"2015-05-26 00:00:00\")),\nPARTITION p20150526 VALUES [(\"2015-05-26 00:00:00\"), (\"2015-06-25 00:00:00\")),\nPARTITION p20150625 VALUES [(\"2015-06-25 00:00:00\"), (\"2015-07-25 00:00:00\")),\nPARTITION p20150725 VALUES [(\"2015-07-25 00:00:00\"), (\"2015-08-24 00:00:00\")),\nPARTITION p20150824 VALUES [(\"2015-08-24 00:00:00\"), (\"2015-09-23 00:00:00\")),\nPARTITION p20150923 VALUES [(\"2015-09-23 00:00:00\"), (\"2015-10-23 00:00:00\")),\nPARTITION p20151023 VALUES [(\"2015-10-23 00:00:00\"), (\"2015-11-22 00:00:00\")),\nPARTITION p20151122 VALUES [(\"2015-11-22 00:00:00\"), (\"2015-12-22 00:00:00\")),\nPARTITION p20151222 VALUES [(\"2015-12-22 00:00:00\"), (\"2016-01-21 00:00:00\")),\nPARTITION p20160121 VALUES [(\"2016-01-21 00:00:00\"), (\"2016-02-20 00:00:00\")),\nPARTITION p20160220 VALUES [(\"2016-02-20 00:00:00\"), (\"2016-03-21 00:00:00\")),\nPARTITION p20160321 VALUES [(\"2016-03-21 00:00:00\"), (\"2016-04-20 00:00:00\")),\nPARTITION p20160420 VALUES [(\"2016-04-20 00:00:00\"), (\"2016-05-20 00:00:00\")),\nPARTITION p20160520 VALUES [(\"2016-05-20 00:00:00\"), (\"2016-06-19 00:00:00\")),\nPARTITION p20160619 VALUES [(\"2016-06-19 00:00:00\"), (\"2016-07-19 00:00:00\")),\nPARTITION p20160719 VALUES [(\"2016-07-19 00:00:00\"), (\"2016-08-18 00:00:00\")),\nPARTITION p20160818 VALUES [(\"2016-08-18 00:00:00\"), (\"2016-09-17 00:00:00\")),\nPARTITION p20160917 VALUES [(\"2016-09-17 00:00:00\"), (\"2016-10-17 00:00:00\")),\nPARTITION p20161017 VALUES [(\"2016-10-17 00:00:00\"), (\"2016-11-16 00:00:00\")),\nPARTITION p20161116 VALUES [(\"2016-11-16 00:00:00\"), (\"2016-12-16 00:00:00\")),\nPARTITION p20161216 VALUES [(\"2016-12-16 00:00:00\"), (\"2017-01-15 00:00:00\")),\nPARTITION p20170115 VALUES [(\"2017-01-15 00:00:00\"), (\"2017-02-14 00:00:00\")),\nPARTITION p20170214 VALUES [(\"2017-02-14 00:00:00\"), (\"2017-03-16 00:00:00\")),\nPARTITION p20170316 VALUES [(\"2017-03-16 00:00:00\"), (\"2017-04-15 00:00:00\")),\nPARTITION p20170415 VALUES [(\"2017-04-15 00:00:00\"), (\"2017-05-15 00:00:00\")),\nPARTITION p20170515 VALUES [(\"2017-05-15 00:00:00\"), (\"2017-06-14 00:00:00\")),\nPARTITION p20170614 VALUES [(\"2017-06-14 00:00:00\"), (\"2017-07-14 00:00:00\")),\nPARTITION p20170714 VALUES [(\"2017-07-14 00:00:00\"), (\"2017-08-13 00:00:00\")),\nPARTITION p20170813 VALUES [(\"2017-08-13 00:00:00\"), (\"2017-09-12 00:00:00\")),\nPARTITION p20170912 VALUES [(\"2017-09-12 00:00:00\"), (\"2017-10-12 00:00:00\")),\nPARTITION p20171012 VALUES [(\"2017-10-12 00:00:00\"), (\"2017-11-11 00:00:00\")),\nPARTITION p20171111 VALUES [(\"2017-11-11 00:00:00\"), (\"2017-12-11 00:00:00\")),\nPARTITION p20171211 VALUES [(\"2017-12-11 00:00:00\"), (\"2018-01-10 00:00:00\")),\nPARTITION p20180110 VALUES [(\"2018-01-10 00:00:00\"), (\"2018-02-09 00:00:00\")),\nPARTITION p20180209 VALUES [(\"2018-02-09 00:00:00\"), (\"2018-03-11 00:00:00\")),\nPARTITION p20180311 VALUES [(\"2018-03-11 00:00:00\"), (\"2018-04-10 00:00:00\")),\nPARTITION p20180410 VALUES [(\"2018-04-10 00:00:00\"), (\"2018-05-10 00:00:00\")),\nPARTITION p20180510 VALUES [(\"2018-05-10 00:00:00\"), (\"2018-06-09 00:00:00\")),\nPARTITION p20180609 VALUES [(\"2018-06-09 00:00:00\"), (\"2018-07-09 00:00:00\")),\nPARTITION p20180709 VALUES [(\"2018-07-09 00:00:00\"), (\"2018-08-08 00:00:00\")),\nPARTITION p20180808 VALUES [(\"2018-08-08 00:00:00\"), (\"2018-09-07 00:00:00\")),\nPARTITION p20180907 VALUES [(\"2018-09-07 00:00:00\"), (\"2018-10-07 00:00:00\")),\nPARTITION p20181007 VALUES [(\"2018-10-07 00:00:00\"), (\"2018-11-06 00:00:00\")),\nPARTITION p20181106 VALUES [(\"2018-11-06 00:00:00\"), (\"2018-12-06 00:00:00\")),\nPARTITION p20181206 VALUES [(\"2018-12-06 00:00:00\"), (\"2019-01-05 00:00:00\")),\nPARTITION p20190105 VALUES [(\"2019-01-05 00:00:00\"), (\"2019-02-04 00:00:00\")),\nPARTITION p20190204 VALUES [(\"2019-02-04 00:00:00\"), (\"2019-03-06 00:00:00\")),\nPARTITION p20190306 VALUES [(\"2019-03-06 00:00:00\"), (\"2019-04-05 00:00:00\")),\nPARTITION p20190405 VALUES [(\"2019-04-05 00:00:00\"), (\"2019-05-05 00:00:00\")),\nPARTITION p20190505 VALUES [(\"2019-05-05 00:00:00\"), (\"2019-06-04 00:00:00\")),\nPARTITION p20190604 VALUES [(\"2019-06-04 00:00:00\"), (\"2019-07-04 00:00:00\")),\nPARTITION p20190704 VALUES [(\"2019-07-04 00:00:00\"), (\"2019-08-03 00:00:00\")),\nPARTITION p20190803 VALUES [(\"2019-08-03 00:00:00\"), (\"2019-09-02 00:00:00\")),\nPARTITION p20190902 VALUES [(\"2019-09-02 00:00:00\"), (\"2019-10-02 00:00:00\")),\nPARTITION p20191002 VALUES [(\"2019-10-02 00:00:00\"), (\"2019-11-01 00:00:00\")),\nPARTITION p20191101 VALUES [(\"2019-11-01 00:00:00\"), (\"2019-12-01 00:00:00\")),\nPARTITION p20191201 VALUES [(\"2019-12-01 00:00:00\"), (\"2019-12-31 00:00:00\")),\nPARTITION p20191231 VALUES [(\"2019-12-31 00:00:00\"), (\"2020-01-30 00:00:00\")),\nPARTITION p20200130 VALUES [(\"2020-01-30 00:00:00\"), (\"2020-02-29 00:00:00\")),\nPARTITION p20200229 VALUES [(\"2020-02-29 00:00:00\"), (\"2020-03-30 00:00:00\")),\nPARTITION p20200330 VALUES [(\"2020-03-30 00:00:00\"), (\"2020-04-29 00:00:00\")),\nPARTITION p20200429 VALUES [(\"2020-04-29 00:00:00\"), (\"2020-05-29 00:00:00\")),\nPARTITION p20200529 VALUES [(\"2020-05-29 00:00:00\"), (\"2020-06-28 00:00:00\")),\nPARTITION p20200628 VALUES [(\"2020-06-28 00:00:00\"), (\"2020-07-28 00:00:00\")),\nPARTITION p20200728 VALUES [(\"2020-07-28 00:00:00\"), (\"2020-08-27 00:00:00\")),\nPARTITION p20200827 VALUES [(\"2020-08-27 00:00:00\"), (\"2020-09-26 00:00:00\")),\nPARTITION p20200926 VALUES [(\"2020-09-26 00:00:00\"), (\"2020-10-26 00:00:00\")),\nPARTITION p20201026 VALUES [(\"2020-10-26 00:00:00\"), (\"2020-11-25 00:00:00\")),\nPARTITION p20201125 VALUES [(\"2020-11-25 00:00:00\"), (\"2020-12-25 00:00:00\")),\nPARTITION p20201225 VALUES [(\"2020-12-25 00:00:00\"), (\"2021-01-24 00:00:00\")),\nPARTITION p20210124 VALUES [(\"2021-01-24 00:00:00\"), (\"2021-02-23 00:00:00\")),\nPARTITION p20210223 VALUES [(\"2021-02-23 00:00:00\"), (\"2021-03-25 00:00:00\")),\nPARTITION p20210325 VALUES [(\"2021-03-25 00:00:00\"), (\"2021-04-24 00:00:00\")),\nPARTITION p20210424 VALUES [(\"2021-04-24 00:00:00\"), (\"2021-05-24 00:00:00\")),\nPARTITION p20210524 VALUES [(\"2021-05-24 00:00:00\"), (\"2021-06-23 00:00:00\")),\nPARTITION p20210623 VALUES [(\"2021-06-23 00:00:00\"), (\"2021-07-23 00:00:00\")),\nPARTITION p20210723 VALUES [(\"2021-07-23 00:00:00\"), (\"2021-08-22 00:00:00\")),\nPARTITION p20210822 VALUES [(\"2021-08-22 00:00:00\"), (\"2021-09-21 00:00:00\")),\nPARTITION p20210921 VALUES [(\"2021-09-21 00:00:00\"), (\"2021-10-21 00:00:00\")),\nPARTITION p20211021 VALUES [(\"2021-10-21 00:00:00\"), (\"2021-11-20 00:00:00\")),\nPARTITION p20211120 VALUES [(\"2021-11-20 00:00:00\"), (\"2021-12-20 00:00:00\")),\nPARTITION p20211220 VALUES [(\"2021-12-20 00:00:00\"), (\"2022-01-19 00:00:00\")),\nPARTITION p20220119 VALUES [(\"2022-01-19 00:00:00\"), (\"2022-02-18 00:00:00\")),\nPARTITION p20220218 VALUES [(\"2022-02-18 00:00:00\"), (\"2022-03-20 00:00:00\")),\nPARTITION p20220320 VALUES [(\"2022-03-20 00:00:00\"), (\"2022-04-19 00:00:00\")),\nPARTITION p20220419 VALUES [(\"2022-04-19 00:00:00\"), (\"2022-05-19 00:00:00\")),\nPARTITION p20220519 VALUES [(\"2022-05-19 00:00:00\"), (\"2022-06-18 00:00:00\")),\nPARTITION p20220618 VALUES [(\"2022-06-18 00:00:00\"), (\"2022-07-18 00:00:00\")),\nPARTITION p20220718 VALUES [(\"2022-07-18 00:00:00\"), (\"2022-08-17 00:00:00\")),\nPARTITION p20220817 VALUES [(\"2022-08-17 00:00:00\"), (\"2022-09-16 00:00:00\")),\nPARTITION p20220916 VALUES [(\"2022-09-16 00:00:00\"), (\"2022-10-16 00:00:00\")),\nPARTITION p20221016 VALUES [(\"2022-10-16 00:00:00\"), (\"2022-11-15 00:00:00\")),\nPARTITION p20221115 VALUES [(\"2022-11-15 00:00:00\"), (\"2022-12-15 00:00:00\")),\nPARTITION p20221215 VALUES [(\"2022-12-15 00:00:00\"), (\"2023-01-14 00:00:00\")),\nPARTITION p20230114 VALUES [(\"2023-01-14 00:00:00\"), (\"2023-02-13 00:00:00\")),\nPARTITION p20230213 VALUES [(\"2023-02-13 00:00:00\"), (\"2023-03-15 00:00:00\")),\nPARTITION p20230315 VALUES [(\"2023-03-15 00:00:00\"), (\"2023-04-14 00:00:00\")),\nPARTITION p20230414 VALUES [(\"2023-04-14 00:00:00\"), (\"2023-05-14 00:00:00\")),\nPARTITION p20230514 VALUES [(\"2023-05-14 00:00:00\"), (\"2023-06-13 00:00:00\")),\nPARTITION p20230613 VALUES [(\"2023-06-13 00:00:00\"), (\"2023-07-13 00:00:00\")),\nPARTITION p20230713 VALUES [(\"2023-07-13 00:00:00\"), (\"2023-08-12 00:00:00\")),\nPARTITION p20230812 VALUES [(\"2023-08-12 00:00:00\"), (\"2023-09-11 00:00:00\")),\nPARTITION p20230911 VALUES [(\"2023-09-11 00:00:00\"), (\"2023-10-11 00:00:00\")),\nPARTITION p20231011 VALUES [(\"2023-10-11 00:00:00\"), (\"2023-11-10 00:00:00\")),\nPARTITION p20231110 VALUES [(\"2023-11-10 00:00:00\"), (\"2023-12-10 00:00:00\")),\nPARTITION p20231210 VALUES [(\"2023-12-10 00:00:00\"), (\"2024-01-09 00:00:00\")),\nPARTITION p20240109 VALUES [(\"2024-01-09 00:00:00\"), (\"2024-02-08 00:00:00\")),\nPARTITION p20240208 VALUES [(\"2024-02-08 00:00:00\"), (\"2024-03-09 00:00:00\")),\nPARTITION p20240309 VALUES [(\"2024-03-09 00:00:00\"), (\"2024-04-08 00:00:00\")),\nPARTITION p20240408 VALUES [(\"2024-04-08 00:00:00\"), (\"2024-05-08 00:00:00\")),\nPARTITION p20240508 VALUES [(\"2024-05-08 00:00:00\"), (\"2024-06-07 00:00:00\")),\nPARTITION p20240607 VALUES [(\"2024-06-07 00:00:00\"), (\"2024-07-07 00:00:00\")),\nPARTITION p20240707 VALUES [(\"2024-07-07 00:00:00\"), (\"2024-08-06 00:00:00\")),\nPARTITION p20240806 VALUES [(\"2024-08-06 00:00:00\"), (\"2024-09-05 00:00:00\")),\nPARTITION p20240905 VALUES [(\"2024-09-05 00:00:00\"), (\"2024-10-05 00:00:00\")),\nPARTITION p20241005 VALUES [(\"2024-10-05 00:00:00\"), (\"2024-11-04 00:00:00\")),\nPARTITION p20241104 VALUES [(\"2024-11-04 00:00:00\"), (\"2024-12-04 00:00:00\")),\nPARTITION p20241204 VALUES [(\"2024-12-04 00:00:00\"), (\"2025-01-03 00:00:00\")))\nDISTRIBUTED BY HASH(mock_011, mock_017) BUCKETS 16 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);"
    },
    "table_row_count":{
        "db_mock_000.tbl_mock_015":{
            "tbl_mock_021":1000000
        },
        "db_mock_000.tbl_mock_001":{
            "tbl_mock_021":1000000
        }
    },
    "column_statistics":{
        "db_mock_000.tbl_mock_015":{
            "mock_014":"[1.0, 1000000.0, 0.0, 8.0, 997551.0] ESTIMATE",
            "mock_007":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_003":"[1.0, 1000000.0, 0.0, 8.0, 1000237.0] ESTIMATE",
            "mock_012":"[1.0, 1000000.0, 0.0, 8.0, 1000237.0] ESTIMATE",
            "mock_019":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_016":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "value":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_018":"[1.0, 1000000.0, 0.0, 4.0, 999528.0] ESTIMATE",
            "mock_006":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_020":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_002":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_005":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_008":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_017":"[1.0, 1000000.0, 0.0, 8.0, 1000237.0] ESTIMATE",
            "mock_009":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_004":"[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE",
            "mock_011":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE"
        },
        "db_mock_000.tbl_mock_001":{
            "mock_014":"[1.0, 1000000.0, 0.0, 8.0, 997551.0] ESTIMATE",
            "mock_007":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_003":"[1.0, 1000000.0, 0.0, 8.0, 1000237.0] ESTIMATE",
            "mock_012":"[1.0, 1000000.0, 0.0, 8.0, 1000237.0] ESTIMATE",
            "mock_010":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "value":"[1.0, 1000000.0, 0.0, 16.0, 995226.0] ESTIMATE",
            "mock_006":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_002":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_005":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_008":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_009":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_004":"[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE",
            "mock_013":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE",
            "mock_011":"[-Infinity, Infinity, 0.0, 5.888896, 1009839.0] ESTIMATE"
        }
    },
    "explain_info":"PLAN FRAGMENT 0(F10)\n  Output Exprs:80: mock_005 | 81: mock_008 | 82: mock_006 | 83: mock_009 | 84: mock_007 | 85: mock_002 | 86: mock_003 | 87: mock_004 | 88: mock_011 | 89: mock_012 | 90: mock_010 | 91: mock_013 | 92: cast | 93: cast | 94: cast | 95: cast | 96: cast | 97: mock_014\n  Input Partition: UNPARTITIONED\n  RESULT SINK\n\n  31:MERGING-EXCHANGE\n     distribution mock_013: GATHER\n     limit: 100\n     cardinality: 1\n     column statistics: \n     * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_010-->[-Infinity, Infinity, 0.0, 6.9444479999999995, 1.5] ESTIMATE\n     * mock_013-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n     * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n     * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n     * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n     * cast-->[1.0, 1000000.0, 0.0, 4.0, 1.5] ESTIMATE\n     * cast-->[-Infinity, Infinity, 0.0, 10.944448, 1.5] ESTIMATE\n     * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 1(F09)\n\n  Input Partition: HASH_PARTITIONED: 80: mock_005, 81: mock_008, 82: mock_006, 83: mock_009, 84: mock_007, 85: mock_002, 86: mock_003, 87: mock_004, 88: mock_011, 89: mock_012, 90: mock_010, 91: mock_013, 92: cast, 93: cast, 94: cast, 95: cast, 96: cast, 97: mock_014\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 31\n\n  30:TOP-N\n  |  order by: [87, DATETIME, false] DESC\n  |  offset: 0\n  |  limit: 100\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 6.9444479999999995, 1.5] ESTIMATE\n  |  * mock_013-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[1.0, 1000000.0, 0.0, 4.0, 1.5] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 10.944448, 1.5] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  \n  29:AGGREGATE (merge finalize)\n  |  group by: [80: mock_005, VARCHAR(65533), true], [81: mock_008, VARCHAR(65533), true], [82: mock_006, VARCHAR(65533), true], [83: mock_009, VARCHAR(65533), true], [84: mock_007, VARCHAR(65533), true], [85: mock_002, VARCHAR(65533), true], [86: mock_003, BIGINT, true], [87: mock_004, DATETIME, false], [88: mock_011, VARCHAR(65533), true], [89: mock_012, BIGINT, true], [90: mock_010, VARCHAR(65533), true], [91: mock_013, VARCHAR(65533), true], [92: cast, VARCHAR(65533), true], [93: cast, VARCHAR(65533), true], [94: cast, VARCHAR(65533), true], [95: cast, INT, true], [96: cast, VARCHAR(65533), true], [97: mock_014, FLOAT, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 6.9444479999999995, 1.5] ESTIMATE\n  |  * mock_013-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[1.0, 1000000.0, 0.0, 4.0, 1.5] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 10.944448, 1.5] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  \n  28:EXCHANGE\n     distribution mock_013: SHUFFLE\n     partition exprs: [80: mock_005, VARCHAR(65533), true], [81: mock_008, VARCHAR(65533), true], [82: mock_006, VARCHAR(65533), true], [83: mock_009, VARCHAR(65533), true], [84: mock_007, VARCHAR(65533), true], [85: mock_002, VARCHAR(65533), true], [86: mock_003, BIGINT, true], [87: mock_004, DATETIME, false], [88: mock_011, VARCHAR(65533), true], [89: mock_012, BIGINT, true], [90: mock_010, VARCHAR(65533), true], [91: mock_013, VARCHAR(65533), true], [92: cast, VARCHAR(65533), true], [93: cast, VARCHAR(65533), true], [94: cast, VARCHAR(65533), true], [95: cast, INT, true], [96: cast, VARCHAR(65533), true], [97: mock_014, FLOAT, true]\n     cardinality: 1\n\nPLAN FRAGMENT 2(F00)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 80: mock_005, 81: mock_008, 82: mock_006, 83: mock_009, 84: mock_007, 85: mock_002, 86: mock_003, 87: mock_004, 88: mock_011, 89: mock_012, 90: mock_010, 91: mock_013, 92: cast, 93: cast, 94: cast, 95: cast, 96: cast, 97: mock_014\n  OutPut Exchange id: 28\n\n  27:AGGREGATE (update serialize)\n  |  STREAMING\n  |  group by: [80: mock_005, VARCHAR(65533), true], [81: mock_008, VARCHAR(65533), true], [82: mock_006, VARCHAR(65533), true], [83: mock_009, VARCHAR(65533), true], [84: mock_007, VARCHAR(65533), true], [85: mock_002, VARCHAR(65533), true], [86: mock_003, BIGINT, true], [87: mock_004, DATETIME, false], [88: mock_011, VARCHAR(65533), true], [89: mock_012, BIGINT, true], [90: mock_010, VARCHAR(65533), true], [91: mock_013, VARCHAR(65533), true], [92: cast, VARCHAR(65533), true], [93: cast, VARCHAR(65533), true], [94: cast, VARCHAR(65533), true], [95: cast, INT, true], [96: cast, VARCHAR(65533), true], [97: mock_014, FLOAT, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 6.9444479999999995, 1.5] ESTIMATE\n  |  * mock_013-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[1.0, 1000000.0, 0.0, 4.0, 1.5] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 10.944448, 1.5] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  \n  0:UNION\n  |  output exprs:\n  |      [80, VARCHAR(65533), true] | [81, VARCHAR(65533), true] | [82, VARCHAR(65533), true] | [83, VARCHAR(65533), true] | [84, VARCHAR(65533), true] | [85, VARCHAR(65533), true] | [86, BIGINT, true] | [87, DATETIME, false] | [88, VARCHAR(65533), true] | [89, BIGINT, true] | [90, VARCHAR(65533), true] | [91, VARCHAR(65533), true] | [92, VARCHAR(65533), true] | [93, VARCHAR(65533), true] | [94, VARCHAR(65533), true] | [95, INT, true] | [96, VARCHAR(65533), true] | [97, FLOAT, true]\n  |  child exprs:\n  |      [38: mock_005, VARCHAR, true] | [39: mock_008, VARCHAR, true] | [40: mock_006, VARCHAR, true] | [41: mock_009, VARCHAR, true] | [42: mock_007, VARCHAR, true] | [43: mock_002, VARCHAR, true] | [44: mock_003, BIGINT, true] | [37: mock_004, DATETIME, false] | [45: mock_011, VARCHAR, true] | [46: mock_012, BIGINT, true] | [47: mock_010, VARCHAR, true] | [48: mock_013, VARCHAR, true] | [55: cast, VARCHAR(65533), true] | [56: cast, VARCHAR, false] | [57: cast, VARCHAR, false] | [58: cast, INT, false] | [59: cast, VARCHAR(65533), true] | [50: mock_014, FLOAT, true]\n  |      [61: mock_005, VARCHAR, true] | [62: mock_008, VARCHAR, true] | [63: mock_006, VARCHAR, true] | [64: mock_009, VARCHAR, true] | [65: mock_007, VARCHAR, true] | [66: mock_002, VARCHAR, true] | [67: mock_003, BIGINT, true] | [60: mock_004, DATETIME, false] | [68: mock_011, VARCHAR, true] | [69: mock_012, BIGINT, true] | [78: cast, VARCHAR(65533), true] | [79: cast, VARCHAR, false] | [71: mock_016, VARCHAR, true] | [72: mock_019, VARCHAR, true] | [73: mock_020, VARCHAR, true] | [74: mock_018, INT, true] | [75: value, VARCHAR, true] | [76: mock_014, FLOAT, true]\n  |  pass-through-operands: all\n  |  cardinality: 4\n  |  column statistics: \n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 6.9444479999999995, 1.5] ESTIMATE\n  |  * mock_013-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 3.444448, 1.0] ESTIMATE\n  |  * cast-->[1.0, 1000000.0, 0.0, 4.0, 1.5] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 10.944448, 1.5] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  \n  |----26:EXCHANGE\n  |       limit: 100\n  |       cardinality: 2\n  |    \n  13:EXCHANGE\n     limit: 100\n     cardinality: 2\n\nPLAN FRAGMENT 3(F08)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 26\n\n  25:Project\n  |  output columns:\n  |  60 <-> [60: mock_004, DATETIME, false]\n  |  61 <-> [61: mock_005, VARCHAR, true]\n  |  62 <-> [62: mock_008, VARCHAR, true]\n  |  63 <-> [63: mock_006, VARCHAR, true]\n  |  64 <-> [64: mock_009, VARCHAR, true]\n  |  65 <-> [65: mock_007, VARCHAR, true]\n  |  66 <-> [66: mock_002, VARCHAR, true]\n  |  67 <-> [67: mock_003, BIGINT, true]\n  |  68 <-> [68: mock_011, VARCHAR, true]\n  |  69 <-> [69: mock_012, BIGINT, true]\n  |  71 <-> [71: mock_016, VARCHAR, true]\n  |  72 <-> [72: mock_019, VARCHAR, true]\n  |  73 <-> [73: mock_020, VARCHAR, true]\n  |  74 <-> [74: mock_018, INT, true]\n  |  75 <-> [75: value, VARCHAR, true]\n  |  76 <-> [76: mock_014, FLOAT, true]\n  |  78 <-> cast([70: mock_017, BIGINT, true] as VARCHAR(65533))\n  |  79 <-> [77: expr, VARCHAR, false]\n  |  limit: 100\n  |  cardinality: 2\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_016-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_019-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_020-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_018-->[1.0, 1000000.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * value-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * cast-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  24:MERGING-EXCHANGE\n     distribution mock_013: GATHER\n     limit: 100\n     cardinality: 2\n     column statistics: \n     * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_017-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_016-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_019-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_020-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_018-->[1.0, 1000000.0, 0.0, 4.0, 1.0] ESTIMATE\n     * value-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * cast-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 4(F05)\n\n  Input Partition: RANDOM\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 24\n\n  23:TOP-N\n  |  order by: [60, DATETIME, false] DESC\n  |  offset: 0\n  |  limit: 100\n  |  cardinality: 2\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_017-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_016-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_019-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_020-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_018-->[1.0, 1000000.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * value-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  14:UNION\n  |  output exprs:\n  |      [65, VARCHAR, true] | [66, VARCHAR, true] | [67, BIGINT, true] | [68, VARCHAR, true] | [69, BIGINT, true] | [70, BIGINT, true] | [71, VARCHAR, true] | [72, VARCHAR, true] | [73, VARCHAR, true] | [74, INT, true] | [75, VARCHAR, true] | [76, FLOAT, true] | [77, VARCHAR, false] | [60, DATETIME, false] | [61, VARCHAR, true] | [62, VARCHAR, true] | [63, VARCHAR, true] | [64, VARCHAR, true]\n  |  child exprs:\n  |      [65: mock_007, VARCHAR, true] | [66: mock_002, VARCHAR, true] | [67: mock_003, BIGINT, true] | [68: mock_011, VARCHAR, true] | [69: mock_012, BIGINT, true] | [70: mock_017, BIGINT, true] | [71: mock_016, VARCHAR, true] | [72: mock_019, VARCHAR, true] | [73: mock_020, VARCHAR, true] | [74: mock_018, INT, true] | [75: value, VARCHAR, true] | [76: mock_014, FLOAT, true] | [77: expr, VARCHAR, false] | [60: mock_004, DATETIME, false] | [61: mock_005, VARCHAR, true] | [62: mock_008, VARCHAR, true] | [63: mock_006, VARCHAR, true] | [64: mock_009, VARCHAR, true]\n  |      [65: mock_007, VARCHAR, true] | [66: mock_002, VARCHAR, true] | [67: mock_003, BIGINT, true] | [68: mock_011, VARCHAR, true] | [69: mock_012, BIGINT, true] | [70: mock_017, BIGINT, true] | [71: mock_016, VARCHAR, true] | [72: mock_019, VARCHAR, true] | [73: mock_020, VARCHAR, true] | [74: mock_018, INT, true] | [75: value, VARCHAR, true] | [76: mock_014, FLOAT, true] | [77: expr, VARCHAR, false] | [60: mock_004, DATETIME, false] | [61: mock_005, VARCHAR, true] | [62: mock_008, VARCHAR, true] | [63: mock_006, VARCHAR, true] | [64: mock_009, VARCHAR, true]\n  |  pass-through-operands: all\n  |  cardinality: 2\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_017-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_016-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_019-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_020-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_018-->[1.0, 1000000.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * value-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  |----22:EXCHANGE\n  |       limit: 100\n  |       cardinality: 1\n  |    \n  18:EXCHANGE\n     limit: 100\n     cardinality: 1\n\nPLAN FRAGMENT 5(F07)\n\n  Input Partition: RANDOM\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 22\n\n  21:TOP-N\n  |  order by: [60, DATETIME, false] DESC\n  |  build runtime filters:\n  |  - filter_id = 4, build_expr = (<slot 60> 60: mock_004), remote = false\n  |  offset: 0\n  |  limit: 100\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_017-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_016-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_019-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_020-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_018-->[1.0, 1000000.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * value-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  20:Project\n  |  output columns:\n  |  60 <-> [60: mock_004, DATETIME, false]\n  |  61 <-> [61: mock_005, VARCHAR, true]\n  |  62 <-> [62: mock_008, VARCHAR, true]\n  |  63 <-> [63: mock_006, VARCHAR, true]\n  |  64 <-> [64: mock_009, VARCHAR, true]\n  |  65 <-> [65: mock_007, VARCHAR, true]\n  |  66 <-> [66: mock_002, VARCHAR, true]\n  |  67 <-> [67: mock_003, BIGINT, true]\n  |  68 <-> [68: mock_011, VARCHAR, true]\n  |  69 <-> [69: mock_012, BIGINT, true]\n  |  70 <-> [70: mock_017, BIGINT, true]\n  |  71 <-> [71: mock_016, VARCHAR, true]\n  |  72 <-> [72: mock_019, VARCHAR, true]\n  |  73 <-> [73: mock_020, VARCHAR, true]\n  |  74 <-> [74: mock_018, INT, true]\n  |  75 <-> [75: value, VARCHAR, true]\n  |  76 <-> [76: mock_014, FLOAT, true]\n  |  77 <-> 'ERC20'\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_017-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_016-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_019-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_020-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_018-->[1.0, 1000000.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * value-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  19:OlapScanNode\n     table: mock_015, rollup: mock_015\n     preAggregation: on\n     Predicates: [62: mock_008, VARCHAR, true] = '1000', (61: mock_005 != '1000') OR (61: mock_005 IS NULL)\n     partitionsRatio=1/134, tabletsRatio=16/16\n     tabletList=46599,46601,46603,46605,46607,46609,46611,46613,46615,46617 ...\n     actualRows=1000000, avgRowSize=109.777855\n     cardinality: 1\n     probe runtime filters:\n     - filter_id = 4, probe_expr = (60: mock_004)\n     column statistics: \n     * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_017-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_016-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_019-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_020-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_018-->[1.0, 1000000.0, 0.0, 4.0, 1.0] ESTIMATE\n     * value-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 6(F06)\n\n  Input Partition: RANDOM\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 18\n\n  17:TOP-N\n  |  order by: [60, DATETIME, false] DESC\n  |  build runtime filters:\n  |  - filter_id = 3, build_expr = (<slot 60> 60: mock_004), remote = false\n  |  offset: 0\n  |  limit: 100\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_017-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_016-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_019-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_020-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_018-->[1.0, 1000000.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * value-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  16:Project\n  |  output columns:\n  |  60 <-> [60: mock_004, DATETIME, false]\n  |  61 <-> [61: mock_005, VARCHAR, true]\n  |  62 <-> [62: mock_008, VARCHAR, true]\n  |  63 <-> [63: mock_006, VARCHAR, true]\n  |  64 <-> [64: mock_009, VARCHAR, true]\n  |  65 <-> [65: mock_007, VARCHAR, true]\n  |  66 <-> [66: mock_002, VARCHAR, true]\n  |  67 <-> [67: mock_003, BIGINT, true]\n  |  68 <-> [68: mock_011, VARCHAR, true]\n  |  69 <-> [69: mock_012, BIGINT, true]\n  |  70 <-> [70: mock_017, BIGINT, true]\n  |  71 <-> [71: mock_016, VARCHAR, true]\n  |  72 <-> [72: mock_019, VARCHAR, true]\n  |  73 <-> [73: mock_020, VARCHAR, true]\n  |  74 <-> [74: mock_018, INT, true]\n  |  75 <-> [75: value, VARCHAR, true]\n  |  76 <-> [76: mock_014, FLOAT, true]\n  |  77 <-> 'ERC20'\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_017-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_016-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_019-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_020-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_018-->[1.0, 1000000.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * value-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  15:OlapScanNode\n     table: mock_015, rollup: mock_015\n     preAggregation: on\n     Predicates: [61: mock_005, VARCHAR, true] = '1000'\n     partitionsRatio=1/134, tabletsRatio=16/16\n     tabletList=46599,46601,46603,46605,46607,46609,46611,46613,46615,46617 ...\n     actualRows=1000000, avgRowSize=109.777855\n     cardinality: 1\n     probe runtime filters:\n     - filter_id = 3, probe_expr = (60: mock_004)\n     column statistics: \n     * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_017-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_016-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_019-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_020-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_018-->[1.0, 1000000.0, 0.0, 4.0, 1.0] ESTIMATE\n     * value-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 7(F04)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 13\n\n  12:Project\n  |  output columns:\n  |  37 <-> [37: mock_004, DATETIME, false]\n  |  38 <-> [38: mock_005, VARCHAR, true]\n  |  39 <-> [39: mock_008, VARCHAR, true]\n  |  40 <-> [40: mock_006, VARCHAR, true]\n  |  41 <-> [41: mock_009, VARCHAR, true]\n  |  42 <-> [42: mock_007, VARCHAR, true]\n  |  43 <-> [43: mock_002, VARCHAR, true]\n  |  44 <-> [44: mock_003, BIGINT, true]\n  |  45 <-> [45: mock_011, VARCHAR, true]\n  |  46 <-> [46: mock_012, BIGINT, true]\n  |  47 <-> [47: mock_010, VARCHAR, true]\n  |  48 <-> [48: mock_013, VARCHAR, true]\n  |  50 <-> [50: mock_014, FLOAT, true]\n  |  55 <-> cast([51: expr, BOOLEAN, true] as VARCHAR(65533))\n  |  56 <-> [52: expr, VARCHAR, false]\n  |  57 <-> [53: expr, VARCHAR, false]\n  |  58 <-> cast([54: expr, TINYINT, false] as INT)\n  |  59 <-> cast([49: value, DECIMAL128(38,0), true] as VARCHAR(65533))\n  |  limit: 100\n  |  cardinality: 2\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_013-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * cast-->[18.0, 18.0, 0.0, 4.0, 1.0] ESTIMATE\n  |  * cast-->[1.0, 1000000.0, 0.0, 16.0, 1.0] ESTIMATE\n  |  \n  11:MERGING-EXCHANGE\n     distribution mock_013: GATHER\n     limit: 100\n     cardinality: 2\n     column statistics: \n     * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_010-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_013-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * value-->[1.0, 1000000.0, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * expr-->[18.0, 18.0, 0.0, 1.0, 1.0] ESTIMATE\n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * cast-->[18.0, 18.0, 0.0, 4.0, 1.0] ESTIMATE\n     * cast-->[1.0, 1000000.0, 0.0, 16.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 8(F01)\n\n  Input Partition: RANDOM\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 11\n\n  10:TOP-N\n  |  order by: [37, DATETIME, false] DESC\n  |  offset: 0\n  |  limit: 100\n  |  cardinality: 2\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_013-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * value-->[1.0, 1000000.0, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[18.0, 18.0, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  1:UNION\n  |  output exprs:\n  |      [37, DATETIME, false] | [38, VARCHAR, true] | [39, VARCHAR, true] | [40, VARCHAR, true] | [41, VARCHAR, true] | [42, VARCHAR, true] | [43, VARCHAR, true] | [44, BIGINT, true] | [45, VARCHAR, true] | [46, BIGINT, true] | [47, VARCHAR, true] | [48, VARCHAR, true] | [49, DECIMAL128(38,0), true] | [50, FLOAT, true] | [51, BOOLEAN, true] | [52, VARCHAR, false] | [53, VARCHAR, false] | [54, TINYINT, false]\n  |  child exprs:\n  |      [37: mock_004, DATETIME, false] | [38: mock_005, VARCHAR, true] | [39: mock_008, VARCHAR, true] | [40: mock_006, VARCHAR, true] | [41: mock_009, VARCHAR, true] | [42: mock_007, VARCHAR, true] | [43: mock_002, VARCHAR, true] | [44: mock_003, BIGINT, true] | [45: mock_011, VARCHAR, true] | [46: mock_012, BIGINT, true] | [47: mock_010, VARCHAR, true] | [48: mock_013, VARCHAR, true] | [49: value, DECIMAL128(38,0), true] | [50: mock_014, FLOAT, true] | [51: expr, BOOLEAN, true] | [52: expr, VARCHAR, false] | [53: expr, VARCHAR, false] | [54: expr, TINYINT, false]\n  |      [37: mock_004, DATETIME, false] | [38: mock_005, VARCHAR, true] | [39: mock_008, VARCHAR, true] | [40: mock_006, VARCHAR, true] | [41: mock_009, VARCHAR, true] | [42: mock_007, VARCHAR, true] | [43: mock_002, VARCHAR, true] | [44: mock_003, BIGINT, true] | [45: mock_011, VARCHAR, true] | [46: mock_012, BIGINT, true] | [47: mock_010, VARCHAR, true] | [48: mock_013, VARCHAR, true] | [49: value, DECIMAL128(38,0), true] | [50: mock_014, FLOAT, true] | [51: expr, BOOLEAN, true] | [52: expr, VARCHAR, false] | [53: expr, VARCHAR, false] | [54: expr, TINYINT, false]\n  |  pass-through-operands: all\n  |  cardinality: 2\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_013-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * value-->[1.0, 1000000.0, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[18.0, 18.0, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  |----9:EXCHANGE\n  |       limit: 100\n  |       cardinality: 1\n  |    \n  5:EXCHANGE\n     limit: 100\n     cardinality: 1\n\nPLAN FRAGMENT 9(F03)\n\n  Input Partition: RANDOM\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 09\n\n  8:TOP-N\n  |  order by: [37, DATETIME, false] DESC\n  |  build runtime filters:\n  |  - filter_id = 1, build_expr = (<slot 37> 37: mock_004), remote = false\n  |  offset: 0\n  |  limit: 100\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_013-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * value-->[1.0, 1000000.0, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[18.0, 18.0, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  7:Project\n  |  output columns:\n  |  37 <-> [37: mock_004, DATETIME, false]\n  |  38 <-> [38: mock_005, VARCHAR, true]\n  |  39 <-> [39: mock_008, VARCHAR, true]\n  |  40 <-> [40: mock_006, VARCHAR, true]\n  |  41 <-> [41: mock_009, VARCHAR, true]\n  |  42 <-> [42: mock_007, VARCHAR, true]\n  |  43 <-> [43: mock_002, VARCHAR, true]\n  |  44 <-> [44: mock_003, BIGINT, true]\n  |  45 <-> [45: mock_011, VARCHAR, true]\n  |  46 <-> [46: mock_012, BIGINT, true]\n  |  47 <-> [47: mock_010, VARCHAR, true]\n  |  48 <-> [48: mock_013, VARCHAR, true]\n  |  49 <-> [49: value, DECIMAL128(38,0), true]\n  |  50 <-> [50: mock_014, FLOAT, true]\n  |  51 <-> NULL\n  |  52 <-> 'Ether'\n  |  53 <-> 'ETH'\n  |  54 <-> 18\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_013-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * value-->[1.0, 1000000.0, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[18.0, 18.0, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  6:OlapScanNode\n     table: mock_001, rollup: mock_001\n     preAggregation: on\n     Predicates: [39: mock_008, VARCHAR, true] = '1000', (38: mock_005 != '1000') OR (38: mock_005 IS NULL)\n     partitionsRatio=1/134, tabletsRatio=16/16\n     tabletList=51023,51025,51027,51029,51031,51033,51035,51037,51039,51041 ...\n     actualRows=1000000, avgRowSize=105.00006\n     cardinality: 1\n     probe runtime filters:\n     - filter_id = 1, probe_expr = (37: mock_004)\n     column statistics: \n     * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_010-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_013-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * value-->[1.0, 1000000.0, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * expr-->[18.0, 18.0, 0.0, 1.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 10(F02)\n\n  Input Partition: RANDOM\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 05\n\n  4:TOP-N\n  |  order by: [37, DATETIME, false] DESC\n  |  build runtime filters:\n  |  - filter_id = 0, build_expr = (<slot 37> 37: mock_004), remote = false\n  |  offset: 0\n  |  limit: 100\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_013-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * value-->[1.0, 1000000.0, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[18.0, 18.0, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  3:Project\n  |  output columns:\n  |  37 <-> [37: mock_004, DATETIME, false]\n  |  38 <-> [38: mock_005, VARCHAR, true]\n  |  39 <-> [39: mock_008, VARCHAR, true]\n  |  40 <-> [40: mock_006, VARCHAR, true]\n  |  41 <-> [41: mock_009, VARCHAR, true]\n  |  42 <-> [42: mock_007, VARCHAR, true]\n  |  43 <-> [43: mock_002, VARCHAR, true]\n  |  44 <-> [44: mock_003, BIGINT, true]\n  |  45 <-> [45: mock_011, VARCHAR, true]\n  |  46 <-> [46: mock_012, BIGINT, true]\n  |  47 <-> [47: mock_010, VARCHAR, true]\n  |  48 <-> [48: mock_013, VARCHAR, true]\n  |  49 <-> [49: value, DECIMAL128(38,0), true]\n  |  50 <-> [50: mock_014, FLOAT, true]\n  |  51 <-> NULL\n  |  52 <-> 'Ether'\n  |  53 <-> 'ETH'\n  |  54 <-> 18\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * mock_013-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n  |  * value-->[1.0, 1000000.0, 0.0, 16.0, 1.0] ESTIMATE\n  |  * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * expr-->[18.0, 18.0, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  2:OlapScanNode\n     table: mock_001, rollup: mock_001\n     preAggregation: on\n     Predicates: [38: mock_005, VARCHAR, true] = '1000'\n     partitionsRatio=1/134, tabletsRatio=16/16\n     tabletList=51023,51025,51027,51029,51031,51033,51035,51037,51039,51041 ...\n     actualRows=1000000, avgRowSize=105.00006\n     cardinality: 1\n     probe runtime filters:\n     - filter_id = 0, probe_expr = (37: mock_004)\n     column statistics: \n     * mock_004-->[1.4200416E9, 1.4200416E9, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_005-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_008-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_006-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_009-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_007-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_002-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_003-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_011-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_012-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * mock_010-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * mock_013-->[-Infinity, Infinity, 0.0, 5.888896, 1.0] ESTIMATE\n     * value-->[1.0, 1000000.0, 0.0, 16.0, 1.0] ESTIMATE\n     * mock_014-->[1.0, 1000000.0, 0.0, 8.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n     * expr-->[18.0, 18.0, 0.0, 1.0, 1.0] ESTIMATE\n",
    "session_variables":"{\"partial_update_mode\":\"auto\",\"cbo_cte_reuse\":true,\"character_set_connection\":\"utf8\",\"cbo_use_correlated_join_estimate\":true,\"enable_insert_strict\":true,\"enable_connector_adaptive_io_tasks\":true,\"tx_isolation\":\"REPEATABLE-READ\",\"enable_hive_metadata_cache_with_insert\":false,\"hive_temp_staging_dir\":\"/tmp/starrocks\",\"cbo_cte_reuse_rate_v2\":1.15,\"character_set_results\":\"utf8\",\"enable_count_star_optimization\":true,\"thrift_plan_protocol\":\"binary\",\"query_excluding_mv_names\":\"\",\"enable_rewrite_simple_agg_to_meta_scan\":false,\"enable_adaptive_sink_dop\":true,\"consistent_hash_virtual_number\":32,\"enable_profile\":false,\"load_mem_limit\":0,\"large_decimal_underlying_type\":\"panic\",\"sql_safe_updates\":0,\"runtime_filter_early_return_selectivity\":0.05,\"enable_local_shuffle_agg\":true,\"disable_function_fold_constants\":false,\"select_ratio_threshold\":0.15,\"query_delivery_timeout\":300,\"collation_database\":\"utf8_general_ci\",\"spill_mem_table_size\":104857600,\"cbo_use_lock_db\":false,\"new_planner_agg_stage\":0,\"use_compute_nodes\":-1,\"collation_connection\":\"utf8_general_ci\",\"resource_group\":\"\",\"profile_limit_fold\":true,\"enable_materialized_view_plan_cache\":true,\"spill_operator_max_bytes\":1048576000,\"cbo_max_reorder_node_use_dp\":10,\"enable_hive_column_stats\":true,\"enable_groupby_use_output_alias\":false,\"forward_to_leader\":false,\"count_distinct_column_buckets\":1024,\"query_cache_agg_cardinality_limit\":5000000,\"cboPushDownAggregateMode_v1\":-1,\"window_partition_mode\":1,\"enable_tablet_internal_parallel_v2\":true,\"interpolate_passthrough\":true,\"enable_incremental_mv\":false,\"cbo_push_down_topn_limit\":1000,\"SQL_AUTO_IS_NULL\":false,\"event_scheduler\":\"OFF\",\"max_pipeline_dop\":64,\"broadcast_right_table_scale_factor\":10,\"materialized_view_rewrite_mode\":\"DEFAULT\",\"enable_simplify_case_when\":true,\"runtime_join_filter_push_down_limit\":1024000,\"trace_log_mode\":\"command\",\"big_query_log_cpu_second_threshold\":480,\"div_precision_increment\":4,\"runtime_adaptive_dop_max_block_rows_per_driver_seq\":16384,\"log_rejected_record_num\":0,\"cbo_push_down_distinct_below_window\":true,\"sql_mode_v2\":32,\"prefer_cte_rewrite\":false,\"hdfs_backend_selector_scan_range_shuffle\":false,\"pipeline_profile_level\":1,\"parallel_fragment_exec_instance_num\":1,\"max_scan_key_num\":-1,\"net_read_timeout\":60,\"streaming_preaggregation_mode\":\"auto\",\"hive_partition_stats_sample_size\":3000,\"enable_mv_planner\":false,\"enable_collect_table_level_scan_stats\":true,\"profile_timeout\":2,\"cbo_push_down_aggregate\":\"global\",\"spill_encode_level\":7,\"enable_query_dump\":false,\"global_runtime_filter_build_max_size\":67108864,\"enable_rewrite_sum_by_associative_rule\":true,\"query_cache_hot_partition_num\":3,\"enable_prune_complex_types\":true,\"query_cache_type\":0,\"max_parallel_scan_instance_num\":-1,\"query_cache_entry_max_rows\":409600,\"connector_io_tasks_per_scan_operator\":16,\"enable_materialized_view_union_rewrite\":true,\"sql_quote_show_create\":true,\"scan_or_to_union_threshold\":50000000,\"enable_exchange_pass_through\":true,\"runtime_profile_report_interval\":10,\"query_cache_entry_max_bytes\":4194304,\"interleaving_group_size\":10,\"enable_exchange_perf\":false,\"workgroup_id\":0,\"enable_rewrite_groupingsets_to_union_all\":false,\"transmission_compression_type\":\"NO_COMPRESSION\",\"interactive_timeout\":3600,\"use_page_cache\":true,\"big_query_log_scan_bytes_threshold\":10737418240,\"collation_server\":\"utf8_general_ci\",\"cbo_enable_predicate_subfield_path\":true,\"tablet_internal_parallel_mode\":\"auto\",\"enable_pipeline\":true,\"spill_mode\":\"auto\",\"enable_per_bucket_optmize\":true,\"enable_query_debug_trace\":false,\"enable_show_all_variables\":false,\"full_sort_max_buffered_bytes\":16777216,\"wait_timeout\":28800,\"max_buckets_per_be_to_use_balancer_assignment\":6,\"transmission_encode_level\":7,\"query_including_mv_names\":\"\",\"transaction_isolation\":\"REPEATABLE-READ\",\"enable_global_runtime_filter\":true,\"enable_load_profile\":false,\"enable_plan_validation\":true,\"load_transmission_compression_type\":\"NO_COMPRESSION\",\"cbo_enable_low_cardinality_optimize\":true,\"scan_use_query_mem_ratio\":0.3,\"new_planner_optimize_timeout\":3000,\"enable_outer_join_reorder\":true,\"force_schedule_local\":false,\"hudi_mor_force_jni_reader\":false,\"enable_agg_spill_preaggregation\":true,\"cbo_enable_greedy_join_reorder\":true,\"range_pruner_max_predicate\":100,\"enable_rbo_table_prune\":false,\"spillable_operator_mask\":-1,\"rpc_http_min_size\":2147482624,\"cbo_debug_alive_backend_number\":0,\"global_runtime_filter_probe_min_size\":102400,\"scan_or_to_union_limit\":4,\"enable_cbo_table_prune\":false,\"enable_parallel_merge\":true,\"nested_mv_rewrite_max_level\":3,\"net_write_timeout\":60,\"cbo_prune_shuffle_column_rate\":0.1,\"spill_revocable_max_bytes\":0,\"hash_join_push_down_right_table\":true,\"pipeline_sink_dop\":0,\"broadcast_row_limit\":15000000,\"enable_populate_block_cache\":true,\"enable_prune_iceberg_manifest\":true,\"exec_mem_limit\":2147483648,\"enable_sort_aggregate\":false,\"query_cache_force_populate\":false,\"runtime_filter_on_exchange_node\":false,\"disable_join_reorder\":false,\"enable_rule_based_materialized_view_rewrite\":true,\"connector_scan_use_query_mem_ratio\":0.3,\"net_buffer_length\":16384,\"cbo_prune_subfield\":true,\"full_sort_max_buffered_rows\":1024000,\"query_timeout\":300,\"connector_io_tasks_slow_io_latency_ms\":50,\"cbo_max_reorder_node\":50,\"enable_distinct_column_bucketization\":false,\"enable_big_query_log\":true,\"analyze_mv\":\"sample\",\"runtime_filter_scan_wait_time\":20,\"enable_sync_materialized_view_rewrite\":true,\"prefer_compute_node\":false,\"enable_strict_type\":false,\"enable_table_prune_on_update\":false,\"group_concat_max_len\":1024,\"parse_tokens_limit\":3500000,\"chunk_size\":4096,\"global_runtime_filter_probe_min_selectivity\":0.5,\"query_mem_limit\":0,\"enable_filter_unused_columns_in_scan_stage\":true,\"enable_scan_block_cache\":false,\"enable_materialized_view_single_table_view_delta_rewrite\":false,\"auto_increment_increment\":1,\"sql_dialect\":\"StarRocks\",\"big_query_log_scan_rows_threshold\":1000000000,\"character_set_client\":\"utf8\",\"autocommit\":true,\"enable_column_expr_predicate\":true,\"enable_runtime_adaptive_dop\":false,\"cbo_cte_max_limit\":10,\"storage_engine\":\"olap\",\"spill_operator_min_bytes\":52428800,\"cbo_enable_dp_join_reorder\":true,\"tx_visible_wait_timeout\":10,\"enable_materialized_view_view_delta_rewrite\":true,\"cbo_max_reorder_node_use_exhaustive\":4,\"enable_sql_digest\":false,\"spill_mem_table_num\":2,\"enable_spill\":false,\"enable_materialized_view_rewrite_greedy_mode\":false,\"pipeline_dop\":0,\"single_node_exec_plan\":false,\"query_cache_deny_oversize_result\":true,\"full_sort_late_materialization_v2\":true,\"join_implementation_mode_v2\":\"auto\",\"sql_select_limit\":9223372036854775807,\"enable_materialized_view_rewrite\":true,\"statistic_collect_parallel\":1,\"hdfs_backend_selector_hash_algorithm\":\"consistent\",\"enable_expr_prune_partition\":true,\"disable_colocate_join\":false,\"max_pushdown_conditions_per_column\":-1,\"default_table_compression\":\"lz4_frame\",\"runtime_adaptive_dop_max_output_amplification_factor\":0,\"enable_query_cache_v2\":true,\"innodb_read_only\":true,\"spill_mem_limit_threshold\":0.8,\"cbo_reorder_threshold_use_exhaustive\":6,\"enable_predicate_reorder\":false,\"max_allowed_packet\":33554432,\"time_zone\":\"Asia/Shanghai\",\"enable_multicolumn_global_runtime_filter\":false,\"character_set_server\":\"utf8\",\"cbo_use_nth_exec_plan\":0,\"io_tasks_per_scan_operator\":4,\"parallel_exchange_instance_num\":-1,\"enable_shared_scan\":false,\"audit_execute_stmt\":false,\"allow_default_partition\":false}",
    "be_number":1,
    "be_core_stat":{
        "numOfHardwareCoresPerBe":"{\"10005\":104}",
        "cachedAvgNumOfHardwareCores":104
    },
    "exception":[

    ],
    "version":"UNKNOWN",
    "commit_version":"UNKNOWN"
}