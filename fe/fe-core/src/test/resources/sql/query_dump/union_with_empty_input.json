{"statement":"SELECT tbl_mock_136.mock_097, tbl_mock_136.mock_098, tbl_mock_136.mock_099, tbl_mock_136.mock_100, tbl_mock_136.mock_101, tbl_mock_136.mock_102, tbl_mock_136.mock_103, tbl_mock_136.mock_104, tbl_mock_136.mock_105, tbl_mock_136.mock_106, tbl_mock_136.mock_107, tbl_mock_136.mock_108, tbl_mock_136.mock_109, tbl_mock_136.mock_110, tbl_mock_136.mock_111, tbl_mock_136.mock_112, tbl_mock_136.mock_113, tbl_mock_136.mock_114, tbl_mock_136.mock_115, tbl_mock_136.mock_116, tbl_mock_136.mock_117, tbl_mock_136.mock_118, tbl_mock_136.mock_119, tbl_mock_136.mock_120, tbl_mock_136.mock_121, tbl_mock_136.mock_122, tbl_mock_136.mock_123, tbl_mock_136.mock_124, tbl_mock_136.mock_125, tbl_mock_136.mock_126, tbl_mock_136.mock_127, tbl_mock_136.mock_128, tbl_mock_136.mock_129, tbl_mock_136.mock_130, tbl_mock_136.mock_131, tbl_mock_136.mock_132, tbl_mock_136.mock_133, tbl_mock_136.mock_134, tbl_mock_136.mock_135\nFROM (SELECT tbl_mock_141.mock_040 AS mock_097, tbl_mock_141.mock_137 AS mock_098, sum(tbl_mock_141.mock_009) AS mock_099, (sum(tbl_mock_141.mock_009)) / (sum(tbl_mock_141.mock_041)) AS mock_100, sum(tbl_mock_141.mock_008) AS mock_101, sum(tbl_mock_141.mock_007) AS mock_102, ((sum(tbl_mock_141.mock_008)) / (sum(tbl_mock_141.mock_007))) - 1 AS mock_103, sum(tbl_mock_141.mock_004) AS mock_104, sum(tbl_mock_141.mock_006) AS mock_105, (sum(tbl_mock_141.mock_004)) / (sum(tbl_mock_141.mock_005)) AS mock_106, (sum(tbl_mock_141.mock_004)) / (max(tbl_mock_141.mock_138)) AS mock_107, ((sum(tbl_mock_141.mock_004)) / (sum(tbl_mock_141.mock_006))) - 1 AS mock_108, (sum(tbl_mock_141.mock_025)) / (sum(CASE WHEN (tbl_mock_141.mock_025 = 0) THEN 0 ELSE tbl_mock_141.mock_004 END)) AS mock_109, ((sum(tbl_mock_141.mock_025)) / (sum(CASE WHEN (tbl_mock_141.mock_025 = 0) THEN 0 ELSE tbl_mock_141.mock_004 END))) - ((((((sum(tbl_mock_141.mock_023)) - (-1 * (abs(sum(tbl_mock_141.mock_050))))) - (-1 * (abs(sum(tbl_mock_141.mock_018))))) - (-1 * (abs(sum(tbl_mock_141.mock_043))))) - (abs(sum(tbl_mock_141.mock_011)))) / (if((((((sum(tbl_mock_141.mock_023)) - (-1 * (abs(sum(tbl_mock_141.mock_050))))) - (-1 * (abs(sum(tbl_mock_141.mock_018))))) - (-1 * (abs(sum(tbl_mock_141.mock_043))))) - (abs(sum(tbl_mock_141.mock_011)))) = 0, 0, sum(tbl_mock_141.mock_005)))) AS mock_110, ((sum(tbl_mock_141.mock_025)) / (sum(CASE WHEN (tbl_mock_141.mock_025 = 0) THEN 0 ELSE tbl_mock_141.mock_004 END))) - ((sum(tbl_mock_141.mock_027)) / (sum(CASE WHEN (tbl_mock_141.mock_027 = 0) THEN 0 ELSE tbl_mock_141.mock_006 END))) AS mock_111, (sum(tbl_mock_141.mock_010)) / (sum(tbl_mock_141.mock_004)) AS mock_112, ((sum(tbl_mock_141.mock_010)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_011)) / (sum(tbl_mock_141.mock_005))) AS mock_113, ((sum(tbl_mock_141.mock_010)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_012)) / (sum(tbl_mock_141.mock_006))) AS mock_114, (sum(tbl_mock_141.mock_042)) / (sum(tbl_mock_141.mock_004)) AS mock_115, ((sum(tbl_mock_141.mock_042)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_043)) / (sum(tbl_mock_141.mock_005))) AS mock_116, ((sum(tbl_mock_141.mock_042)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_044)) / (sum(tbl_mock_141.mock_006))) AS mock_117, (sum(tbl_mock_141.mock_017)) / (sum(tbl_mock_141.mock_004)) AS mock_118, ((sum(tbl_mock_141.mock_017)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_018)) / (sum(tbl_mock_141.mock_005))) AS mock_119, ((sum(tbl_mock_141.mock_017)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_019)) / (sum(tbl_mock_141.mock_006))) AS mock_120, (sum(tbl_mock_141.mock_049)) / (sum(tbl_mock_141.mock_004)) AS mock_121, ((sum(tbl_mock_141.mock_049)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_050)) / (sum(tbl_mock_141.mock_005))) AS mock_122, ((sum(tbl_mock_141.mock_049)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_051)) / (sum(tbl_mock_141.mock_006))) AS mock_123, (((sum(tbl_mock_141.mock_042)) / (sum(tbl_mock_141.mock_004))) + ((sum(tbl_mock_141.mock_017)) / (sum(tbl_mock_141.mock_004)))) + ((sum(tbl_mock_141.mock_049)) / (sum(tbl_mock_141.mock_004))) AS mock_124, ((((sum(tbl_mock_141.mock_042)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_043)) / (sum(tbl_mock_141.mock_005)))) + (((sum(tbl_mock_141.mock_017)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_018)) / (sum(tbl_mock_141.mock_005))))) + (((sum(tbl_mock_141.mock_049)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_050)) / (sum(tbl_mock_141.mock_005)))) AS mock_125, ((((sum(tbl_mock_141.mock_042)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_044)) / (sum(tbl_mock_141.mock_006)))) + (((sum(tbl_mock_141.mock_017)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_019)) / (sum(tbl_mock_141.mock_006))))) + (((sum(tbl_mock_141.mock_049)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_051)) / (sum(tbl_mock_141.mock_006)))) AS mock_126, (sum(tbl_mock_141.mock_022)) / (sum(tbl_mock_141.mock_004)) AS mock_127, ((sum(tbl_mock_141.mock_022)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_023)) / (sum(tbl_mock_141.mock_005))) AS mock_128, ((sum(tbl_mock_141.mock_022)) / (sum(tbl_mock_141.mock_004))) - ((sum(tbl_mock_141.mock_024)) / (sum(tbl_mock_141.mock_006))) AS mock_129, sum(tbl_mock_141.mock_032) AS mock_130, (sum(tbl_mock_141.mock_032)) / (sum(tbl_mock_141.mock_004)) AS mock_131, sum(tbl_mock_141.mock_048) AS mock_132, sum(tbl_mock_141.mock_033) AS mock_133, (sum(tbl_mock_141.mock_048)) / (sum(tbl_mock_141.mock_033)) AS mock_134, (sum(tbl_mock_141.mock_004)) / (sum(tbl_mock_141.mock_033)) AS mock_135\nFROM (SELECT *\nFROM (SELECT db_mock_059.tbl_mock_150.mock_040, concat(db_mock_000.tbl_mock_147.mock_014, ' ', db_mock_059.tbl_mock_150.mock_076) AS mock_137, db_mock_000.tbl_mock_147.mock_039 AS mock_139, coalesce(db_mock_059.tbl_mock_148.mock_072, 'none') AS mock_140, db_mock_000.tbl_mock_147.mock_004, db_mock_000.tbl_mock_147.mock_005, db_mock_000.tbl_mock_147.mock_009, db_mock_000.tbl_mock_147.mock_008, db_mock_000.tbl_mock_147.mock_007, db_mock_000.tbl_mock_147.mock_030, db_mock_000.tbl_mock_147.mock_028, db_mock_000.tbl_mock_147.mock_002, db_mock_000.tbl_mock_147.mock_025, db_mock_000.tbl_mock_147.mock_026, db_mock_000.tbl_mock_147.mock_042, db_mock_000.tbl_mock_147.mock_043, db_mock_000.tbl_mock_147.mock_017, db_mock_000.tbl_mock_147.mock_018, db_mock_000.tbl_mock_147.mock_055, db_mock_000.tbl_mock_147.mock_056, db_mock_000.tbl_mock_147.mock_034, db_mock_000.tbl_mock_147.mock_045, db_mock_000.tbl_mock_147.mock_049, 0 - db_mock_000.tbl_mock_147.mock_050 AS mock_050, db_mock_000.tbl_mock_147.mock_010, db_mock_000.tbl_mock_147.mock_011, db_mock_000.tbl_mock_147.mock_053, db_mock_000.tbl_mock_147.mock_015, db_mock_000.tbl_mock_147.mock_022, db_mock_000.tbl_mock_147.mock_023, db_mock_000.tbl_mock_147.mock_006, db_mock_000.tbl_mock_147.mock_031, db_mock_000.tbl_mock_147.mock_029, db_mock_000.tbl_mock_147.mock_003, db_mock_000.tbl_mock_147.mock_027, db_mock_000.tbl_mock_147.mock_044, db_mock_000.tbl_mock_147.mock_019, db_mock_000.tbl_mock_147.mock_057, db_mock_000.tbl_mock_147.mock_035, db_mock_000.tbl_mock_147.mock_046, db_mock_000.tbl_mock_147.mock_051, db_mock_000.tbl_mock_147.mock_037, db_mock_000.tbl_mock_147.mock_012, db_mock_000.tbl_mock_147.mock_054, db_mock_000.tbl_mock_147.mock_016, db_mock_000.tbl_mock_147.mock_024, CASE WHEN (db_mock_000.tbl_mock_147.mock_039 IN ('6558', '6758')) THEN 0 ELSE db_mock_000.tbl_mock_147.mock_048 END AS mock_048, db_mock_000.tbl_mock_147.mock_032, db_mock_000.tbl_mock_147.mock_033, db_mock_000.tbl_mock_147.mock_041, db_mock_000.tbl_mock_147.mock_038, tbl_mock_149.mock_138\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_147 LEFT OUTER JOIN db_mock_059.tbl_mock_060 AS tbl_mock_148 ON db_mock_000.tbl_mock_147.mock_039 = db_mock_059.tbl_mock_148.mock_039 CROSS JOIN (SELECT sum(db_mock_000.tbl_mock_147.mock_038) AS mock_138\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_147 LEFT OUTER JOIN db_mock_059.tbl_mock_060 AS tbl_mock_148 ON db_mock_000.tbl_mock_147.mock_039 = db_mock_059.tbl_mock_148.mock_039\nWHERE ((((('ALL' IN ('202505')) OR (db_mock_000.tbl_mock_147.mock_047 >= '202505')) AND (('ALL' IN ('202504')) OR (db_mock_000.tbl_mock_147.mock_047 <= '202504'))) AND (('ALL' IN ('ALL')) OR ((coalesce(db_mock_059.tbl_mock_148.mock_072, 'none')) IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_039 IN ('ALL')))) AND (db_mock_000.tbl_mock_147.mock_014 = 'SamChina')) tbl_mock_149  LEFT OUTER JOIN db_mock_059.tbl_mock_075 AS tbl_mock_150 ON db_mock_000.tbl_mock_147.mock_014 = (lpad(db_mock_059.tbl_mock_150.mock_077, 2, 0))\nWHERE ((((((('ALL' IN ('202505')) OR (db_mock_000.tbl_mock_147.mock_047 >= '202505')) AND (('ALL' IN ('202504')) OR (db_mock_000.tbl_mock_147.mock_047 <= '202504'))) AND (('ALL' IN ('ALL')) OR ((coalesce(db_mock_059.tbl_mock_148.mock_072, 'none')) IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_039 IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_014 IN ('ALL')))) AND ((((((((((((((((((((((((((((((((((((((((((((((((abs(db_mock_000.tbl_mock_147.mock_004)) + (abs(db_mock_000.tbl_mock_147.mock_005))) + (abs(db_mock_000.tbl_mock_147.mock_009))) + (abs(db_mock_000.tbl_mock_147.mock_008))) + (abs(db_mock_000.tbl_mock_147.mock_007))) + (abs(db_mock_000.tbl_mock_147.mock_030))) + (abs(db_mock_000.tbl_mock_147.mock_028))) + (abs(db_mock_000.tbl_mock_147.mock_002))) + (abs(db_mock_000.tbl_mock_147.mock_025))) + (abs(db_mock_000.tbl_mock_147.mock_026))) + (abs(db_mock_000.tbl_mock_147.mock_042))) + (abs(db_mock_000.tbl_mock_147.mock_043))) + (abs(db_mock_000.tbl_mock_147.mock_017))) + (abs(db_mock_000.tbl_mock_147.mock_018))) + (abs(db_mock_000.tbl_mock_147.mock_055))) + (abs(db_mock_000.tbl_mock_147.mock_056))) + (abs(db_mock_000.tbl_mock_147.mock_034))) + (abs(db_mock_000.tbl_mock_147.mock_045))) + (abs(db_mock_000.tbl_mock_147.mock_049))) + (abs(db_mock_000.tbl_mock_147.mock_050))) + (abs(db_mock_000.tbl_mock_147.mock_010))) + (abs(db_mock_000.tbl_mock_147.mock_011))) + (abs(db_mock_000.tbl_mock_147.mock_053))) + (abs(db_mock_000.tbl_mock_147.mock_015))) + (abs(db_mock_000.tbl_mock_147.mock_022))) + (abs(db_mock_000.tbl_mock_147.mock_023))) + (abs(db_mock_000.tbl_mock_147.mock_006))) + (abs(db_mock_000.tbl_mock_147.mock_031))) + (abs(db_mock_000.tbl_mock_147.mock_029))) + (abs(db_mock_000.tbl_mock_147.mock_003))) + (abs(db_mock_000.tbl_mock_147.mock_027))) + (abs(db_mock_000.tbl_mock_147.mock_044))) + (abs(db_mock_000.tbl_mock_147.mock_019))) + (abs(db_mock_000.tbl_mock_147.mock_057))) + (abs(db_mock_000.tbl_mock_147.mock_035))) + (abs(db_mock_000.tbl_mock_147.mock_046))) + (abs(db_mock_000.tbl_mock_147.mock_051))) + (abs(db_mock_000.tbl_mock_147.mock_037))) + (abs(db_mock_000.tbl_mock_147.mock_012))) + (abs(db_mock_000.tbl_mock_147.mock_054))) + (abs(db_mock_000.tbl_mock_147.mock_016))) + (abs(db_mock_000.tbl_mock_147.mock_024))) + (abs(db_mock_000.tbl_mock_147.mock_048))) + (abs(db_mock_000.tbl_mock_147.mock_032))) + (abs(db_mock_000.tbl_mock_147.mock_033))) + (abs(coalesce(db_mock_000.tbl_mock_147.mock_041, 0)))) + (abs(coalesce(db_mock_000.tbl_mock_147.mock_038, 0)))) != 0)) AND ((0 = ((SELECT count(1)\nFROM (SELECT db_mock_059.tbl_mock_087.mock_089, db_mock_059.tbl_mock_087.mock_093, CASE WHEN (db_mock_059.tbl_mock_087.mock_095 = 'c0z00u4') THEN '' ELSE db_mock_059.tbl_mock_087.mock_095 END AS mock_095\nFROM db_mock_059.tbl_mock_087) tbl_mock_144\nWHERE (tbl_mock_144.mock_089 = 'Sams品类结构') AND ((upper(tbl_mock_144.mock_095)) = (upper('H0Y03FZ')))))) OR ((upper(lpad(db_mock_059.tbl_mock_150.mock_077, 2, 0))) IN (((SELECT upper(lpad(tbl_mock_144.mock_093, 2, 0))\nFROM (SELECT db_mock_059.tbl_mock_087.mock_089, db_mock_059.tbl_mock_087.mock_093, CASE WHEN (db_mock_059.tbl_mock_087.mock_095 = 'c0z00u4') THEN '' ELSE db_mock_059.tbl_mock_087.mock_095 END AS mock_095\nFROM db_mock_059.tbl_mock_087) tbl_mock_144\nWHERE (tbl_mock_144.mock_089 = 'Sams品类结构') AND ((upper(tbl_mock_144.mock_095)) = (upper('H0Y03FZ')))))))) UNION ALL SELECT db_mock_059.tbl_mock_150.mock_040, '小计' AS mock_137, db_mock_000.tbl_mock_147.mock_039 AS mock_139, coalesce(db_mock_059.tbl_mock_148.mock_072, 'none') AS mock_140, db_mock_000.tbl_mock_147.mock_004, db_mock_000.tbl_mock_147.mock_005, db_mock_000.tbl_mock_147.mock_009, db_mock_000.tbl_mock_147.mock_008, db_mock_000.tbl_mock_147.mock_007, db_mock_000.tbl_mock_147.mock_030, db_mock_000.tbl_mock_147.mock_028, db_mock_000.tbl_mock_147.mock_002, db_mock_000.tbl_mock_147.mock_025, db_mock_000.tbl_mock_147.mock_026, db_mock_000.tbl_mock_147.mock_042, db_mock_000.tbl_mock_147.mock_043, db_mock_000.tbl_mock_147.mock_017, db_mock_000.tbl_mock_147.mock_018, db_mock_000.tbl_mock_147.mock_055, db_mock_000.tbl_mock_147.mock_056, db_mock_000.tbl_mock_147.mock_034, db_mock_000.tbl_mock_147.mock_045, db_mock_000.tbl_mock_147.mock_049, 0 - db_mock_000.tbl_mock_147.mock_050 AS mock_050, db_mock_000.tbl_mock_147.mock_010, db_mock_000.tbl_mock_147.mock_011, db_mock_000.tbl_mock_147.mock_053, db_mock_000.tbl_mock_147.mock_015, db_mock_000.tbl_mock_147.mock_022, db_mock_000.tbl_mock_147.mock_023, db_mock_000.tbl_mock_147.mock_006, db_mock_000.tbl_mock_147.mock_031, db_mock_000.tbl_mock_147.mock_029, db_mock_000.tbl_mock_147.mock_003, db_mock_000.tbl_mock_147.mock_027, db_mock_000.tbl_mock_147.mock_044, db_mock_000.tbl_mock_147.mock_019, db_mock_000.tbl_mock_147.mock_057, db_mock_000.tbl_mock_147.mock_035, db_mock_000.tbl_mock_147.mock_046, db_mock_000.tbl_mock_147.mock_051, db_mock_000.tbl_mock_147.mock_037, db_mock_000.tbl_mock_147.mock_012, db_mock_000.tbl_mock_147.mock_054, db_mock_000.tbl_mock_147.mock_016, db_mock_000.tbl_mock_147.mock_024, CASE WHEN (db_mock_000.tbl_mock_147.mock_039 IN ('6558', '6758')) THEN 0 ELSE db_mock_000.tbl_mock_147.mock_048 END AS mock_048, db_mock_000.tbl_mock_147.mock_032, db_mock_000.tbl_mock_147.mock_033, db_mock_000.tbl_mock_147.mock_041, db_mock_000.tbl_mock_147.mock_038, tbl_mock_149.mock_138\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_147 LEFT OUTER JOIN db_mock_059.tbl_mock_060 AS tbl_mock_148 ON db_mock_000.tbl_mock_147.mock_039 = db_mock_059.tbl_mock_148.mock_039 CROSS JOIN (SELECT sum(db_mock_000.tbl_mock_147.mock_038) AS mock_138\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_147 LEFT OUTER JOIN db_mock_059.tbl_mock_060 AS tbl_mock_148 ON db_mock_000.tbl_mock_147.mock_039 = db_mock_059.tbl_mock_148.mock_039\nWHERE ((((('ALL' IN ('202505')) OR (db_mock_000.tbl_mock_147.mock_047 >= '202505')) AND (('ALL' IN ('202504')) OR (db_mock_000.tbl_mock_147.mock_047 <= '202504'))) AND (('ALL' IN ('ALL')) OR ((coalesce(db_mock_059.tbl_mock_148.mock_072, 'none')) IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_039 IN ('ALL')))) AND (db_mock_000.tbl_mock_147.mock_014 = 'SamChina')) tbl_mock_149  LEFT OUTER JOIN db_mock_059.tbl_mock_075 AS tbl_mock_150 ON db_mock_000.tbl_mock_147.mock_014 = (lpad(db_mock_059.tbl_mock_150.mock_077, 2, 0))\nWHERE ((((((('ALL' IN ('202505')) OR (db_mock_000.tbl_mock_147.mock_047 >= '202505')) AND (('ALL' IN ('202504')) OR (db_mock_000.tbl_mock_147.mock_047 <= '202504'))) AND (('ALL' IN ('ALL')) OR ((coalesce(db_mock_059.tbl_mock_148.mock_072, 'none')) IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_039 IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_014 IN ('ALL')))) AND ((((((((((((((((((((((((((((((((((((((((((((((((abs(db_mock_000.tbl_mock_147.mock_004)) + (abs(db_mock_000.tbl_mock_147.mock_005))) + (abs(db_mock_000.tbl_mock_147.mock_009))) + (abs(db_mock_000.tbl_mock_147.mock_008))) + (abs(db_mock_000.tbl_mock_147.mock_007))) + (abs(db_mock_000.tbl_mock_147.mock_030))) + (abs(db_mock_000.tbl_mock_147.mock_028))) + (abs(db_mock_000.tbl_mock_147.mock_002))) + (abs(db_mock_000.tbl_mock_147.mock_025))) + (abs(db_mock_000.tbl_mock_147.mock_026))) + (abs(db_mock_000.tbl_mock_147.mock_042))) + (abs(db_mock_000.tbl_mock_147.mock_043))) + (abs(db_mock_000.tbl_mock_147.mock_017))) + (abs(db_mock_000.tbl_mock_147.mock_018))) + (abs(db_mock_000.tbl_mock_147.mock_055))) + (abs(db_mock_000.tbl_mock_147.mock_056))) + (abs(db_mock_000.tbl_mock_147.mock_034))) + (abs(db_mock_000.tbl_mock_147.mock_045))) + (abs(db_mock_000.tbl_mock_147.mock_049))) + (abs(db_mock_000.tbl_mock_147.mock_050))) + (abs(db_mock_000.tbl_mock_147.mock_010))) + (abs(db_mock_000.tbl_mock_147.mock_011))) + (abs(db_mock_000.tbl_mock_147.mock_053))) + (abs(db_mock_000.tbl_mock_147.mock_015))) + (abs(db_mock_000.tbl_mock_147.mock_022))) + (abs(db_mock_000.tbl_mock_147.mock_023))) + (abs(db_mock_000.tbl_mock_147.mock_006))) + (abs(db_mock_000.tbl_mock_147.mock_031))) + (abs(db_mock_000.tbl_mock_147.mock_029))) + (abs(db_mock_000.tbl_mock_147.mock_003))) + (abs(db_mock_000.tbl_mock_147.mock_027))) + (abs(db_mock_000.tbl_mock_147.mock_044))) + (abs(db_mock_000.tbl_mock_147.mock_019))) + (abs(db_mock_000.tbl_mock_147.mock_057))) + (abs(db_mock_000.tbl_mock_147.mock_035))) + (abs(db_mock_000.tbl_mock_147.mock_046))) + (abs(db_mock_000.tbl_mock_147.mock_051))) + (abs(db_mock_000.tbl_mock_147.mock_037))) + (abs(db_mock_000.tbl_mock_147.mock_012))) + (abs(db_mock_000.tbl_mock_147.mock_054))) + (abs(db_mock_000.tbl_mock_147.mock_016))) + (abs(db_mock_000.tbl_mock_147.mock_024))) + (abs(db_mock_000.tbl_mock_147.mock_048))) + (abs(db_mock_000.tbl_mock_147.mock_032))) + (abs(db_mock_000.tbl_mock_147.mock_033))) + (abs(coalesce(db_mock_000.tbl_mock_147.mock_041, 0)))) + (abs(coalesce(db_mock_000.tbl_mock_147.mock_038, 0)))) != 0)) AND ((0 = ((SELECT count(1)\nFROM (SELECT db_mock_059.tbl_mock_087.mock_089, db_mock_059.tbl_mock_087.mock_093, CASE WHEN (db_mock_059.tbl_mock_087.mock_095 = 'c0z00u4') THEN '' ELSE db_mock_059.tbl_mock_087.mock_095 END AS mock_095\nFROM db_mock_059.tbl_mock_087) tbl_mock_144\nWHERE (tbl_mock_144.mock_089 = 'Sams品类结构') AND ((upper(tbl_mock_144.mock_095)) = (upper('H0Y03FZ')))))) OR ((upper(lpad(db_mock_059.tbl_mock_150.mock_077, 2, 0))) IN (((SELECT upper(lpad(tbl_mock_144.mock_093, 2, 0))\nFROM (SELECT db_mock_059.tbl_mock_087.mock_089, db_mock_059.tbl_mock_087.mock_093, CASE WHEN (db_mock_059.tbl_mock_087.mock_095 = 'c0z00u4') THEN '' ELSE db_mock_059.tbl_mock_087.mock_095 END AS mock_095\nFROM db_mock_059.tbl_mock_087) tbl_mock_144\nWHERE (tbl_mock_144.mock_089 = 'Sams品类结构') AND ((upper(tbl_mock_144.mock_095)) = (upper('H0Y03FZ')))))))) UNION ALL SELECT '' AS mock_040, db_mock_059.tbl_mock_150.mock_086 AS mock_137, db_mock_000.tbl_mock_147.mock_039 AS mock_139, coalesce(db_mock_059.tbl_mock_148.mock_072, 'none') AS mock_140, db_mock_000.tbl_mock_147.mock_004, db_mock_000.tbl_mock_147.mock_005, db_mock_000.tbl_mock_147.mock_009, db_mock_000.tbl_mock_147.mock_008, db_mock_000.tbl_mock_147.mock_007, db_mock_000.tbl_mock_147.mock_030, db_mock_000.tbl_mock_147.mock_028, db_mock_000.tbl_mock_147.mock_002, db_mock_000.tbl_mock_147.mock_025, db_mock_000.tbl_mock_147.mock_026, db_mock_000.tbl_mock_147.mock_042, db_mock_000.tbl_mock_147.mock_043, db_mock_000.tbl_mock_147.mock_017, db_mock_000.tbl_mock_147.mock_018, db_mock_000.tbl_mock_147.mock_055, db_mock_000.tbl_mock_147.mock_056, db_mock_000.tbl_mock_147.mock_034, db_mock_000.tbl_mock_147.mock_045, db_mock_000.tbl_mock_147.mock_049, 0 - db_mock_000.tbl_mock_147.mock_050 AS mock_050, db_mock_000.tbl_mock_147.mock_010, db_mock_000.tbl_mock_147.mock_011, db_mock_000.tbl_mock_147.mock_053, db_mock_000.tbl_mock_147.mock_015, db_mock_000.tbl_mock_147.mock_022, db_mock_000.tbl_mock_147.mock_023, db_mock_000.tbl_mock_147.mock_006, db_mock_000.tbl_mock_147.mock_031, db_mock_000.tbl_mock_147.mock_029, db_mock_000.tbl_mock_147.mock_003, db_mock_000.tbl_mock_147.mock_027, db_mock_000.tbl_mock_147.mock_044, db_mock_000.tbl_mock_147.mock_019, db_mock_000.tbl_mock_147.mock_057, db_mock_000.tbl_mock_147.mock_035, db_mock_000.tbl_mock_147.mock_046, db_mock_000.tbl_mock_147.mock_051, db_mock_000.tbl_mock_147.mock_037, db_mock_000.tbl_mock_147.mock_012, db_mock_000.tbl_mock_147.mock_054, db_mock_000.tbl_mock_147.mock_016, db_mock_000.tbl_mock_147.mock_024, CASE WHEN (db_mock_000.tbl_mock_147.mock_039 IN ('6558', '6758')) THEN 0 ELSE db_mock_000.tbl_mock_147.mock_048 END AS mock_048, db_mock_000.tbl_mock_147.mock_032, db_mock_000.tbl_mock_147.mock_033, db_mock_000.tbl_mock_147.mock_041, db_mock_000.tbl_mock_147.mock_038, tbl_mock_149.mock_138\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_147 LEFT OUTER JOIN db_mock_059.tbl_mock_060 AS tbl_mock_148 ON db_mock_000.tbl_mock_147.mock_039 = db_mock_059.tbl_mock_148.mock_039 CROSS JOIN (SELECT sum(db_mock_000.tbl_mock_147.mock_038) AS mock_138\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_147 LEFT OUTER JOIN db_mock_059.tbl_mock_060 AS tbl_mock_148 ON db_mock_000.tbl_mock_147.mock_039 = db_mock_059.tbl_mock_148.mock_039\nWHERE ((((('ALL' IN ('202505')) OR (db_mock_000.tbl_mock_147.mock_047 >= '202505')) AND (('ALL' IN ('202504')) OR (db_mock_000.tbl_mock_147.mock_047 <= '202504'))) AND (('ALL' IN ('ALL')) OR ((coalesce(db_mock_059.tbl_mock_148.mock_072, 'none')) IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_039 IN ('ALL')))) AND (db_mock_000.tbl_mock_147.mock_014 = 'SamChina')) tbl_mock_149  LEFT OUTER JOIN db_mock_059.tbl_mock_075 AS tbl_mock_150 ON db_mock_000.tbl_mock_147.mock_014 = (lpad(db_mock_059.tbl_mock_150.mock_077, 2, 0))\nWHERE ((((((('ALL' IN ('202505')) OR (db_mock_000.tbl_mock_147.mock_047 >= '202505')) AND (('ALL' IN ('202504')) OR (db_mock_000.tbl_mock_147.mock_047 <= '202504'))) AND (('ALL' IN ('ALL')) OR ((coalesce(db_mock_059.tbl_mock_148.mock_072, 'none')) IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_039 IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_014 IN ('ALL')))) AND ((((((((((((((((((((((((((((((((((((((((((((((((abs(db_mock_000.tbl_mock_147.mock_004)) + (abs(db_mock_000.tbl_mock_147.mock_005))) + (abs(db_mock_000.tbl_mock_147.mock_009))) + (abs(db_mock_000.tbl_mock_147.mock_008))) + (abs(db_mock_000.tbl_mock_147.mock_007))) + (abs(db_mock_000.tbl_mock_147.mock_030))) + (abs(db_mock_000.tbl_mock_147.mock_028))) + (abs(db_mock_000.tbl_mock_147.mock_002))) + (abs(db_mock_000.tbl_mock_147.mock_025))) + (abs(db_mock_000.tbl_mock_147.mock_026))) + (abs(db_mock_000.tbl_mock_147.mock_042))) + (abs(db_mock_000.tbl_mock_147.mock_043))) + (abs(db_mock_000.tbl_mock_147.mock_017))) + (abs(db_mock_000.tbl_mock_147.mock_018))) + (abs(db_mock_000.tbl_mock_147.mock_055))) + (abs(db_mock_000.tbl_mock_147.mock_056))) + (abs(db_mock_000.tbl_mock_147.mock_034))) + (abs(db_mock_000.tbl_mock_147.mock_045))) + (abs(db_mock_000.tbl_mock_147.mock_049))) + (abs(db_mock_000.tbl_mock_147.mock_050))) + (abs(db_mock_000.tbl_mock_147.mock_010))) + (abs(db_mock_000.tbl_mock_147.mock_011))) + (abs(db_mock_000.tbl_mock_147.mock_053))) + (abs(db_mock_000.tbl_mock_147.mock_015))) + (abs(db_mock_000.tbl_mock_147.mock_022))) + (abs(db_mock_000.tbl_mock_147.mock_023))) + (abs(db_mock_000.tbl_mock_147.mock_006))) + (abs(db_mock_000.tbl_mock_147.mock_031))) + (abs(db_mock_000.tbl_mock_147.mock_029))) + (abs(db_mock_000.tbl_mock_147.mock_003))) + (abs(db_mock_000.tbl_mock_147.mock_027))) + (abs(db_mock_000.tbl_mock_147.mock_044))) + (abs(db_mock_000.tbl_mock_147.mock_019))) + (abs(db_mock_000.tbl_mock_147.mock_057))) + (abs(db_mock_000.tbl_mock_147.mock_035))) + (abs(db_mock_000.tbl_mock_147.mock_046))) + (abs(db_mock_000.tbl_mock_147.mock_051))) + (abs(db_mock_000.tbl_mock_147.mock_037))) + (abs(db_mock_000.tbl_mock_147.mock_012))) + (abs(db_mock_000.tbl_mock_147.mock_054))) + (abs(db_mock_000.tbl_mock_147.mock_016))) + (abs(db_mock_000.tbl_mock_147.mock_024))) + (abs(db_mock_000.tbl_mock_147.mock_048))) + (abs(db_mock_000.tbl_mock_147.mock_032))) + (abs(db_mock_000.tbl_mock_147.mock_033))) + (abs(coalesce(db_mock_000.tbl_mock_147.mock_041, 0)))) + (abs(coalesce(db_mock_000.tbl_mock_147.mock_038, 0)))) != 0)) AND ((0 = ((SELECT count(1)\nFROM (SELECT db_mock_059.tbl_mock_087.mock_089, db_mock_059.tbl_mock_087.mock_093, CASE WHEN (db_mock_059.tbl_mock_087.mock_095 = 'c0z00u4') THEN '' ELSE db_mock_059.tbl_mock_087.mock_095 END AS mock_095\nFROM db_mock_059.tbl_mock_087) tbl_mock_144\nWHERE (tbl_mock_144.mock_089 = 'Sams品类结构') AND ((upper(tbl_mock_144.mock_095)) = (upper('H0Y03FZ')))))) OR ((upper(lpad(db_mock_059.tbl_mock_150.mock_077, 2, 0))) IN (((SELECT upper(lpad(tbl_mock_144.mock_093, 2, 0))\nFROM (SELECT db_mock_059.tbl_mock_087.mock_089, db_mock_059.tbl_mock_087.mock_093, CASE WHEN (db_mock_059.tbl_mock_087.mock_095 = 'c0z00u4') THEN '' ELSE db_mock_059.tbl_mock_087.mock_095 END AS mock_095\nFROM db_mock_059.tbl_mock_087) tbl_mock_144\nWHERE (tbl_mock_144.mock_089 = 'Sams品类结构') AND ((upper(tbl_mock_144.mock_095)) = (upper('H0Y03FZ')))))))) UNION ALL SELECT '总计' AS mock_040, '' AS mock_137, db_mock_000.tbl_mock_147.mock_039 AS mock_139, coalesce(db_mock_059.tbl_mock_148.mock_072, 'none') AS mock_140, db_mock_000.tbl_mock_147.mock_004, db_mock_000.tbl_mock_147.mock_005, db_mock_000.tbl_mock_147.mock_009, db_mock_000.tbl_mock_147.mock_008, db_mock_000.tbl_mock_147.mock_007, db_mock_000.tbl_mock_147.mock_030, db_mock_000.tbl_mock_147.mock_028, db_mock_000.tbl_mock_147.mock_002, db_mock_000.tbl_mock_147.mock_025, db_mock_000.tbl_mock_147.mock_026, db_mock_000.tbl_mock_147.mock_042, db_mock_000.tbl_mock_147.mock_043, db_mock_000.tbl_mock_147.mock_017, db_mock_000.tbl_mock_147.mock_018, db_mock_000.tbl_mock_147.mock_055, db_mock_000.tbl_mock_147.mock_056, db_mock_000.tbl_mock_147.mock_034, db_mock_000.tbl_mock_147.mock_045, db_mock_000.tbl_mock_147.mock_049, 0 - db_mock_000.tbl_mock_147.mock_050 AS mock_050, db_mock_000.tbl_mock_147.mock_010, db_mock_000.tbl_mock_147.mock_011, db_mock_000.tbl_mock_147.mock_053, db_mock_000.tbl_mock_147.mock_015, db_mock_000.tbl_mock_147.mock_022, db_mock_000.tbl_mock_147.mock_023, db_mock_000.tbl_mock_147.mock_006, db_mock_000.tbl_mock_147.mock_031, db_mock_000.tbl_mock_147.mock_029, db_mock_000.tbl_mock_147.mock_003, db_mock_000.tbl_mock_147.mock_027, db_mock_000.tbl_mock_147.mock_044, db_mock_000.tbl_mock_147.mock_019, db_mock_000.tbl_mock_147.mock_057, db_mock_000.tbl_mock_147.mock_035, db_mock_000.tbl_mock_147.mock_046, db_mock_000.tbl_mock_147.mock_051, db_mock_000.tbl_mock_147.mock_037, db_mock_000.tbl_mock_147.mock_012, db_mock_000.tbl_mock_147.mock_054, db_mock_000.tbl_mock_147.mock_016, db_mock_000.tbl_mock_147.mock_024, CASE WHEN (db_mock_000.tbl_mock_147.mock_039 IN ('6558', '6758')) THEN 0 ELSE db_mock_000.tbl_mock_147.mock_048 END AS mock_048, db_mock_000.tbl_mock_147.mock_032, db_mock_000.tbl_mock_147.mock_033, db_mock_000.tbl_mock_147.mock_041, db_mock_000.tbl_mock_147.mock_038, tbl_mock_149.mock_138\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_147 LEFT OUTER JOIN db_mock_059.tbl_mock_060 AS tbl_mock_148 ON db_mock_000.tbl_mock_147.mock_039 = db_mock_059.tbl_mock_148.mock_039 CROSS JOIN (SELECT sum(db_mock_000.tbl_mock_147.mock_038) AS mock_138\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_147 LEFT OUTER JOIN db_mock_059.tbl_mock_060 AS tbl_mock_148 ON db_mock_000.tbl_mock_147.mock_039 = db_mock_059.tbl_mock_148.mock_039\nWHERE ((((('ALL' IN ('202505')) OR (db_mock_000.tbl_mock_147.mock_047 >= '202505')) AND (('ALL' IN ('202504')) OR (db_mock_000.tbl_mock_147.mock_047 <= '202504'))) AND (('ALL' IN ('ALL')) OR ((coalesce(db_mock_059.tbl_mock_148.mock_072, 'none')) IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_039 IN ('ALL')))) AND (db_mock_000.tbl_mock_147.mock_014 = 'SamChina')) tbl_mock_149  LEFT OUTER JOIN db_mock_059.tbl_mock_075 AS tbl_mock_150 ON db_mock_000.tbl_mock_147.mock_014 = (lpad(db_mock_059.tbl_mock_150.mock_077, 2, 0))\nWHERE ((((((('ALL' IN ('202505')) OR (db_mock_000.tbl_mock_147.mock_047 >= '202505')) AND (('ALL' IN ('202504')) OR (db_mock_000.tbl_mock_147.mock_047 <= '202504'))) AND (('ALL' IN ('ALL')) OR ((coalesce(db_mock_059.tbl_mock_148.mock_072, 'none')) IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_039 IN ('ALL')))) AND (('ALL' IN ('ALL')) OR (db_mock_000.tbl_mock_147.mock_014 IN ('ALL')))) AND ((((((((((((((((((((((((((((((((((((((((((((((((abs(db_mock_000.tbl_mock_147.mock_004)) + (abs(db_mock_000.tbl_mock_147.mock_005))) + (abs(db_mock_000.tbl_mock_147.mock_009))) + (abs(db_mock_000.tbl_mock_147.mock_008))) + (abs(db_mock_000.tbl_mock_147.mock_007))) + (abs(db_mock_000.tbl_mock_147.mock_030))) + (abs(db_mock_000.tbl_mock_147.mock_028))) + (abs(db_mock_000.tbl_mock_147.mock_002))) + (abs(db_mock_000.tbl_mock_147.mock_025))) + (abs(db_mock_000.tbl_mock_147.mock_026))) + (abs(db_mock_000.tbl_mock_147.mock_042))) + (abs(db_mock_000.tbl_mock_147.mock_043))) + (abs(db_mock_000.tbl_mock_147.mock_017))) + (abs(db_mock_000.tbl_mock_147.mock_018))) + (abs(db_mock_000.tbl_mock_147.mock_055))) + (abs(db_mock_000.tbl_mock_147.mock_056))) + (abs(db_mock_000.tbl_mock_147.mock_034))) + (abs(db_mock_000.tbl_mock_147.mock_045))) + (abs(db_mock_000.tbl_mock_147.mock_049))) + (abs(db_mock_000.tbl_mock_147.mock_050))) + (abs(db_mock_000.tbl_mock_147.mock_010))) + (abs(db_mock_000.tbl_mock_147.mock_011))) + (abs(db_mock_000.tbl_mock_147.mock_053))) + (abs(db_mock_000.tbl_mock_147.mock_015))) + (abs(db_mock_000.tbl_mock_147.mock_022))) + (abs(db_mock_000.tbl_mock_147.mock_023))) + (abs(db_mock_000.tbl_mock_147.mock_006))) + (abs(db_mock_000.tbl_mock_147.mock_031))) + (abs(db_mock_000.tbl_mock_147.mock_029))) + (abs(db_mock_000.tbl_mock_147.mock_003))) + (abs(db_mock_000.tbl_mock_147.mock_027))) + (abs(db_mock_000.tbl_mock_147.mock_044))) + (abs(db_mock_000.tbl_mock_147.mock_019))) + (abs(db_mock_000.tbl_mock_147.mock_057))) + (abs(db_mock_000.tbl_mock_147.mock_035))) + (abs(db_mock_000.tbl_mock_147.mock_046))) + (abs(db_mock_000.tbl_mock_147.mock_051))) + (abs(db_mock_000.tbl_mock_147.mock_037))) + (abs(db_mock_000.tbl_mock_147.mock_012))) + (abs(db_mock_000.tbl_mock_147.mock_054))) + (abs(db_mock_000.tbl_mock_147.mock_016))) + (abs(db_mock_000.tbl_mock_147.mock_024))) + (abs(db_mock_000.tbl_mock_147.mock_048))) + (abs(db_mock_000.tbl_mock_147.mock_032))) + (abs(db_mock_000.tbl_mock_147.mock_033))) + (abs(coalesce(db_mock_000.tbl_mock_147.mock_041, 0)))) + (abs(coalesce(db_mock_000.tbl_mock_147.mock_038, 0)))) != 0)) AND ((0 = ((SELECT count(1)\nFROM (SELECT db_mock_059.tbl_mock_087.mock_089, db_mock_059.tbl_mock_087.mock_093, CASE WHEN (db_mock_059.tbl_mock_087.mock_095 = 'c0z00u4') THEN '' ELSE db_mock_059.tbl_mock_087.mock_095 END AS mock_095\nFROM db_mock_059.tbl_mock_087) tbl_mock_144\nWHERE (tbl_mock_144.mock_089 = 'Sams品类结构') AND ((upper(tbl_mock_144.mock_095)) = (upper('H0Y03FZ')))))) OR ((upper(lpad(db_mock_059.tbl_mock_150.mock_077, 2, 0))) IN (((SELECT upper(lpad(tbl_mock_144.mock_093, 2, 0))\nFROM (SELECT db_mock_059.tbl_mock_087.mock_089, db_mock_059.tbl_mock_087.mock_093, CASE WHEN (db_mock_059.tbl_mock_087.mock_095 = 'c0z00u4') THEN '' ELSE db_mock_059.tbl_mock_087.mock_095 END AS mock_095\nFROM db_mock_059.tbl_mock_087) tbl_mock_144\nWHERE (tbl_mock_144.mock_089 = 'Sams品类结构') AND ((upper(tbl_mock_144.mock_095)) = (upper('H0Y03FZ'))))))))) tbl_mock_142) tbl_mock_141\nWHERE (((((instr('4834', tbl_mock_141.mock_139)) > 0) OR ('4834' = 'ALL')) OR ('4834' = '')) OR ('4834' IS NULL)) AND (tbl_mock_141.mock_137 NOT IN ('SamChina Total'))\nGROUP BY mock_097, mock_098) tbl_mock_136 ORDER BY CASE tbl_mock_136.mock_097 WHEN '总计' THEN 0 WHEN NULL THEN 1 WHEN '' THEN 2 WHEN 'FR1-PRODUCE & EGGS' THEN 3 WHEN 'FR2-DELI & BAKERY' THEN 4 WHEN 'FR3-MEAT&SEAFOOD' THEN 5 WHEN 'FR4-COOLER&FREEZER' THEN 6 ELSE 7 END ASC, tbl_mock_136.mock_097 ASC, CASE tbl_mock_136.mock_098 WHEN '小计' THEN 0 WHEN NULL THEN 1 WHEN '' THEN 2 WHEN '39 Eggs' THEN 3 WHEN '42 Juice/Dairy' THEN 4 WHEN '44 Gourmet/Protein' THEN 5 WHEN '48 Bread' THEN 6 WHEN '56 Fruit' THEN 7 WHEN '57 Vegetables' THEN 8 WHEN '66 Beef/ Lamb' THEN 9 WHEN '72 Deli' THEN 10 WHEN '75 Seafood' THEN 11 WHEN '76 Meat' THEN 12 WHEN '77 Bakery' THEN 13 WHEN '79 Sam\\'s Cafe' THEN 14 WHEN '86 Pre-Packaged Seafood' THEN 15 WHEN '89 Hms/Asian Pastry' THEN 16 WHEN '91 Pre-Packaged Meat' THEN 17 WHEN '96 P.I. Beef/ Lamb' THEN 18 WHEN 'FR1&FR3' THEN 19 WHEN 'FR2&FR4' THEN 20 ELSE 21 END ASC, tbl_mock_136.mock_098 ASC  LIMIT 20001","table_meta":{"db_mock_000.tbl_mock_001":"CREATE TABLE db_mock_000.tbl_mock_001 (\nmock_047 int(11) ,\nmock_058 varchar(200) ,\nmock_036 varchar(200) ,\nmock_052 varchar(200) ,\nmock_039 varchar(200) ,\nmock_014 varchar(200) ,\nmock_013 varchar(200) ,\nmock_020 varchar(200) ,\nmock_040 varchar(200) ,\nmock_004 decimal(38, 8) ,\nmock_005 decimal(38, 8) ,\nmock_009 decimal(38, 8) ,\nmock_008 decimal(38, 8) ,\nmock_007 decimal(38, 8) ,\nmock_030 decimal(38, 8) ,\nmock_028 decimal(38, 8) ,\nmock_002 decimal(38, 8) ,\nmock_025 decimal(38, 8) ,\nmock_026 decimal(38, 8) ,\nmock_042 decimal(38, 8) ,\nmock_043 decimal(38, 8) ,\nmock_017 decimal(38, 8) ,\nmock_018 decimal(38, 8) ,\nmock_055 decimal(38, 8) ,\nmock_056 decimal(38, 8) ,\nmock_034 decimal(38, 8) ,\nmock_045 decimal(38, 8) ,\nmock_049 decimal(38, 8) ,\nmock_050 decimal(38, 8) ,\nmock_010 decimal(38, 8) ,\nmock_011 decimal(38, 8) ,\nmock_053 decimal(38, 8) ,\nmock_015 decimal(38, 8) ,\nmock_022 decimal(38, 8) ,\nmock_023 decimal(38, 8) ,\nmock_006 decimal(38, 8) ,\nmock_031 decimal(38, 8) ,\nmock_029 decimal(38, 8) ,\nmock_003 decimal(38, 8) ,\nmock_027 decimal(38, 8) ,\nmock_044 decimal(38, 8) ,\nmock_019 decimal(38, 8) ,\nmock_057 decimal(38, 8) ,\nmock_035 decimal(38, 8) ,\nmock_046 decimal(38, 8) ,\nmock_051 decimal(38, 8) ,\nmock_037 decimal(38, 8) ,\nmock_012 decimal(38, 8) ,\nmock_054 decimal(38, 8) ,\nmock_016 decimal(38, 8) ,\nmock_024 decimal(38, 8) ,\nmock_048 decimal(38, 8) ,\nmock_032 decimal(38, 8) ,\nmock_033 decimal(38, 8) ,\nmock_021 datetime ,\nmock_038 decimal(38, 8) ,\nmock_041 decimal(38, 8) \n) ENGINE= OLAP \nDUPLICATE KEY(mock_047)\nPARTITION BY RANGE(mock_047)\n(PARTITION p202201 VALUES [(\"202201\"), (\"202202\")),\nPARTITION p202202 VALUES [(\"202202\"), (\"202203\")),\nPARTITION p202203 VALUES [(\"202203\"), (\"202204\")),\nPARTITION p202204 VALUES [(\"202204\"), (\"202205\")),\nPARTITION p202205 VALUES [(\"202205\"), (\"202206\")),\nPARTITION p202206 VALUES [(\"202206\"), (\"202207\")),\nPARTITION p202207 VALUES [(\"202207\"), (\"202208\")),\nPARTITION p202208 VALUES [(\"202208\"), (\"202209\")),\nPARTITION p202209 VALUES [(\"202209\"), (\"202210\")),\nPARTITION p202210 VALUES [(\"202210\"), (\"202211\")),\nPARTITION p202211 VALUES [(\"202211\"), (\"202212\")),\nPARTITION p202212 VALUES [(\"202212\"), (\"202301\")),\nPARTITION p202301 VALUES [(\"202301\"), (\"202302\")),\nPARTITION p202302 VALUES [(\"202302\"), (\"202303\")),\nPARTITION p202303 VALUES [(\"202303\"), (\"202304\")),\nPARTITION p202304 VALUES [(\"202304\"), (\"202305\")),\nPARTITION p202305 VALUES [(\"202305\"), (\"202306\")),\nPARTITION p202306 VALUES [(\"202306\"), (\"202307\")),\nPARTITION p202307 VALUES [(\"202307\"), (\"202308\")),\nPARTITION p202308 VALUES [(\"202308\"), (\"202309\")),\nPARTITION p202309 VALUES [(\"202309\"), (\"202310\")),\nPARTITION p202310 VALUES [(\"202310\"), (\"202311\")),\nPARTITION p202311 VALUES [(\"202311\"), (\"202312\")),\nPARTITION p202312 VALUES [(\"202312\"), (\"202401\")),\nPARTITION p202401 VALUES [(\"202401\"), (\"202402\")),\nPARTITION p202402 VALUES [(\"202402\"), (\"202403\")),\nPARTITION p202403 VALUES [(\"202403\"), (\"202404\")),\nPARTITION p202404 VALUES [(\"202404\"), (\"202405\")),\nPARTITION p202405 VALUES [(\"202405\"), (\"202406\")),\nPARTITION p202406 VALUES [(\"202406\"), (\"202407\")),\nPARTITION p202407 VALUES [(\"202407\"), (\"202408\")),\nPARTITION p202408 VALUES [(\"202408\"), (\"202409\")),\nPARTITION p202409 VALUES [(\"202409\"), (\"202410\")),\nPARTITION p202410 VALUES [(\"202410\"), (\"202411\")),\nPARTITION p202411 VALUES [(\"202411\"), (\"202412\")),\nPARTITION p202412 VALUES [(\"202412\"), (\"202501\")),\nPARTITION p202501 VALUES [(\"202501\"), (\"202502\")),\nPARTITION p202502 VALUES [(\"202502\"), (\"202503\")),\nPARTITION p202503 VALUES [(\"202503\"), (\"202504\")),\nPARTITION p202504 VALUES [(\"202504\"), (\"202505\")),\nPARTITION p202505 VALUES [(\"202505\"), (\"202506\")),\nPARTITION p202506 VALUES [(\"202506\"), (\"202507\")),\nPARTITION p202507 VALUES [(\"202507\"), (\"202508\")),\nPARTITION p202508 VALUES [(\"202508\"), (\"202509\")),\nPARTITION p202509 VALUES [(\"202509\"), (\"202510\")),\nPARTITION p202510 VALUES [(\"202510\"), (\"202511\")),\nPARTITION p202511 VALUES [(\"202511\"), (\"202512\")),\nPARTITION p202512 VALUES [(\"202512\"), (\"202601\")),\nPARTITION p202601 VALUES [(\"202601\"), (\"202602\")),\nPARTITION p202602 VALUES [(\"202602\"), (\"202603\")),\nPARTITION p202603 VALUES [(\"202603\"), (\"202604\")),\nPARTITION p202604 VALUES [(\"202604\"), (\"202605\")),\nPARTITION p202605 VALUES [(\"202605\"), (\"202606\")),\nPARTITION p202606 VALUES [(\"202606\"), (\"202607\")),\nPARTITION p202607 VALUES [(\"202607\"), (\"202608\")),\nPARTITION p202608 VALUES [(\"202608\"), (\"202609\")),\nPARTITION p202609 VALUES [(\"202609\"), (\"202610\")),\nPARTITION p202610 VALUES [(\"202610\"), (\"202611\")),\nPARTITION p202611 VALUES [(\"202611\"), (\"202612\")),\nPARTITION p202612 VALUES [(\"202612\"), (\"202701\")),\nPARTITION p202701 VALUES [(\"202701\"), (\"202702\")),\nPARTITION p202702 VALUES [(\"202702\"), (\"202703\")),\nPARTITION p202703 VALUES [(\"202703\"), (\"202704\")),\nPARTITION p202704 VALUES [(\"202704\"), (\"202705\")),\nPARTITION p202705 VALUES [(\"202705\"), (\"202706\")),\nPARTITION p202706 VALUES [(\"202706\"), (\"202707\")),\nPARTITION p202707 VALUES [(\"202707\"), (\"202708\")),\nPARTITION p202708 VALUES [(\"202708\"), (\"202709\")),\nPARTITION p202709 VALUES [(\"202709\"), (\"202710\")),\nPARTITION p202710 VALUES [(\"202710\"), (\"202711\")),\nPARTITION p202711 VALUES [(\"202711\"), (\"202712\")),\nPARTITION p202712 VALUES [(\"202712\"), (\"202801\")),\nPARTITION p202801 VALUES [(\"202801\"), (\"202802\")),\nPARTITION p202802 VALUES [(\"202802\"), (\"202803\")),\nPARTITION p202803 VALUES [(\"202803\"), (\"202804\")),\nPARTITION p202804 VALUES [(\"202804\"), (\"202805\")),\nPARTITION p202805 VALUES [(\"202805\"), (\"202806\")),\nPARTITION p202806 VALUES [(\"202806\"), (\"202807\")),\nPARTITION p202807 VALUES [(\"202807\"), (\"202808\")),\nPARTITION p202808 VALUES [(\"202808\"), (\"202809\")),\nPARTITION p202809 VALUES [(\"202809\"), (\"202810\")),\nPARTITION p202810 VALUES [(\"202810\"), (\"202811\")),\nPARTITION p202811 VALUES [(\"202811\"), (\"202812\")),\nPARTITION p202812 VALUES [(\"202812\"), (\"202901\")),\nPARTITION p202901 VALUES [(\"202901\"), (\"202902\")),\nPARTITION p202902 VALUES [(\"202902\"), (\"202903\")),\nPARTITION p202903 VALUES [(\"202903\"), (\"202904\")),\nPARTITION p202904 VALUES [(\"202904\"), (\"202905\")),\nPARTITION p202905 VALUES [(\"202905\"), (\"202906\")),\nPARTITION p202906 VALUES [(\"202906\"), (\"202907\")),\nPARTITION p202907 VALUES [(\"202907\"), (\"202908\")),\nPARTITION p202908 VALUES [(\"202908\"), (\"202909\")),\nPARTITION p202909 VALUES [(\"202909\"), (\"202910\")),\nPARTITION p202910 VALUES [(\"202910\"), (\"202911\")),\nPARTITION p202911 VALUES [(\"202911\"), (\"202912\")),\nPARTITION p202912 VALUES [(\"202912\"), (\"203001\")))\nDISTRIBUTED BY HASH(mock_047, mock_039) BUCKETS 1 \nPROPERTIES (\n\"replication_num\" = \"1\",\n\"dynamic_partition.enable\" = \"false\",\n\"dynamic_partition.time_unit\" = \"MONTH\",\n\"dynamic_partition.time_zone\" = \"Asia/Shanghai\",\n\"dynamic_partition.start\" = \"-3000\",\n\"dynamic_partition.end\" = \"61\",\n\"dynamic_partition.prefix\" = \"p\",\n\"dynamic_partition.buckets\" = \"1\",\n\"dynamic_partition.history_partition_num\" = \"0\",\n\"dynamic_partition.start_day_of_month\" = \"1\"\n);","db_mock_059.tbl_mock_060":"CREATE TABLE db_mock_059.tbl_mock_060 (\nmock_068 varchar(200) ,\nmock_039 varchar(200) ,\nmock_061 varchar(200) ,\nmock_072 varchar(200) ,\nmock_069 varchar(200) ,\nmock_062 varchar(200) ,\nmock_073 varchar(200) ,\nmock_066 varchar(200) ,\nmock_071 varchar(200) ,\nmock_070 varchar(200) ,\nmock_064 varchar(200) ,\nmock_065 varchar(200) ,\nmock_063 varchar(200) ,\nmock_074 varchar(200) ,\nmock_021 varchar(200) ,\nmock_067 varchar(65533) \n) ENGINE= OLAP \nDUPLICATE KEY(mock_068, mock_039, mock_061, mock_072, mock_069, mock_062)\nDISTRIBUTED BY HASH(mock_039) BUCKETS 20 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);","db_mock_059.tbl_mock_075":"CREATE TABLE db_mock_059.tbl_mock_075 (\nmock_077 varchar(100) ,\nmock_076 varchar(200) ,\nmock_040 varchar(2000) ,\nmock_086 varchar(2000) ,\nmock_020 varchar(2000) ,\nmock_085 varchar(100) ,\nmock_084 varchar(100) ,\nmock_083 int(11) ,\nmock_078 varchar(2000) ,\nmock_081 varchar(2000) ,\nmock_082 varchar(2000) ,\nmock_079 varchar(2000) ,\nmock_080 varchar(2000) ,\nmock_021 datetime \n) ENGINE= OLAP \nDUPLICATE KEY(mock_077)\nDISTRIBUTED BY HASH(mock_077) BUCKETS 20 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);","db_mock_059.tbl_mock_087":"CREATE TABLE db_mock_059.tbl_mock_087 (\nmock_089 varchar(200) ,\nmock_095 varchar(200) ,\nmock_090 varchar(200) ,\nmock_096 varchar(200) ,\nmock_093 varchar(200) ,\nmock_091 varchar(200) ,\nmock_092 varchar(200) ,\nmock_088 varchar(200) ,\nmock_094 varchar(200) ,\nmock_021 varchar(200) \n) ENGINE= OLAP \nDUPLICATE KEY(mock_089, mock_095)\nDISTRIBUTED BY HASH(mock_089, mock_095) BUCKETS 2 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);"},"table_row_count":{},"column_statistics":{},"explain_info":"PLAN COST\n  CPU: 3544.01\n  Memory: 3342.255\n\nPLAN FRAGMENT 0(F06)\n  Output Exprs:771: mock_040 | 772: cast | 825: sum | 855: expr | 827: sum | 828: sum | 856: expr | 829: sum | 830: sum | 857: expr | 858: expr | 859: expr | 860: expr | 861: expr | 862: expr | 863: expr | 864: expr | 865: expr | 866: expr | 867: expr | 868: expr | 869: expr | 870: expr | 871: expr | 872: expr | 873: expr | 874: expr | 875: expr | 876: expr | 877: expr | 878: expr | 879: expr | 880: expr | 852: sum | 881: expr | 853: sum | 854: sum | 882: expr | 883: expr\n  Input Partition: UNPARTITIONED\n  RESULT SINK\n\n  16:Project\n  |  output columns:\n  |  771 <-> [771: mock_040, VARCHAR(2000), true]\n  |  772 <-> [772: cast, VARCHAR(2000), true]\n  |  825 <-> [825: sum, DECIMAL128(38,8), true]\n  |  827 <-> [827: sum, DECIMAL128(38,8), true]\n  |  828 <-> [828: sum, DECIMAL128(38,8), true]\n  |  829 <-> [829: sum, DECIMAL128(38,8), true]\n  |  830 <-> [830: sum, DECIMAL128(38,8), true]\n  |  852 <-> [852: sum, DECIMAL128(38,8), true]\n  |  853 <-> [853: sum, DECIMAL128(38,8), true]\n  |  854 <-> [854: sum, DECIMAL128(38,8), true]\n  |  855 <-> [855: expr, DECIMAL128(38,12), true]\n  |  856 <-> [856: expr, DECIMAL128(38,12), true]\n  |  857 <-> [857: expr, DECIMAL128(38,12), true]\n  |  858 <-> [858: expr, DECIMAL128(38,12), true]\n  |  859 <-> [859: expr, DECIMAL128(38,12), true]\n  |  860 <-> [860: expr, DECIMAL128(38,12), true]\n  |  861 <-> [861: expr, DECIMAL128(38,12), true]\n  |  862 <-> [862: expr, DECIMAL128(38,12), true]\n  |  863 <-> [863: expr, DECIMAL128(38,12), true]\n  |  864 <-> [864: expr, DECIMAL128(38,12), true]\n  |  865 <-> [865: expr, DECIMAL128(38,12), true]\n  |  866 <-> [866: expr, DECIMAL128(38,12), true]\n  |  867 <-> [867: expr, DECIMAL128(38,12), true]\n  |  868 <-> [868: expr, DECIMAL128(38,12), true]\n  |  869 <-> [869: expr, DECIMAL128(38,12), true]\n  |  870 <-> [870: expr, DECIMAL128(38,12), true]\n  |  871 <-> [871: expr, DECIMAL128(38,12), true]\n  |  872 <-> [872: expr, DECIMAL128(38,12), true]\n  |  873 <-> [873: expr, DECIMAL128(38,12), true]\n  |  874 <-> [874: expr, DECIMAL128(38,12), true]\n  |  875 <-> [875: expr, DECIMAL128(38,12), true]\n  |  876 <-> [876: expr, DECIMAL128(38,12), true]\n  |  877 <-> [877: expr, DECIMAL128(38,12), true]\n  |  878 <-> [878: expr, DECIMAL128(38,12), true]\n  |  879 <-> [879: expr, DECIMAL128(38,12), true]\n  |  880 <-> [880: expr, DECIMAL128(38,12), true]\n  |  881 <-> [881: expr, DECIMAL128(38,12), true]\n  |  882 <-> [882: expr, DECIMAL128(38,12), true]\n  |  883 <-> [883: expr, DECIMAL128(38,12), true]\n  |  limit: 20001\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_040-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  15:MERGING-EXCHANGE\n     distribution type: GATHER\n     limit: 20001\n     cardinality: 1\n     column statistics: \n     * mock_040-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * max-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * case-->[-Infinity, Infinity, 0.0, 1.0, 8.0] ESTIMATE\n     * case-->[-Infinity, Infinity, 0.0, 1.0, 22.0] ESTIMATE\n\nPLAN FRAGMENT 1(F05)\n\n  Input Partition: HASH_PARTITIONED: 771: mock_040, 772: cast\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 15\n\n  14:TOP-N\n  |  order by: [884, TINYINT, true] ASC, [771, VARCHAR(2000), true] ASC, [885, TINYINT, true] ASC, [772, VARCHAR(2000), true] ASC\n  |  offset: 0\n  |  limit: 20001\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_040-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * max-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 8.0] ESTIMATE\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 22.0] ESTIMATE\n  |  \n  13:Project\n  |  output columns:\n  |  771 <-> [771: mock_040, VARCHAR(2000), true]\n  |  772 <-> [772: cast, VARCHAR(2000), true]\n  |  825 <-> [825: sum, DECIMAL128(38,8), true]\n  |  827 <-> [827: sum, DECIMAL128(38,8), true]\n  |  828 <-> [828: sum, DECIMAL128(38,8), true]\n  |  829 <-> [829: sum, DECIMAL128(38,8), true]\n  |  830 <-> [830: sum, DECIMAL128(38,8), true]\n  |  852 <-> [852: sum, DECIMAL128(38,8), true]\n  |  853 <-> [853: sum, DECIMAL128(38,8), true]\n  |  854 <-> [854: sum, DECIMAL128(38,8), true]\n  |  855 <-> [825: sum, DECIMAL128(38,8), true] / [826: sum, DECIMAL128(38,8), true]\n  |  856 <-> [827: sum, DECIMAL128(38,8), true] / [828: sum, DECIMAL128(38,8), true] - 1\n  |  857 <-> [829: sum, DECIMAL128(38,8), true] / [831: sum, DECIMAL128(38,8), true]\n  |  858 <-> [829: sum, DECIMAL128(38,8), true] / [832: max, DECIMAL128(38,8), true]\n  |  859 <-> [829: sum, DECIMAL128(38,8), true] / [830: sum, DECIMAL128(38,8), true] - 1\n  |  860 <-> [928: divide, DECIMAL128(38,12), true]\n  |  861 <-> [928: divide, DECIMAL128(38,12), true] - [946: subtract, DECIMAL128(38,8), true] / if[([946: subtract, DECIMAL128(38,8), true] = 0, 0, [831: sum, DECIMAL128(38,8), true]); args: BOOLEAN,DECIMAL128,DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true]\n  |  862 <-> [928: divide, DECIMAL128(38,12), true] - [840: sum, DECIMAL128(38,8), true] / [841: sum, DECIMAL128(38,8), true]\n  |  863 <-> [933: divide, DECIMAL128(38,12), true]\n  |  864 <-> [933: divide, DECIMAL128(38,12), true] - [839: sum, DECIMAL128(38,8), true] / [831: sum, DECIMAL128(38,8), true]\n  |  865 <-> [933: divide, DECIMAL128(38,12), true] - [843: sum, DECIMAL128(38,8), true] / [830: sum, DECIMAL128(38,8), true]\n  |  866 <-> [918: divide, DECIMAL128(38,12), true]\n  |  867 <-> [934: subtract, DECIMAL128(38,12), true]\n  |  868 <-> [937: subtract, DECIMAL128(38,12), true]\n  |  869 <-> [919: divide, DECIMAL128(38,12), true]\n  |  870 <-> [935: subtract, DECIMAL128(38,12), true]\n  |  871 <-> [938: subtract, DECIMAL128(38,12), true]\n  |  872 <-> [920: divide, DECIMAL128(38,12), true]\n  |  873 <-> [936: subtract, DECIMAL128(38,12), true]\n  |  874 <-> [939: subtract, DECIMAL128(38,12), true]\n  |  875 <-> [918: divide, DECIMAL128(38,12), true] + [919: divide, DECIMAL128(38,12), true] + [920: divide, DECIMAL128(38,12), true]\n  |  876 <-> [934: subtract, DECIMAL128(38,12), true] + [935: subtract, DECIMAL128(38,12), true] + [936: subtract, DECIMAL128(38,12), true]\n  |  877 <-> [937: subtract, DECIMAL128(38,12), true] + [938: subtract, DECIMAL128(38,12), true] + [939: subtract, DECIMAL128(38,12), true]\n  |  878 <-> [927: divide, DECIMAL128(38,12), true]\n  |  879 <-> [927: divide, DECIMAL128(38,12), true] - [835: sum, DECIMAL128(38,8), true] / [831: sum, DECIMAL128(38,8), true]\n  |  880 <-> [927: divide, DECIMAL128(38,12), true] - [851: sum, DECIMAL128(38,8), true] / [830: sum, DECIMAL128(38,8), true]\n  |  881 <-> [852: sum, DECIMAL128(38,8), true] / [829: sum, DECIMAL128(38,8), true]\n  |  882 <-> [853: sum, DECIMAL128(38,8), true] / [854: sum, DECIMAL128(38,8), true]\n  |  883 <-> [829: sum, DECIMAL128(38,8), true] / [854: sum, DECIMAL128(38,8), true]\n  |  884 <-> CASE 771: mock_040 WHEN '总计' THEN 0 WHEN NULL THEN 1 WHEN '' THEN 2 WHEN 'FR1-PRODUCE & EGGS' THEN 3 WHEN 'FR2-DELI & BAKERY' THEN 4 WHEN 'FR3-MEAT&SEAFOOD' THEN 5 WHEN 'FR4-COOLER&FREEZER' THEN 6 ELSE 7 END\n  |  885 <-> CASE 772: cast WHEN '小计' THEN 0 WHEN NULL THEN 1 WHEN '' THEN 2 WHEN '39 Eggs' THEN 3 WHEN '42 Juice/Dairy' THEN 4 WHEN '44 Gourmet/Protein' THEN 5 WHEN '48 Bread' THEN 6 WHEN '56 Fruit' THEN 7 WHEN '57 Vegetables' THEN 8 WHEN '66 Beef/ Lamb' THEN 9 WHEN '72 Deli' THEN 10 WHEN '75 Seafood' THEN 11 WHEN '76 Meat' THEN 12 WHEN '77 Bakery' THEN 13 WHEN '79 Sam\\'s Cafe' THEN 14 WHEN '86 Pre-Packaged Seafood' THEN 15 WHEN '89 Hms/Asian Pastry' THEN 16 WHEN '91 Pre-Packaged Meat' THEN 17 WHEN '96 P.I. Beef/ Lamb' THEN 18 WHEN 'FR1&FR3' THEN 19 WHEN 'FR2&FR4' THEN 20 ELSE 21 END\n  |  common expressions:\n  |  918 <-> [844: sum, DECIMAL128(38,8), true] / [829: sum, DECIMAL128(38,8), true]\n  |  919 <-> [846: sum, DECIMAL128(38,8), true] / [829: sum, DECIMAL128(38,8), true]\n  |  920 <-> [848: sum, DECIMAL128(38,8), true] / [829: sum, DECIMAL128(38,8), true]\n  |  921 <-> [838: sum, DECIMAL128(38,8), true] / [831: sum, DECIMAL128(38,8), true]\n  |  922 <-> [837: sum, DECIMAL128(38,8), true] / [831: sum, DECIMAL128(38,8), true]\n  |  923 <-> [836: sum, DECIMAL128(38,8), true] / [831: sum, DECIMAL128(38,8), true]\n  |  924 <-> [845: sum, DECIMAL128(38,8), true] / [830: sum, DECIMAL128(38,8), true]\n  |  925 <-> [847: sum, DECIMAL128(38,8), true] / [830: sum, DECIMAL128(38,8), true]\n  |  926 <-> [849: sum, DECIMAL128(38,8), true] / [830: sum, DECIMAL128(38,8), true]\n  |  927 <-> [850: sum, DECIMAL128(38,8), true] / [829: sum, DECIMAL128(38,8), true]\n  |  928 <-> [833: sum, DECIMAL128(38,8), true] / [834: sum, DECIMAL128(38,8), true]\n  |  929 <-> abs[([836: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true]\n  |  930 <-> abs[([837: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true]\n  |  931 <-> abs[([838: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true]\n  |  932 <-> abs[([839: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true]\n  |  933 <-> [842: sum, DECIMAL128(38,8), true] / [829: sum, DECIMAL128(38,8), true]\n  |  934 <-> [918: divide, DECIMAL128(38,12), true] - [921: divide, DECIMAL128(38,12), true]\n  |  935 <-> [919: divide, DECIMAL128(38,12), true] - [922: divide, DECIMAL128(38,12), true]\n  |  936 <-> [920: divide, DECIMAL128(38,12), true] - [923: divide, DECIMAL128(38,12), true]\n  |  937 <-> [918: divide, DECIMAL128(38,12), true] - [924: divide, DECIMAL128(38,12), true]\n  |  938 <-> [919: divide, DECIMAL128(38,12), true] - [925: divide, DECIMAL128(38,12), true]\n  |  939 <-> [920: divide, DECIMAL128(38,12), true] - [926: divide, DECIMAL128(38,12), true]\n  |  940 <-> -1 * [929: abs, DECIMAL128(38,8), true]\n  |  941 <-> -1 * [930: abs, DECIMAL128(38,8), true]\n  |  942 <-> -1 * [931: abs, DECIMAL128(38,8), true]\n  |  943 <-> [835: sum, DECIMAL128(38,8), true] - [940: multiply, DECIMAL128(38,8), true]\n  |  944 <-> [943: subtract, DECIMAL128(38,8), true] - [941: multiply, DECIMAL128(38,8), true]\n  |  945 <-> [944: subtract, DECIMAL128(38,8), true] - [942: multiply, DECIMAL128(38,8), true]\n  |  946 <-> [945: subtract, DECIMAL128(38,8), true] - [932: abs, DECIMAL128(38,8), true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_040-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 8.0] ESTIMATE\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 22.0] ESTIMATE\n  |  \n  12:AGGREGATE (merge finalize)\n  |  aggregate: sum[([825: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([826: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([827: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([828: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([829: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([830: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([831: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], max[([832: max, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([833: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([834: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([835: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([836: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([837: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([838: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([839: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([840: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([841: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([842: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([843: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([844: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([845: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([846: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([847: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([848: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([849: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([850: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([851: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([852: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([853: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([854: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true]\n  |  group by: [771: mock_040, VARCHAR(2000), true], [772: cast, VARCHAR(2000), true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_040-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * max-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 8.0] ESTIMATE\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 22.0] ESTIMATE\n  |  \n  11:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [771: mock_040, VARCHAR(2000), true], [772: cast, VARCHAR(2000), true]\n     cardinality: 2\n\nPLAN FRAGMENT 2(F00)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 771: mock_040, 772: cast\n  OutPut Exchange id: 11\n\n  10:AGGREGATE (update serialize)\n  |  STREAMING\n  |  aggregate: sum[([777: mock_009, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([820: mock_041, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([778: mock_008, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([779: mock_007, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([775: mock_004, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([801: mock_006, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([776: mock_005, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], max[([822: sum, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([783: mock_025, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([823: case, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([800: mock_023, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([794: expr, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([788: mock_018, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([786: mock_043, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([796: mock_011, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([805: mock_027, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([824: case, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([795: mock_010, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([813: mock_012, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([785: mock_042, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([806: mock_044, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([787: mock_017, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([807: mock_019, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([793: mock_049, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([811: mock_051, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([799: mock_022, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([816: mock_024, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([818: mock_032, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([817: case, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true], sum[([819: mock_033, DECIMAL128(38,8), true]); args: DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true]\n  |  group by: [771: mock_040, VARCHAR(2000), true], [772: cast, VARCHAR(2000), true]\n  |  cardinality: 2\n  |  column statistics: \n  |  * mock_040-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * max-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  9:Project\n  |  output columns:\n  |  771 <-> [771: mock_040, VARCHAR(2000), true]\n  |  772 <-> [772: cast, VARCHAR(2000), true]\n  |  775 <-> [775: mock_004, DECIMAL128(38,8), true]\n  |  776 <-> [776: mock_005, DECIMAL128(38,8), true]\n  |  777 <-> [777: mock_009, DECIMAL128(38,8), true]\n  |  778 <-> [778: mock_008, DECIMAL128(38,8), true]\n  |  779 <-> [779: mock_007, DECIMAL128(38,8), true]\n  |  783 <-> [783: mock_025, DECIMAL128(38,8), true]\n  |  785 <-> [785: mock_042, DECIMAL128(38,8), true]\n  |  786 <-> [786: mock_043, DECIMAL128(38,8), true]\n  |  787 <-> [787: mock_017, DECIMAL128(38,8), true]\n  |  788 <-> [788: mock_018, DECIMAL128(38,8), true]\n  |  793 <-> [793: mock_049, DECIMAL128(38,8), true]\n  |  794 <-> [794: expr, DECIMAL128(38,8), true]\n  |  795 <-> [795: mock_010, DECIMAL128(38,8), true]\n  |  796 <-> [796: mock_011, DECIMAL128(38,8), true]\n  |  799 <-> [799: mock_022, DECIMAL128(38,8), true]\n  |  800 <-> [800: mock_023, DECIMAL128(38,8), true]\n  |  801 <-> [801: mock_006, DECIMAL128(38,8), true]\n  |  805 <-> [805: mock_027, DECIMAL128(38,8), true]\n  |  806 <-> [806: mock_044, DECIMAL128(38,8), true]\n  |  807 <-> [807: mock_019, DECIMAL128(38,8), true]\n  |  811 <-> [811: mock_051, DECIMAL128(38,8), true]\n  |  813 <-> [813: mock_012, DECIMAL128(38,8), true]\n  |  816 <-> [816: mock_024, DECIMAL128(38,8), true]\n  |  817 <-> [817: case, DECIMAL128(38,8), true]\n  |  818 <-> [818: mock_032, DECIMAL128(38,8), true]\n  |  819 <-> [819: mock_033, DECIMAL128(38,8), true]\n  |  820 <-> [820: mock_041, DECIMAL128(38,8), true]\n  |  822 <-> [822: sum, DECIMAL128(38,8), true]\n  |  823 <-> if[([783: mock_025, DECIMAL128(38,8), true] = 0, 0, [775: mock_004, DECIMAL128(38,8), true]); args: BOOLEAN,DECIMAL128,DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true]\n  |  824 <-> if[([805: mock_027, DECIMAL128(38,8), true] = 0, 0, [801: mock_006, DECIMAL128(38,8), true]); args: BOOLEAN,DECIMAL128,DECIMAL128; result: DECIMAL128(38,8); args nullable: true; result nullable: true]\n  |  cardinality: 4\n  |  column statistics: \n  |  * mock_040-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_004-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_025-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_042-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_043-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_017-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_018-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_049-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_022-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_023-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_027-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_044-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_019-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_051-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_012-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_024-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_032-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_033-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_041-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  0:UNION\n  |  output exprs:\n  |      [771, VARCHAR(2000), true] | [772, VARCHAR(2000), true] | [775, DECIMAL128(38,8), true] | [776, DECIMAL128(38,8), true] | [777, DECIMAL128(38,8), true] | [778, DECIMAL128(38,8), true] | [779, DECIMAL128(38,8), true] | [783, DECIMAL128(38,8), true] | [785, DECIMAL128(38,8), true] | [786, DECIMAL128(38,8), true] | [787, DECIMAL128(38,8), true] | [788, DECIMAL128(38,8), true] | [793, DECIMAL128(38,8), true] | [794, DECIMAL128(38,8), true] | [795, DECIMAL128(38,8), true] | [796, DECIMAL128(38,8), true] | [799, DECIMAL128(38,8), true] | [800, DECIMAL128(38,8), true] | [801, DECIMAL128(38,8), true] | [805, DECIMAL128(38,8), true] | [806, DECIMAL128(38,8), true] | [807, DECIMAL128(38,8), true] | [811, DECIMAL128(38,8), true] | [813, DECIMAL128(38,8), true] | [816, DECIMAL128(38,8), true] | [817, DECIMAL128(38,8), true] | [818, DECIMAL128(38,8), true] | [819, DECIMAL128(38,8), true] | [820, DECIMAL128(38,8), true] | [822, DECIMAL128(38,8), true]\n  |  child exprs:\n  |      [150: mock_040, VARCHAR(2000), true] | [192: cast, VARCHAR(2000), true] | [10: mock_004, DECIMAL128(38,8), true] | [11: mock_005, DECIMAL128(38,8), true] | [12: mock_009, DECIMAL128(38,8), true] | [13: mock_008, DECIMAL128(38,8), true] | [14: mock_007, DECIMAL128(38,8), true] | [18: mock_025, DECIMAL128(38,8), true] | [20: mock_042, DECIMAL128(38,8), true] | [21: mock_043, DECIMAL128(38,8), true] | [22: mock_017, DECIMAL128(38,8), true] | [23: mock_018, DECIMAL128(38,8), true] | [28: mock_049, DECIMAL128(38,8), true] | [190: expr, DECIMAL128(38,8), true] | [30: mock_010, DECIMAL128(38,8), true] | [31: mock_011, DECIMAL128(38,8), true] | [34: mock_022, DECIMAL128(38,8), true] | [35: mock_023, DECIMAL128(38,8), true] | [36: mock_006, DECIMAL128(38,8), true] | [40: mock_027, DECIMAL128(38,8), true] | [41: mock_044, DECIMAL128(38,8), true] | [42: mock_019, DECIMAL128(38,8), true] | [46: mock_051, DECIMAL128(38,8), true] | [48: mock_012, DECIMAL128(38,8), true] | [51: mock_024, DECIMAL128(38,8), true] | [191: case, DECIMAL128(38,8), true] | [53: mock_032, DECIMAL128(38,8), true] | [54: mock_033, DECIMAL128(38,8), true] | [57: mock_041, DECIMAL128(38,8), true] | [147: sum, DECIMAL128(38,8), true]\n  |      [342: mock_040, VARCHAR(2000), true] | [384: cast, VARCHAR(2000), true] | [202: mock_004, DECIMAL128(38,8), true] | [203: mock_005, DECIMAL128(38,8), true] | [204: mock_009, DECIMAL128(38,8), true] | [205: mock_008, DECIMAL128(38,8), true] | [206: mock_007, DECIMAL128(38,8), true] | [210: mock_025, DECIMAL128(38,8), true] | [212: mock_042, DECIMAL128(38,8), true] | [213: mock_043, DECIMAL128(38,8), true] | [214: mock_017, DECIMAL128(38,8), true] | [215: mock_018, DECIMAL128(38,8), true] | [220: mock_049, DECIMAL128(38,8), true] | [382: expr, DECIMAL128(38,8), true] | [222: mock_010, DECIMAL128(38,8), true] | [223: mock_011, DECIMAL128(38,8), true] | [226: mock_022, DECIMAL128(38,8), true] | [227: mock_023, DECIMAL128(38,8), true] | [228: mock_006, DECIMAL128(38,8), true] | [232: mock_027, DECIMAL128(38,8), true] | [233: mock_044, DECIMAL128(38,8), true] | [234: mock_019, DECIMAL128(38,8), true] | [238: mock_051, DECIMAL128(38,8), true] | [240: mock_012, DECIMAL128(38,8), true] | [243: mock_024, DECIMAL128(38,8), true] | [383: case, DECIMAL128(38,8), true] | [245: mock_032, DECIMAL128(38,8), true] | [246: mock_033, DECIMAL128(38,8), true] | [249: mock_041, DECIMAL128(38,8), true] | [339: sum, DECIMAL128(38,8), true]\n  |      [576: cast, VARCHAR(2000), true] | [535: mock_086, VARCHAR(2000), true] | [394: mock_004, DECIMAL128(38,8), true] | [395: mock_005, DECIMAL128(38,8), true] | [396: mock_009, DECIMAL128(38,8), true] | [397: mock_008, DECIMAL128(38,8), true] | [398: mock_007, DECIMAL128(38,8), true] | [402: mock_025, DECIMAL128(38,8), true] | [404: mock_042, DECIMAL128(38,8), true] | [405: mock_043, DECIMAL128(38,8), true] | [406: mock_017, DECIMAL128(38,8), true] | [407: mock_018, DECIMAL128(38,8), true] | [412: mock_049, DECIMAL128(38,8), true] | [574: expr, DECIMAL128(38,8), true] | [414: mock_010, DECIMAL128(38,8), true] | [415: mock_011, DECIMAL128(38,8), true] | [418: mock_022, DECIMAL128(38,8), true] | [419: mock_023, DECIMAL128(38,8), true] | [420: mock_006, DECIMAL128(38,8), true] | [424: mock_027, DECIMAL128(38,8), true] | [425: mock_044, DECIMAL128(38,8), true] | [426: mock_019, DECIMAL128(38,8), true] | [430: mock_051, DECIMAL128(38,8), true] | [432: mock_012, DECIMAL128(38,8), true] | [435: mock_024, DECIMAL128(38,8), true] | [575: case, DECIMAL128(38,8), true] | [437: mock_032, DECIMAL128(38,8), true] | [438: mock_033, DECIMAL128(38,8), true] | [441: mock_041, DECIMAL128(38,8), true] | [531: sum, DECIMAL128(38,8), true]\n  |      [769: cast, VARCHAR(2000), true] | [770: cast, VARCHAR(2000), true] | [586: mock_004, DECIMAL128(38,8), true] | [587: mock_005, DECIMAL128(38,8), true] | [588: mock_009, DECIMAL128(38,8), true] | [589: mock_008, DECIMAL128(38,8), true] | [590: mock_007, DECIMAL128(38,8), true] | [594: mock_025, DECIMAL128(38,8), true] | [596: mock_042, DECIMAL128(38,8), true] | [597: mock_043, DECIMAL128(38,8), true] | [598: mock_017, DECIMAL128(38,8), true] | [599: mock_018, DECIMAL128(38,8), true] | [604: mock_049, DECIMAL128(38,8), true] | [767: expr, DECIMAL128(38,8), true] | [606: mock_010, DECIMAL128(38,8), true] | [607: mock_011, DECIMAL128(38,8), true] | [610: mock_022, DECIMAL128(38,8), true] | [611: mock_023, DECIMAL128(38,8), true] | [612: mock_006, DECIMAL128(38,8), true] | [616: mock_027, DECIMAL128(38,8), true] | [617: mock_044, DECIMAL128(38,8), true] | [618: mock_019, DECIMAL128(38,8), true] | [622: mock_051, DECIMAL128(38,8), true] | [624: mock_012, DECIMAL128(38,8), true] | [627: mock_024, DECIMAL128(38,8), true] | [768: case, DECIMAL128(38,8), true] | [629: mock_032, DECIMAL128(38,8), true] | [630: mock_033, DECIMAL128(38,8), true] | [633: mock_041, DECIMAL128(38,8), true] | [723: sum, DECIMAL128(38,8), true]\n  |  pass-through-operands: all\n  |  cardinality: 4\n  |  column statistics: \n  |  * mock_040-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_004-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_005-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_009-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_008-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_007-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_025-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_042-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_043-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_017-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_018-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_049-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_010-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_011-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_022-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_023-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_006-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_027-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_044-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_019-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_051-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_012-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_024-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_032-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_033-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_041-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * case-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----4:EXCHANGE\n  |       cardinality: 1\n  |    \n  |----6:EXCHANGE\n  |       cardinality: 1\n  |    \n  |----8:EXCHANGE\n  |       cardinality: 1\n  |    \n  2:EXCHANGE\n     cardinality: 1\n\nPLAN FRAGMENT 3(F04)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 08\n\n  7:EMPTYSET\n     cardinality: 1\n     column statistics: \n     * mock_004-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_005-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_009-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_008-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_007-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_025-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_042-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_043-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_017-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_018-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_049-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_010-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_011-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_022-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_023-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_006-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_027-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_044-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_019-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_051-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_012-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_024-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_032-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_033-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_041-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * case-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n\nPLAN FRAGMENT 4(F03)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 06\n\n  5:EMPTYSET\n     cardinality: 1\n     column statistics: \n     * mock_004-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_005-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_009-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_008-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_007-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_025-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_042-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_043-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_017-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_018-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_049-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_010-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_011-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_022-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_023-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_006-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_027-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_044-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_019-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_051-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_012-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_024-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_032-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_033-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_041-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_086-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * case-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n\nPLAN FRAGMENT 5(F02)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 04\n\n  3:EMPTYSET\n     cardinality: 1\n     column statistics: \n     * mock_004-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_005-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_009-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_008-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_007-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_025-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_042-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_043-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_017-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_018-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_049-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_010-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_011-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_022-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_023-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_006-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_027-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_044-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_019-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_051-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_012-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_024-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_032-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_033-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_041-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_040-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * case-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n\nPLAN FRAGMENT 6(F01)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 02\n\n  1:EMPTYSET\n     cardinality: 1\n     column statistics: \n     * mock_004-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_005-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_009-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_008-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_007-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_025-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_042-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_043-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_017-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_018-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_049-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_010-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_011-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_022-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_023-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_006-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_027-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_044-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_019-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_051-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_012-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_024-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_032-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_033-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_041-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_040-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * case-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n","session_variables":"{\"partial_update_mode\":\"auto\",\"cbo_cte_reuse\":true,\"character_set_connection\":\"utf8\",\"cbo_use_correlated_join_estimate\":true,\"enable_insert_strict\":true,\"enable_connector_adaptive_io_tasks\":true,\"tx_isolation\":\"REPEATABLE-READ\",\"enable_hive_metadata_cache_with_insert\":false,\"automv_prune_rollup_unable_aggregate_with_conjuncts\":true,\"hive_temp_staging_dir\":\"/tmp/starrocks\",\"cbo_cte_reuse_rate_v2\":1.15,\"enable_datacache_io_adaptor\":false,\"character_set_results\":\"utf8\",\"materialized_view_union_rewrite_mode\":0,\"enable_count_star_optimization\":true,\"enable_iceberg_column_statistics\":false,\"automv_card_rowcount_ratio_lwm\":0,\"thrift_plan_protocol\":\"binary\",\"enable_plan_serialize_concurrently\":true,\"materialized_view_max_relation_mapping_size\":10,\"global_runtime_filter_build_min_size\":131072,\"enable_iceberg_identity_column_optimize\":true,\"enable_view_based_mv_rewrite\":false,\"query_excluding_mv_names\":\"\",\"enable_rewrite_simple_agg_to_meta_scan\":false,\"enable_ukfk_opt\":false,\"enable_adaptive_sink_dop\":true,\"enable_ukfk_join_reorder\":false,\"consistent_hash_virtual_number\":32,\"warehouse\":\"default_warehouse\",\"enable_profile\":false,\"load_mem_limit\":34359738368,\"cbo_eq_base_type\":\"varchar\",\"enable_materialized_view_for_insert\":false,\"large_decimal_underlying_type\":\"panic\",\"sql_safe_updates\":0,\"runtime_filter_early_return_selectivity\":0.05,\"enable_local_shuffle_agg\":true,\"disable_function_fold_constants\":false,\"enable_query_queue\":true,\"enable_cbo_view_based_mv_rewrite\":false,\"automv_sampling_buckets\":512,\"select_ratio_threshold\":0.15,\"query_delivery_timeout\":300,\"collation_database\":\"utf8_general_ci\",\"spill_mem_table_size\":104857600,\"follower_query_forward_mode\":\"\",\"orc_use_column_names\":false,\"cbo_use_lock_db\":false,\"new_planner_agg_stage\":0,\"enable_strict_order_by\":true,\"hash_join_interpolate_passthrough\":false,\"use_compute_nodes\":-1,\"collation_connection\":\"utf8_general_ci\",\"enable_rewrite_bitmap_union_to_bitamp_agg\":false,\"enable_force_rule_based_mv_rewrite\":false,\"enable_array_distinct_after_agg_opt\":true,\"resource_group\":\"\",\"always_collect_low_card_dict\":false,\"enable_materialized_view_plan_cache\":true,\"spill_operator_max_bytes\":1048576000,\"cbo_max_reorder_node_use_dp\":10,\"cbo_prepare_metadata_thread_pool_size\":16,\"enable_result_sink_accumulate\":true,\"enable_hive_column_stats\":true,\"enable_async_profile\":false,\"enable_groupby_use_output_alias\":false,\"global_runtime_filter_wait_timeout\":20,\"forward_to_leader\":false,\"count_distinct_column_buckets\":1024,\"cross_join_cost_penalty\":1000000,\"query_cache_agg_cardinality_limit\":5000000,\"cboPushDownAggregateMode_v1\":-1,\"window_partition_mode\":1,\"enable_tablet_internal_parallel_v2\":true,\"interpolate_passthrough\":true,\"enable_incremental_mv\":false,\"cbo_push_down_topn_limit\":0,\"automv_enable_semi_anti_join\":true,\"SQL_AUTO_IS_NULL\":false,\"event_scheduler\":\"OFF\",\"max_pipeline_dop\":64,\"broadcast_right_table_scale_factor\":10,\"materialized_view_rewrite_mode\":\"DEFAULT\",\"enable_read_iceberg_puffin_ndv\":true,\"enable_write_hive_external_table\":false,\"enable_simplify_case_when\":true,\"enable_aggregation_pipeline_share_limit\":true,\"runtime_join_filter_push_down_limit\":1024000,\"trace_log_mode\":\"command\",\"enable_scan_datacache\":true,\"big_query_log_cpu_second_threshold\":480,\"div_precision_increment\":4,\"runtime_adaptive_dop_max_block_rows_per_driver_seq\":16384,\"log_rejected_record_num\":0,\"enable_short_circuit\":false,\"cbo_push_down_distinct_below_window\":true,\"sql_mode_v2\":32,\"prefer_cte_rewrite\":false,\"optimizer_materialized_view_timelimit\":1000,\"hdfs_backend_selector_scan_range_shuffle\":false,\"pipeline_profile_level\":1,\"parallel_fragment_exec_instance_num\":2,\"max_scan_key_num\":-1,\"net_read_timeout\":60,\"streaming_preaggregation_mode\":\"auto\",\"hive_partition_stats_sample_size\":3000,\"enable_mv_planner\":false,\"enable_collect_table_level_scan_stats\":true,\"enable_populate_datacache\":true,\"query_debug_options\":\"\",\"profile_timeout\":2,\"cbo_push_down_aggregate\":\"global\",\"spill_encode_level\":7,\"enable_query_dump\":false,\"global_runtime_filter_build_max_size\":67108864,\"enable_rewrite_sum_by_associative_rule\":true,\"query_cache_hot_partition_num\":3,\"enable_prune_complex_types\":true,\"query_cache_type\":0,\"max_parallel_scan_instance_num\":-1,\"enable_dynamic_prune_scan_range\":true,\"query_cache_entry_max_rows\":409600,\"connector_io_tasks_per_scan_operator\":4,\"enable_materialized_view_union_rewrite\":true,\"sql_quote_show_create\":true,\"scan_or_to_union_threshold\":50000000,\"enable_materialized_view_rewrite_partition_compensate\":true,\"enable_exchange_pass_through\":true,\"runtime_profile_report_interval\":10,\"automv_use_bitmap_count_distinct\":true,\"query_cache_entry_max_bytes\":4194304,\"enable_partition_column_value_only_optimization\":true,\"connector_max_split_size\":67108864,\"interleaving_group_size\":10,\"automv_sampling_ratio_low_bound\":0.01,\"enable_exchange_perf\":false,\"enable_prepare_stmt\":true,\"workgroup_id\":0,\"enable_rewrite_groupingsets_to_union_all\":false,\"transmission_compression_type\":\"NO_COMPRESSION\",\"interactive_timeout\":3600,\"use_page_cache\":true,\"automv_push_down_agg_below_semi_anti_join\":false,\"big_query_log_scan_bytes_threshold\":10737418240,\"collation_server\":\"utf8_general_ci\",\"cbo_decimal_cast_string_strict\":true,\"enable_hyperscan_vec\":true,\"enable_datacache_async_populate_mode\":false,\"cbo_enable_predicate_subfield_path\":true,\"tablet_internal_parallel_mode\":\"auto\",\"enable_pipeline\":true,\"spill_mode\":\"auto\",\"enable_split_scan_predicate_with_date\":false,\"enable_query_debug_trace\":false,\"like_predicate_consolidate_min\":2,\"cbo_materialized_view_rewrite_related_mvs_limit\":64,\"enable_show_all_variables\":true,\"full_sort_max_buffered_bytes\":16777216,\"catalog\":\"default_catalog\",\"wait_timeout\":28800,\"automv_partial_rollup_min_agg_pieces\":3,\"max_buckets_per_be_to_use_balancer_assignment\":6,\"enable_query_tablet_affinity\":false,\"transmission_encode_level\":7,\"query_including_mv_names\":\"\",\"transaction_isolation\":\"REPEATABLE-READ\",\"automv_use_array_agg_count_distinct\":false,\"enable_global_runtime_filter\":true,\"enable_load_profile\":false,\"enable_rewrite_simple_agg_to_hdfs_scan\":false,\"enable_plan_validation\":true,\"load_transmission_compression_type\":\"NO_COMPRESSION\",\"global_runtime_filter_rpc_http_min_size\":67108864,\"cbo_materialized_view_rewrite_rule_output_limit\":3,\"automv_card_rowcount_ratio_hwm\":0.5,\"cbo_enable_low_cardinality_optimize\":true,\"scan_use_query_mem_ratio\":0.3,\"datacache_evict_probability\":100,\"enable_analyze_phase_prune_columns\":false,\"connector_huge_file_size\":536870912,\"new_planner_optimize_timeout\":60000,\"enable_outer_join_reorder\":true,\"force_schedule_local\":false,\"hudi_mor_force_jni_reader\":false,\"enable_agg_spill_preaggregation\":true,\"cbo_enable_greedy_join_reorder\":true,\"range_pruner_max_predicate\":100,\"enable_rbo_table_prune\":false,\"spillable_operator_mask\":-1,\"rpc_http_min_size\":2147482624,\"enable_file_metacache\":false,\"cbo_debug_alive_backend_number\":0,\"global_runtime_filter_probe_min_size\":102400,\"scan_or_to_union_limit\":1,\"automv_default_partition_by_time_granule\":\"day\",\"enable_cbo_table_prune\":false,\"enable_parallel_merge\":true,\"cbo_materialized_view_rewrite_candidate_limit\":12,\"skew_join_use_mcv_count\":5,\"cbo_derive_join_is_null_predicate\":true,\"nested_mv_rewrite_max_level\":3,\"enable_materialized_view_text_match_rewrite\":true,\"big_query_profile_threshold\":\"0s\",\"net_write_timeout\":60,\"cbo_prune_shuffle_column_rate\":0.1,\"spill_revocable_max_bytes\":0,\"hash_join_push_down_right_table\":true,\"max_ukfk_join_reorder_scale_ratio\":100,\"pipeline_sink_dop\":0,\"automv_relative_error_bound\":0.05,\"broadcast_row_limit\":15000000,\"enable_prune_iceberg_manifest\":true,\"exec_mem_limit\":42949672960,\"enable_sort_aggregate\":false,\"query_cache_force_populate\":false,\"computation_fragment_scheduling_policy\":\"COMPUTE_NODES_ONLY\",\"runtime_filter_on_exchange_node\":false,\"disable_join_reorder\":false,\"enable_rule_based_materialized_view_rewrite\":true,\"global_runtime_filter_rpc_timeout\":400,\"connector_scan_use_query_mem_ratio\":0.3,\"net_buffer_length\":16384,\"cbo_prune_subfield\":true,\"full_sort_max_buffered_rows\":1024000,\"automv_use_cardinality_estimation\":true,\"query_timeout\":1800,\"connector_io_tasks_slow_io_latency_ms\":50,\"cbo_max_reorder_node\":50,\"automv_sampling_timeout\":300000,\"enable_distinct_column_bucketization\":false,\"enable_big_query_log\":true,\"analyze_mv\":\"sample\",\"runtime_filter_scan_wait_time\":20,\"enable_sync_materialized_view_rewrite\":true,\"prefer_compute_node\":false,\"enable_strict_type\":false,\"automv_enable_complex_derived_dimensions\":true,\"enable_table_prune_on_update\":false,\"group_concat_max_len\":65535,\"enable_stats_to_optimize_skew_join\":false,\"parse_tokens_limit\":3500000,\"chunk_size\":4096,\"global_runtime_filter_probe_min_selectivity\":0.5,\"query_mem_limit\":42949672960,\"enable_filter_unused_columns_in_scan_stage\":false,\"enable_materialized_view_single_table_view_delta_rewrite\":false,\"enable_prune_complex_types_in_unnest\":true,\"automv_max_calculate_steps\":2147483647,\"auto_increment_increment\":1,\"sql_dialect\":\"StarRocks\",\"automv_use_hll_count_distinct\":false,\"enable_per_bucket_optimize\":true,\"automv_enable_complex_derived_metrics\":false,\"big_query_log_scan_rows_threshold\":1000000000,\"character_set_client\":\"utf8\",\"autocommit\":true,\"enable_column_expr_predicate\":true,\"enable_partition_bucket_optimize\":false,\"max_ukfk_join_reorder_fk_rows\":100000000,\"enable_runtime_adaptive_dop\":false,\"cbo_cte_max_limit\":10,\"connector_sink_compression_codec\":\"uncompressed\",\"automv_min_sampling_rows\":1073741824,\"storage_engine\":\"olap\",\"spill_operator_min_bytes\":10485760,\"cbo_enable_dp_join_reorder\":true,\"tx_visible_wait_timeout\":300,\"materialized_view_join_same_table_permutation_limit\":5,\"enable_materialized_view_view_delta_rewrite\":true,\"cbo_max_reorder_node_use_exhaustive\":4,\"enable_sql_digest\":false,\"spill_mem_table_num\":2,\"enable_spill\":false,\"enable_materialized_view_rewrite_greedy_mode\":false,\"pipeline_dop\":4,\"single_node_exec_plan\":false,\"full_sort_late_materialization_v2\":false,\"automv_max_order_by_columns\":3,\"join_implementation_mode_v2\":\"auto\",\"enable_connector_split_io_tasks\":true,\"sql_select_limit\":9223372036854775807,\"enable_materialized_view_rewrite\":true,\"materialized_view_subuqery_text_match_max_count\":4,\"statistic_collect_parallel\":1,\"hdfs_backend_selector_hash_algorithm\":\"consistent\",\"enable_expr_prune_partition\":true,\"enable_topn_runtime_filter\":true,\"disable_colocate_join\":false,\"max_pushdown_conditions_per_column\":-1,\"default_table_compression\":\"lz4_frame\",\"runtime_adaptive_dop_max_output_amplification_factor\":0,\"skew_join_rand_range\":1000,\"choose_execute_instances_mode\":\"LOCALITY\",\"skew_join_data_skew_threshold\":0.2,\"innodb_read_only\":true,\"spill_mem_limit_threshold\":0.5,\"cbo_reorder_threshold_use_exhaustive\":6,\"enable_predicate_reorder\":false,\"enable_query_cache\":true,\"transaction_read_only\":\"false\",\"max_allowed_packet\":1048576,\"enable_parallel_prepare_metadata\":false,\"time_zone\":\"Asia/Shanghai\",\"enable_multicolumn_global_runtime_filter\":false,\"character_set_server\":\"utf8\",\"cbo_use_nth_exec_plan\":0,\"io_tasks_per_scan_operator\":16,\"parallel_exchange_instance_num\":-1,\"enable_shared_scan\":false,\"audit_execute_stmt\":false,\"cbo_derive_range_join_predicate\":false,\"allow_default_partition\":false,\"paimon_force_jni_reader\":false,\"enable_pipeline_level_shuffle\":true}","be_number":19,"be_core_stat":{"numOfHardwareCoresPerBe":"{\"311686291\":64,\"311686290\":64,\"311686289\":64,\"7643094\":64,\"311686288\":64,\"311686292\":64,\"66938448\":64,\"11395868\":64,\"66938447\":64,\"66938446\":64,\"11395865\":64,\"11395864\":64,\"11395866\":64,\"311686282\":64,\"11395863\":64,\"311686281\":64,\"11395862\":64,\"311686287\":64,\"311686285\":64,\"311686284\":64}","cachedAvgNumOfHardwareCores":-1},"exception":[],"version":"3.2.10-ee","commit_version":"8946e93"}