{
    "statement": "WITH tbl_mock_010 (mock_009) AS (SELECT max(tbl_mock_012.mock_004) AS mock_009\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_012\nWHERE ((CAST(tbl_mock_012.mock_004 AS DATE)) < (str_to_date('2023-08-28T12:09:58', '%Y-%m-%dT%T'))) AND ((CAST(tbl_mock_012.mock_004 AS DATE)) >= (str_to_date('2023-03-01T00:00:00', '%Y-%m-%dT%T')))\nGROUP BY CAST((date_add(CAST((date_sub(date_trunc('week', date_add(CAST((date_add(CAST(tbl_mock_012.mock_004 AS DATETIME), INTERVAL 1 DAY)) AS DATETIME), INTERVAL 1 DAY)), INTERVAL 1 DAY)) AS DATETIME), INTERVAL 5 DAY)) AS DATETIME)) , tbl_mock_014 (mock_013) AS (SELECT '2023-08-27' AS mock_013) , tbl_mock_016 (mock_009) AS (SELECT tbl_mock_010.mock_009\nFROM tbl_mock_010 AS tbl_mock_010 UNION SELECT tbl_mock_014.mock_013\nFROM tbl_mock_014 AS tbl_mock_014) , tbl_mock_017 (mock_009) AS (SELECT tbl_mock_016.mock_009\nFROM tbl_mock_016\nGROUP BY tbl_mock_016.mock_009) SELECT CAST((date_add(CAST((date_sub(date_trunc('week', date_add(CAST((date_add(CAST(tbl_mock_018.mock_004 AS DATETIME), INTERVAL 1 DAY)) AS DATETIME), INTERVAL 1 DAY)), INTERVAL 1 DAY)) AS DATETIME), INTERVAL 5 DAY)) AS DATETIME) AS mock_008, coalesce(sum(tbl_mock_018.mock_002), 0) AS mock_002\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_018 LEFT OUTER JOIN tbl_mock_017 AS tbl_mock_017 ON tbl_mock_018.mock_004 = tbl_mock_017.mock_009\nWHERE (((tbl_mock_017.mock_009 IS NOT NULL) AND (tbl_mock_018.mock_004 <= '2023-08-27')) AND ((CAST(tbl_mock_018.mock_004 AS DATE)) < (str_to_date('2023-08-28T12:09:58', '%Y-%m-%dT%T')))) AND ((CAST(tbl_mock_018.mock_004 AS DATE)) >= (str_to_date('2023-03-01T00:00:00', '%Y-%m-%dT%T')))\nGROUP BY CAST((date_add(CAST((date_sub(date_trunc('week', date_add(CAST((date_add(CAST(tbl_mock_018.mock_004 AS DATETIME), INTERVAL 1 DAY)) AS DATETIME), INTERVAL 1 DAY)), INTERVAL 1 DAY)) AS DATETIME), INTERVAL 5 DAY)) AS DATETIME) ORDER BY mock_002 DESC  LIMIT 50000",
    "table_meta": {
        "db_mock_000.tbl_mock_001": "CREATE TABLE db_mock_000.tbl_mock_001 (\nmock_006 varchar(1048576) ,\nmock_005 varchar(1048576) ,\nmock_003 varchar(1048576) ,\nmock_002 double ,\nmock_007 varchar(1048576) ,\nmock_004 varchar(1048576) \n) ENGINE= OLAP \nDUPLICATE KEY(mock_006)\nDISTRIBUTED BY HASH(mock_005) BUCKETS 6 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);"
    },
    "table_row_count":{
        "db_mock_000.tbl_mock_001":{
            "tbl_mock_001":1974170435
        }
    },
    "column_statistics": {},
    "explain_info": "PLAN FRAGMENT 0(F07)\n  Output Exprs:50: cast | 52: coalesce\n  Input Partition: UNPARTITIONED\n  RESULT SINK\n\n  21:MERGING-EXCHANGE\n     distribution type: GATHER\n     limit: 50000\n     cardinality: 1\n     column statistics: \n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * coalesce-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n\nPLAN FRAGMENT 1(F06)\n\n  Input Partition: HASH_PARTITIONED: 50: cast\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 21\n\n  20:TOP-N\n  |  order by: [52, DOUBLE, true] DESC\n  |  offset: 0\n  |  limit: 50000\n  |  cardinality: 1\n  |  column statistics: \n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * coalesce-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  19:Project\n  |  output columns:\n  |  50 <-> [50: cast, DATETIME, true]\n  |  52 <-> coalesce[([51: sum, DOUBLE, true], 0.0); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * coalesce-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  18:AGGREGATE (merge finalize)\n  |  aggregate: sum[([51: sum, DOUBLE, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true]\n  |  group by: [50: cast, DATETIME, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * coalesce-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  17:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [50: cast, DATETIME, true]\n     cardinality: 1\n\nPLAN FRAGMENT 2(F05)\n\n  Input Partition: HASH_PARTITIONED: 49: max\n  OutPut Partition: HASH_PARTITIONED: 50: cast\n  OutPut Exchange id: 17\n\n  16:AGGREGATE (update serialize)\n  |  STREAMING\n  |  aggregate: sum[([36: mock_002, DOUBLE, true]); args: DOUBLE; result: DOUBLE; args nullable: true; result nullable: true]\n  |  group by: [50: cast, DATETIME, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * sum-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  15:Project\n  |  output columns:\n  |  36 <-> [36: mock_002, DOUBLE, true]\n  |  50 <-> days_add[(days_sub[(date_trunc[('week', days_add[(days_add[(cast([38: mock_004, VARCHAR, true] as DATETIME), 1); args: DATETIME,INT; result: DATETIME; args nullable: true; result nullable: true], 1); args: DATETIME,INT; result: DATETIME; args nullable: true; result nullable: true]); args: VARCHAR,DATETIME; result: DATETIME; args nullable: true; result nullable: true], 1); args: DATETIME,INT; result: DATETIME; args nullable: true; result nullable: true], 5); args: DATETIME,INT; result: DATETIME; args nullable: true; result nullable: true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  14:HASH JOIN\n  |  join op: INNER JOIN (BUCKET_SHUFFLE(S))\n  |  equal join conjunct: [38: mock_004, VARCHAR, true] = [49: max, VARCHAR, true]\n  |  build runtime filters:\n  |  - filter_id = 0, build_expr = (49: max), remote = false\n  |  output columns: 36, 38\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_004-->[1.6776E9, 1.693152E9, 0.0, 1.0, 1.0] UNKNOWN\n  |  * max-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----13:AGGREGATE (merge finalize)\n  |    |  group by: [49: max, VARCHAR, true]\n  |    |  cardinality: 1\n  |    |  column statistics: \n  |    |  * max-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  \n  |    12:EXCHANGE\n  |       distribution type: SHUFFLE\n  |       partition exprs: [49: max, VARCHAR, true]\n  |       cardinality: 1\n  |    \n  1:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [38: mock_004, VARCHAR, true]\n     cardinality: 1\n     probe runtime filters:\n     - filter_id = 0, probe_expr = (38: mock_004)\n\nPLAN FRAGMENT 3(F02)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 49: max\n  OutPut Exchange id: 12\n\n  11:AGGREGATE (update serialize)\n  |  STREAMING\n  |  group by: [49: max, VARCHAR, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * max-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  2:UNION\n  |  output exprs:\n  |      [49, VARCHAR, true]\n  |  child exprs:\n  |      [46: max, VARCHAR, true]\n  |      [48: expr, VARCHAR, false]\n  |  pass-through-operands: mock_012\n  |  cardinality: 2\n  |  column statistics: \n  |  * max-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----10:EXCHANGE\n  |       cardinality: 1\n  |    \n  7:EXCHANGE\n     cardinality: 1\n\nPLAN FRAGMENT 4(F04)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 10\n\n  9:Project\n  |  output columns:\n  |  48 <-> '2023-08-27'\n  |  cardinality: 1\n  |  column statistics: \n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  8:UNION\n     constant exprs: \n         NULL\n     cardinality: 1\n     column statistics: \n     * -->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 5(F03)\n\n  Input Partition: RANDOM\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 07\n\n  6:Project\n  |  output columns:\n  |  46 <-> [46: max, VARCHAR, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * max-->[1.6776E9, 1.693152E9, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  5:AGGREGATE (update finalize)\n  |  aggregate: max[([44: mock_004, VARCHAR, true]); args: VARCHAR; result: VARCHAR; args nullable: true; result nullable: true]\n  |  group by: [45: cast, DATETIME, true]\n  |  having: 46: max IS NOT NULL, [46: max, VARCHAR, true] <= '2023-08-27', cast([46: max, VARCHAR, true] as mock_003) <= '2023-08-28', cast([46: max, VARCHAR, true] as mock_003) >= '2023-03-01'\n  |  cardinality: 1\n  |  column statistics: \n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * max-->[1.6776E9, 1.693152E9, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  4:Project\n  |  output columns:\n  |  44 <-> [44: mock_004, VARCHAR, true]\n  |  45 <-> days_add[(days_sub[(date_trunc[('week', days_add[(days_add[(cast([44: mock_004, VARCHAR, true] as DATETIME), 1); args: DATETIME,INT; result: DATETIME; args nullable: true; result nullable: true], 1); args: DATETIME,INT; result: DATETIME; args nullable: true; result nullable: true]); args: VARCHAR,DATETIME; result: DATETIME; args nullable: true; result nullable: true], 1); args: DATETIME,INT; result: DATETIME; args nullable: true; result nullable: true], 5); args: DATETIME,INT; result: DATETIME; args nullable: true; result nullable: true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_004-->[1.6776E9, 1.693152E9, 0.0, 1.0, 1.0] UNKNOWN\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  3:OlapScanNode\n     table: mock_001, rollup: mock_001\n     preAggregation: on\n     Predicates: cast([44: mock_004, VARCHAR, true] as mock_003) <= '2023-08-28', cast([44: mock_004, VARCHAR, true] as mock_003) >= '2023-03-01'\n     partitionsRatio=0/1, tabletsRatio=0/0\n     tabletList=\n     actualRows=0, avgRowSize=2.0\n     cardinality: 1\n     column statistics: \n     * mock_004-->[1.6776E9, 1.693152E9, 0.0, 1.0, 1.0] UNKNOWN\n     * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n\nPLAN FRAGMENT 6(F00)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 38: mock_004\n  OutPut Exchange id: 01\n\n  0:OlapScanNode\n     table: mock_001, rollup: mock_001\n     preAggregation: on\n     Predicates: [38: mock_004, VARCHAR, true] <= '2023-08-27', cast([38: mock_004, VARCHAR, true] as mock_003) <= '2023-08-28', cast([38: mock_004, VARCHAR, true] as mock_003) >= '2023-03-01', 38: mock_004 IS NOT NULL\n     partitionsRatio=0/1, tabletsRatio=0/0\n     tabletList=\n     actualRows=0, avgRowSize=2.0\n     cardinality: 1\n     column statistics: \n     * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_004-->[1.6776E9, 1.693152E9, 0.0, 1.0, 1.0] UNKNOWN\n",
    "session_variables": "{\"enable_show_all_variables\":false,\"cbo_cte_reuse\":true,\"full_sort_max_buffered_bytes\":16777216,\"character_set_connection\":\"utf8\",\"cbo_use_correlated_join_estimate\":true,\"enable_insert_strict\":true,\"enable_connector_adaptive_io_tasks\":true,\"tx_isolation\":\"REPEATABLE-READ\",\"wait_timeout\":28800,\"cbo_cte_reuse_rate_v2\":1.15,\"transmission_encode_level\":7,\"query_including_mv_names\":\"\",\"character_set_results\":\"utf8\",\"transaction_isolation\":\"REPEATABLE-READ\",\"enable_global_runtime_filter\":true,\"enable_plan_validation\":true,\"load_transmission_compression_type\":\"NO_COMPRESSION\",\"cbo_enable_low_cardinality_optimize\":true,\"enable_resource_group_v2\":true,\"scan_use_query_mem_ratio\":0.3,\"query_excluding_mv_names\":\"\",\"enable_rewrite_simple_agg_to_meta_scan\":false,\"new_planner_optimize_timeout\":3000000,\"enable_outer_join_reorder\":true,\"enable_adaptive_sink_dop\":true,\"force_schedule_local\":false,\"consistent_hash_virtual_number\":32,\"hudi_mor_force_jni_reader\":false,\"full_sort_late_materialization\":false,\"enable_profile\":false,\"cbo_enable_greedy_join_reorder\":true,\"load_mem_limit\":0,\"spillable_operator_mask\":-1,\"sql_safe_updates\":0,\"runtime_filter_early_return_selectivity\":0.05,\"enable_local_shuffle_agg\":true,\"rpc_http_min_size\":2147482624,\"cbo_debug_alive_backend_number\":0,\"global_runtime_filter_probe_min_size\":102400,\"scan_or_to_union_limit\":4,\"select_ratio_threshold\":0.15,\"nested_mv_rewrite_max_level\":3,\"query_delivery_timeout\":300,\"net_write_timeout\":60,\"cbo_prune_shuffle_column_rate\":0.1,\"collation_database\":\"utf8_general_ci\",\"spill_mem_table_size\":104857600,\"hash_join_push_down_right_table\":true,\"cbo_use_lock_db\":false,\"new_planner_agg_stage\":0,\"use_compute_nodes\":-1,\"collation_connection\":\"utf8_general_ci\",\"resource_group\":\"\",\"broadcast_row_limit\":15000000,\"enable_populate_block_cache\":true,\"profile_limit_fold\":true,\"enable_materialized_view_plan_cache\":true,\"spill_operator_max_bytes\":1048576000,\"exec_mem_limit\":2147483648,\"enable_sort_aggregate\":false,\"cbo_max_reorder_node_use_dp\":10,\"query_cache_force_populate\":false,\"runtime_filter_on_exchange_node\":false,\"disable_join_reorder\":false,\"enable_rule_based_materialized_view_rewrite\":true,\"enable_hive_column_stats\":true,\"enable_groupby_use_output_alias\":false,\"connector_scan_use_query_mem_ratio\":0.3,\"net_buffer_length\":16384,\"forward_to_leader\":false,\"count_distinct_column_buckets\":1024,\"full_sort_max_buffered_rows\":1024000,\"query_cache_agg_cardinality_limit\":5000000,\"query_timeout\":300,\"connector_io_tasks_slow_io_latency_ms\":50,\"enable_pipeline_query_statistic\":true,\"cbo_max_reorder_node\":50,\"cboPushDownAggregateMode_v1\":-1,\"window_partition_mode\":1,\"enable_deliver_batch_fragments\":true,\"enable_tablet_internal_parallel_v2\":true,\"enable_distinct_column_bucketization\":false,\"enable_big_query_log\":true,\"interpolate_passthrough\":true,\"enable_incremental_mv\":false,\"analyze_mv\":\"sample\",\"runtime_filter_scan_wait_time\":20,\"SQL_AUTO_IS_NULL\":false,\"event_scheduler\":\"OFF\",\"prefer_compute_node\":false,\"enable_strict_type\":false,\"max_pipeline_dop\":64,\"broadcast_right_table_scale_factor\":10,\"materialized_view_rewrite_mode\":\"DEFAULT\",\"group_concat_max_len\":65535,\"disable_streaming_preaggregations\":false,\"enable_simplify_case_when\":true,\"parse_tokens_limit\":3500000,\"chunk_size\":4096,\"runtime_join_filter_push_down_limit\":1024000,\"global_runtime_filter_probe_min_selectivity\":0.5,\"query_mem_limit\":0,\"enable_filter_unused_columns_in_scan_stage\":true,\"big_query_log_cpu_second_threshold\":480,\"enable_scan_block_cache\":false,\"enable_materialized_view_single_table_view_delta_rewrite\":false,\"div_precision_increment\":4,\"runtime_adaptive_dop_max_block_rows_per_driver_seq\":16384,\"auto_increment_increment\":1,\"sql_dialect\":\"StarRocks\",\"sql_mode_v2\":32,\"big_query_log_scan_rows_threshold\":1000000000,\"character_set_client\":\"utf8\",\"autocommit\":true,\"hdfs_backend_selector_scan_range_shuffle\":false,\"enable_column_expr_predicate\":true,\"pipeline_profile_level\":1,\"parallel_fragment_exec_instance_num\":1,\"max_scan_key_num\":-1,\"enable_runtime_adaptive_dop\":false,\"cbo_cte_max_limit\":10,\"net_read_timeout\":60,\"streaming_preaggregation_mode\":\"auto\",\"storage_engine\":\"olap\",\"hive_partition_stats_sample_size\":3000,\"enable_optimizer_trace_log\":false,\"enable_mv_planner\":false,\"spill_operator_min_bytes\":52428800,\"cbo_enable_dp_join_reorder\":true,\"tx_visible_wait_timeout\":10,\"enable_collect_table_level_scan_stats\":true,\"enable_materialized_view_view_delta_rewrite\":true,\"cbo_max_reorder_node_use_exhaustive\":4,\"enable_sql_digest\":false,\"spill_mem_table_num\":2,\"profile_timeout\":2,\"cbo_push_down_aggregate\":\"global\",\"enable_spill\":false,\"spill_encode_level\":7,\"pipeline_dop\":0,\"enable_query_dump\":false,\"single_node_exec_plan\":false,\"join_implementation_mode_v2\":\"auto\",\"global_runtime_filter_build_max_size\":67108864,\"sql_select_limit\":9223372036854775807,\"enable_materialized_view_rewrite\":true,\"statistic_collect_parallel\":1,\"hdfs_backend_selector_hash_algorithm\":\"consistent\",\"enable_expr_prune_partition\":true,\"enable_rewrite_sum_by_associative_rule\":true,\"query_cache_hot_partition_num\":3,\"enable_prune_complex_types\":true,\"query_cache_type\":0,\"disable_colocate_join\":false,\"max_parallel_scan_instance_num\":-1,\"query_cache_entry_max_rows\":409600,\"max_pushdown_conditions_per_column\":-1,\"enable_mv_optimizer_trace_log\":false,\"connector_io_tasks_per_scan_operator\":16,\"default_table_compression\":\"lz4_frame\",\"enable_materialized_view_union_rewrite\":true,\"runtime_adaptive_dop_max_output_amplification_factor\":0,\"sql_quote_show_create\":true,\"scan_or_to_union_threshold\":50000000,\"enable_exchange_pass_through\":true,\"query_cache_entry_max_bytes\":4194304,\"innodb_read_only\":true,\"spill_mem_limit_threshold\":0.8,\"cbo_reorder_threshold_use_exhaustive\":6,\"enable_exchange_perf\":false,\"enable_predicate_reorder\":false,\"workgroup_id\":0,\"enable_query_cache\":false,\"enable_rewrite_groupingsets_to_union_all\":false,\"transmission_compression_type\":\"NO_COMPRESSION\",\"interactive_timeout\":3600,\"use_page_cache\":true,\"max_allowed_packet\":33554432,\"big_query_log_scan_bytes_threshold\":10737418240,\"collation_server\":\"utf8_general_ci\",\"time_zone\":\"Asia/Shanghai\",\"enable_multicolumn_global_runtime_filter\":false,\"character_set_server\":\"utf8\",\"tablet_internal_parallel_mode\":\"auto\",\"enable_pipeline\":true,\"cbo_use_nth_exec_plan\":0,\"io_tasks_per_scan_operator\":4,\"spill_mode\":\"auto\",\"parallel_exchange_instance_num\":-1,\"enable_shared_scan\":false,\"enable_query_debug_trace\":false,\"allow_default_partition\":false}",
    "be_number": 20,
    "be_core_stat": {
        "numOfHardwareCoresPerBe": "{\"10004\":104}",
        "cachedAvgNumOfHardwareCores": 104
    },
    "exception": [],
    "version": "UNKNOWN",
    "commit_version": "82b5883861"
}