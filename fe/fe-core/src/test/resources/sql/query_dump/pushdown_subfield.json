{
  "statement": "SELECT count(*) AS mock_1698\nFROM db_mock_000.tbl_mock_231 AS tbl_mock_1704\nWHERE ((db_mock_000.tbl_mock_1704.mock_098 = 141) AND (((((((((null_or_empty(db_mock_000.tbl_mock_1704.mock_024)) = 0) AND (db_mock_000.tbl_mock_1704.mock_002 IN (((SELECT db_mock_000.tbl_mock_225.mock_002\nFROM db_mock_000.tbl_mock_225\nWHERE (db_mock_000.tbl_mock_225.mock_098 = 141) AND (db_mock_000.tbl_mock_225.mock_226 IN (262417))\nGROUP BY db_mock_000.tbl_mock_225.mock_002))))) AND ((lower(db_mock_000.tbl_mock_1704.mock_1700)) IN ('united states', 'canada'))) AND (coalesce(NOT (((lower(CAST((get_json_string(db_mock_000.tbl_mock_1704.mock_1701, '$.\"email_Domain1__c\"')) AS VARCHAR))) LIKE (concat(concat('%', lower(replace(replace('pagerduty', '_', '\\\\_'), '%', '\\\\%'))), '%'))) OR ((lower(CAST((get_json_string(db_mock_000.tbl_mock_1704.mock_1701, '$.\"email_Domain1__c\"')) AS VARCHAR))) LIKE (concat(concat('%', lower(replace(replace('rundeck', '_', '\\\\_'), '%', '\\\\%'))), '%')))), 1))) AND ((lower(CAST((get_json_string(db_mock_000.tbl_mock_1704.mock_1701, '$.\"fY21_Territory_Score__c\"')) AS VARCHAR))) IN ('a - highest', 'b - high', 'c - low'))) OR (db_mock_000.tbl_mock_1704.id IN (((SELECT DISTINCT db_mock_000.tbl_mock_227.mock_229\nFROM db_mock_000.tbl_mock_227\nWHERE (db_mock_000.tbl_mock_227.mock_098 = 141) AND (db_mock_000.tbl_mock_227.mock_228 IN (46))))))) AND (db_mock_000.tbl_mock_1704.mock_050 = 0)) AND ((db_mock_000.tbl_mock_1704.mock_002 IN (((SELECT DISTINCT db_mock_000.tbl_mock_1703.mock_002 AS mock_1702\nFROM db_mock_000.tbl_mock_225 AS tbl_mock_1703\nWHERE (db_mock_000.tbl_mock_1703.mock_098 = 141) AND (1))))) OR (db_mock_000.tbl_mock_1704.mock_002 = 1)))) AND (1)",
  "table_meta": {
    "db_mock_000.tbl_mock_001": "CREATE TABLE db_mock_000.tbl_mock_001 (\nid bigint(20) NOT NULL ,\nmock_002 bigint(20) NOT NULL ,\nmock_098 bigint(20) NOT NULL ,\nmock_031 json ,\nmock_013 datetime ,\nmock_101 datetime ,\nmock_099 varchar(1048576) ,\nmock_086 varchar(1048576) ,\nmock_078 varchar(1048576) ,\nmock_079 varchar(1048576) ,\nmock_090 varchar(1048576) ,\nmock_089 varchar(1048576) ,\nmock_062 varchar(1048576) ,\nmock_003 bigint(20) ,\nmock_077 varchar(1048576) ,\nmock_102 boolean ,\nmock_070 varchar(1048576) ,\nmock_057 varchar(1048576) ,\nmock_058 varchar(1048576) ,\nmock_047 varchar(1048576) ,\nmock_024 varchar(1048576) ,\nmock_004 varchar(1048576) ,\nmock_005 boolean ,\nmock_095 varchar(1048576) ,\nmock_050 boolean ,\nmock_015 datetime ,\nmock_060 varchar(1048576) ,\nmock_009 varchar(1048576) ,\nmock_045 varchar(1048576) ,\nmock_011 varchar(1048576) ,\nmock_073 int(11) ,\nmock_100 boolean ,\nmock_074 varchar(1048576) ,\nmock_096 varchar(1048576) ,\nmock_059 varchar(1048576) ,\nmock_014 varchar(1048576) ,\nmock_049 boolean ,\nmock_092 varchar(1048576) ,\nmock_061 varchar(1048576) ,\nmock_051 boolean ,\nmock_023 boolean ,\nmock_065 varchar(1048576) ,\nmock_025 varchar(1048576) ,\nmock_097 varchar(1048576) ,\nmock_020 varchar(1048576) ,\nmock_046 varchar(1048576) ,\nmock_052 boolean ,\nmock_076 varchar(1048576) ,\nmock_075 varchar(1048576) ,\nmock_083 varchar(1048576) ,\nmock_091 varchar(1048576) ,\nmock_094 varchar(1048576) ,\nmock_012 varchar(1048576) ,\nmock_053 boolean ,\nmock_021 varchar(1048576) ,\nmock_029 varchar(1048576) ,\nmock_088 varchar(1048576) ,\nmock_030 varchar(1048576) ,\nmock_093 varchar(1048576) ,\nmock_081 int(11) ,\nmock_064 varchar(1048576) ,\nmock_085 varchar(1048576) ,\nmock_054 boolean ,\nmock_063 varchar(1048576) ,\nmock_082 varchar(1048576) ,\nmock_048 boolean ,\nmock_026 boolean ,\nmock_066 boolean ,\nmock_084 varchar(1048576) ,\nmock_072 boolean ,\nmock_006 boolean ,\nmock_010 varchar(1048576) ,\nmock_019 varchar(1048576) ,\nmock_018 varchar(1048576) ,\nmock_016 varchar(1048576) ,\nmock_017 varchar(1048576) ,\nmock_027 decimal(38, 9) ,\nmock_028 decimal(38, 9) ,\nmock_044 datetime ,\nmock_022 json ,\nmock_087 json ,\nmock_007 json ,\nmock_069 varchar(1048576) ,\nmock_068 varchar(1048576) ,\nmock_067 varchar(1048576) ,\nmock_008 varchar(1048576) ,\nmock_056 array<varchar(1048576)> ,\nmock_055 array<varchar(1048576)> ,\nmock_080 array<bigint(20)> ,\nmock_071 json ,\nmock_032 varchar(1048576) AS CAST((mock_031->'engagio__Sales_Touches_14_days__c') AS VARCHAR),\nmock_033 varchar(1048576) AS CAST((mock_031->'engagio__Sales_Touches_7_days__c') AS VARCHAR),\nmock_034 varchar(1048576) AS CAST((mock_031->'facebook___e') AS VARCHAR),\nmock_035 varchar(1048576) AS CAST((mock_031->'lastActivityDate') AS VARCHAR),\nmock_036 varchar(1048576) AS CAST((mock_031->'linkedin___e') AS VARCHAR),\nmock_037 varchar(1048576) AS CAST((mock_031->'mobilePhone') AS VARCHAR),\nmock_038 varchar(1048576) AS CAST((mock_031->'postalCode') AS VARCHAR),\nmock_039 varchar(1048576) AS CAST((mock_031->'state') AS VARCHAR),\nmock_040 varchar(1048576) AS CAST((mock_031->'status___Salesforce') AS VARCHAR),\nmock_041 varchar(1048576) AS CAST((mock_031->'title___Salesforce') AS VARCHAR),\nmock_042 varchar(1048576) AS CAST((mock_031->'twitter___e') AS VARCHAR),\nmock_043 varchar(1048576) AS CAST((mock_031->'website') AS VARCHAR)\n) ENGINE= OLAP \nDUPLICATE KEY(id)\nPARTITION BY (mock_098)\nDISTRIBUTED BY RANDOM BUCKETS 40\nPROPERTIES (\n\"replication_num\" = \"1\",\n\"unique_constraints\" = \"id, mock_002, mock_098\"\n);",
    "db_mock_000.tbl_mock_103": "CREATE TABLE db_mock_000.tbl_mock_103 (\nid bigint(20) NOT NULL ,\nmock_098 bigint(20) NOT NULL ,\nmock_181 bigint(20) ,\nmock_074 varchar(1048576) ,\nmock_031 json ,\nmock_013 datetime ,\nmock_101 datetime ,\nmock_183 varchar(1048576) ,\nmock_077 varchar(1048576) ,\nmock_119 varchar(1048576) ,\nmock_179 decimal(38, 9) ,\nmock_168 varchar(1048576) ,\nmock_095 varchar(1048576) ,\nmock_205 int(11) ,\nmock_170 datetime ,\nmock_164 boolean ,\nmock_190 datetime ,\nmock_165 boolean ,\nmock_118 datetime ,\nmock_162 boolean ,\nmock_169 varchar(1048576) ,\nmock_090 varchar(1048576) ,\nmock_201 varchar(1048576) ,\nmock_018 varchar(1048576) ,\nmock_019 varchar(1048576) ,\nmock_117 varchar(1048576) ,\nmock_180 decimal(38, 9) ,\nmock_121 decimal(38, 9) ,\nmock_163 boolean ,\nmock_220 varchar(1048576) ,\nmock_104 array<bigint(20)> ,\nmock_204 varchar(1048576) ,\nmock_187 decimal(38, 9) ,\nmock_189 varchar(1048576) ,\nmock_188 varchar(1048576) ,\nmock_209 decimal(38, 9) ,\nmock_211 varchar(1048576) ,\nmock_194 decimal(38, 9) ,\nmock_196 varchar(1048576) ,\nmock_195 varchar(1048576) ,\nmock_223 bigint(20) ,\nmock_222 bigint(20) ,\nmock_027 decimal(38, 9) ,\nmock_028 decimal(38, 9) ,\nmock_178 bigint(20) ,\nmock_044 datetime ,\nmock_200 int(11) ,\nmock_174 bigint(20) ,\nmock_175 int(11) NOT NULL ,\nmock_224 datetime ,\nmock_116 datetime ,\nmock_155 datetime ,\nmock_167 datetime ,\nmock_156 boolean NOT NULL ,\nmock_157 boolean NOT NULL ,\nmock_218 boolean NOT NULL ,\nmock_115 array<bigint(20)> ,\nmock_208 array<bigint(20)> ,\nmock_022 json ,\nmock_087 json ,\nmock_007 json ,\nmock_107 varchar(1048576) ,\nmock_110 varchar(1048576) ,\nmock_105 varchar(1048576) ,\nmock_158 varchar(1048576) ,\nmock_112 varchar(1048576) ,\nmock_214 decimal(38, 9) ,\nmock_217 varchar(1048576) ,\nmock_215 int(11) ,\nmock_216 varchar(1048576) ,\nmock_091 varchar(1048576) ,\nmock_173 varchar(1048576) ,\nmock_096 varchar(1048576) ,\nmock_059 varchar(1048576) ,\nmock_049 boolean ,\nmock_014 varchar(1048576) ,\nmock_051 boolean ,\nmock_221 varchar(1048576) ,\nmock_172 varchar(1048576) ,\nmock_097 varchar(1048576) ,\nmock_020 varchar(1048576) ,\nmock_203 varchar(1048576) ,\nmock_171 varchar(1048576) ,\nmock_108 varchar(1048576) ,\nmock_106 varchar(1048576) ,\nmock_111 varchar(1048576) ,\nmock_113 varchar(1048576) ,\nmock_207 varchar(1048576) ,\nmock_120 varchar(1048576) ,\nmock_159 varchar(1048576) ,\nmock_153 varchar(1048576) ,\nmock_198 bigint(20) ,\nmock_176 bigint(20) ,\nmock_199 varchar(1048576) ,\nmock_154 varchar(1048576) ,\nmock_109 varchar(1048576) ,\nmock_219 varchar(1048576) ,\nmock_202 varchar(1048576) ,\nmock_021 varchar(1048576) ,\nmock_212 varchar(1048576) ,\nmock_210 int(11) ,\nmock_161 varchar(1048576) ,\nmock_191 varchar(1048576) ,\nmock_192 decimal(38, 9) ,\nmock_193 varchar(1048576) ,\nmock_182 varchar(1048576) ,\nmock_185 decimal(38, 9) ,\nmock_184 varchar(1048576) ,\nmock_186 varchar(1048576) ,\nmock_160 varchar(1048576) ,\nmock_114 varchar(1048576) ,\nmock_177 int(11) ,\nmock_206 varchar(1048576) ,\nmock_067 varchar(1048576) ,\nmock_166 json ,\nmock_071 json ,\nmock_197 array<bigint(20)> ,\nmock_213 varchar(1048576) ,\nmock_122 varchar(1048576) AS CAST((mock_031->'abmId___d') AS VARCHAR),\nmock_123 varchar(1048576) AS CAST((mock_031->'account_Status__c') AS VARCHAR),\nmock_124 varchar(1048576) AS CAST((mock_031->'annualRevenue') AS VARCHAR),\nmock_125 varchar(1048576) AS CAST((mock_031->'engagio__EngagedPeople__c') AS VARCHAR),\nmock_126 varchar(1048576) AS CAST((mock_031->'engagio__EngagementMinutesLast3Months__c') AS VARCHAR),\nmock_127 varchar(1048576) AS CAST((mock_031->'engagio__EngagementMinutesLast7Days__c') AS VARCHAR),\nmock_128 varchar(1048576) AS CAST((mock_031->'engagio__FirstEngagementDate__c') AS VARCHAR),\nmock_129 varchar(1048576) AS CAST((mock_031->'engagio__IntentMinutesLast30Days__c') AS VARCHAR),\nmock_130 varchar(1048576) AS CAST((mock_031->'engagio__MQADate__c') AS VARCHAR),\nmock_131 varchar(1048576) AS CAST((mock_031->'engagio__NumberOfPeople__c') AS VARCHAR),\nmock_132 varchar(1048576) AS CAST((mock_031->'engagio__Status__c') AS VARCHAR),\nmock_133 varchar(1048576) AS CAST((mock_031->'engagio__WebVisitsLast3Months__c') AS VARCHAR),\nmock_035 varchar(1048576) AS CAST((mock_031->'lastActivityDate') AS VARCHAR),\nmock_134 varchar(1048576) AS CAST((mock_031->'market_Segment__c') AS VARCHAR),\nmock_135 varchar(1048576) AS CAST((mock_031->'named_Account__c') AS VARCHAR),\nmock_136 varchar(1048576) AS CAST((mock_031->'phone') AS VARCHAR),\nmock_137 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_feature_rank_101___e') AS VARCHAR),\nmock_138 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_feature_rank_102___e') AS VARCHAR),\nmock_139 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_feature_rank_103___e') AS VARCHAR),\nmock_140 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_score_101___e') AS VARCHAR),\nmock_141 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_score_102___e') AS VARCHAR),\nmock_142 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_score_103___e') AS VARCHAR),\nmock_143 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_score_104___e') AS VARCHAR),\nmock_144 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_score_105___e') AS VARCHAR),\nmock_145 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_score_label_101___e') AS VARCHAR),\nmock_146 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_score_label_102___e') AS VARCHAR),\nmock_147 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_score_label_103___e') AS VARCHAR),\nmock_148 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_score_label_104___e') AS VARCHAR),\nmock_149 varchar(1048576) AS CAST((mock_031->'pipeline_pred_model_score_label_105___e') AS VARCHAR),\nmock_150 varchar(1048576) AS CAST((mock_031->'region__c') AS VARCHAR),\nmock_151 varchar(1048576) AS CAST((mock_031->'type') AS VARCHAR),\nmock_152 varchar(1048576) AS CAST((mock_031->'website___Salesforce') AS VARCHAR)\n) ENGINE= OLAP \nPRIMARY KEY(id, mock_098)\nPARTITION BY (mock_098)\nDISTRIBUTED BY HASH(mock_098, id) BUCKETS 40 \nPROPERTIES (\n\"replication_num\" = \"1\",\n\"colocate_with\" = \"tenant_account_id_40\",\n\"unique_constraints\" = \"id, mock_098\"\n);",
    "db_mock_000.tbl_mock_225": "CREATE TABLE db_mock_000.tbl_mock_225 (\nmock_098 bigint(20) NOT NULL ,\nmock_226 bigint(20) NOT NULL ,\nmock_002 bigint(20) NOT NULL ,\nid bigint(20) NOT NULL \n) ENGINE= OLAP \nPRIMARY KEY(mock_098, mock_226, mock_002)\nPARTITION BY (mock_098)\nDISTRIBUTED BY HASH(mock_098, mock_002) BUCKETS 40 \nPROPERTIES (\n\"replication_num\" = \"1\",\n\"colocate_with\" = \"tenant_account_id_40\"\n);",
    "db_mock_000.tbl_mock_227": "CREATE TABLE db_mock_000.tbl_mock_227 (\nmock_098 bigint(20) NOT NULL ,\nid bigint(20) NOT NULL ,\nmock_228 bigint(20) NOT NULL ,\nmock_229 bigint(20) ,\nmock_230 datetime NOT NULL \n) ENGINE= OLAP \nPRIMARY KEY(mock_098, id)\nPARTITION BY (mock_098)\nDISTRIBUTED BY HASH(mock_098)\nPROPERTIES (\n\"replication_num\" = \"1\"\n);"
  },
  "table_row_count": {
    "db_mock_000.tbl_mock_225": {
      "p141": 1000
    },
    "db_mock_000.tbl_mock_103": {
      "p141": 1000
    },
    "db_mock_000.tbl_mock_001": {
      "p141": 1000
    },
    "db_mock_000.tbl_mock_227": {
      "p141": 1000
    }
  },
  "view_meta": {
    "db_mock_000.tbl_mock_231": "SELECT tbl_mock_001.id, tbl_mock_001.mock_098, tbl_mock_001.mock_002, tbl_mock_001.mock_031, tbl_mock_001.mock_013, tbl_mock_001.mock_101, tbl_mock_001.mock_099, tbl_mock_001.mock_086, tbl_mock_001.mock_078, tbl_mock_001.mock_079, tbl_mock_001.mock_090, tbl_mock_001.mock_089, tbl_mock_001.mock_062, tbl_mock_001.mock_003, tbl_mock_001.mock_077, tbl_mock_001.mock_102, tbl_mock_001.mock_070, tbl_mock_001.mock_057, tbl_mock_001.mock_058, tbl_mock_001.mock_047, tbl_mock_001.mock_024, tbl_mock_001.mock_004, tbl_mock_001.mock_005, tbl_mock_001.mock_095, tbl_mock_001.mock_050, tbl_mock_001.mock_015, tbl_mock_001.mock_060, tbl_mock_001.mock_009, tbl_mock_001.mock_045, tbl_mock_001.mock_011, tbl_mock_001.mock_073, tbl_mock_001.mock_100, tbl_mock_001.mock_074, tbl_mock_001.mock_096, tbl_mock_001.mock_059, tbl_mock_001.mock_014, tbl_mock_001.mock_049, tbl_mock_001.mock_092, tbl_mock_001.mock_061, tbl_mock_001.mock_051, tbl_mock_001.mock_023, tbl_mock_001.mock_065, tbl_mock_001.mock_025, tbl_mock_001.mock_097, tbl_mock_001.mock_020, tbl_mock_001.mock_046, tbl_mock_001.mock_052, tbl_mock_001.mock_076, tbl_mock_001.mock_075, tbl_mock_001.mock_083, tbl_mock_001.mock_091, tbl_mock_001.mock_094, tbl_mock_001.mock_012, tbl_mock_001.mock_053, tbl_mock_001.mock_021, tbl_mock_001.mock_029, tbl_mock_001.mock_088, tbl_mock_001.mock_030, tbl_mock_001.mock_093, tbl_mock_001.mock_081, tbl_mock_001.mock_064, tbl_mock_001.mock_085, tbl_mock_001.mock_054, tbl_mock_001.mock_063, tbl_mock_001.mock_082, tbl_mock_001.mock_048, tbl_mock_001.mock_026, tbl_mock_001.mock_066, tbl_mock_001.mock_084, tbl_mock_001.mock_072, tbl_mock_001.mock_006, tbl_mock_001.mock_010, tbl_mock_001.mock_019, tbl_mock_001.mock_018, tbl_mock_001.mock_016, tbl_mock_001.mock_017, tbl_mock_001.mock_027, tbl_mock_001.mock_028, tbl_mock_001.mock_044, tbl_mock_001.mock_022, tbl_mock_001.mock_087, tbl_mock_001.mock_007, tbl_mock_001.mock_069, tbl_mock_001.mock_068, tbl_mock_001.mock_067, tbl_mock_001.mock_008, tbl_mock_001.mock_056, tbl_mock_001.mock_055, tbl_mock_001.mock_080, tbl_mock_001.mock_071, tbl_mock_001.mock_002 AS mock_1705, tbl_mock_103.mock_181 AS mock_1706, tbl_mock_103.mock_074 AS mock_1707, tbl_mock_103.mock_031 AS mock_1701, tbl_mock_103.mock_013 AS mock_1708, tbl_mock_103.mock_101 AS mock_1709, tbl_mock_103.mock_183 AS mock_1710, tbl_mock_103.mock_077 AS mock_1711, tbl_mock_103.mock_119 AS mock_1712, tbl_mock_103.mock_179 AS mock_1713, tbl_mock_103.mock_168 AS mock_1714, tbl_mock_103.mock_095 AS mock_1715, tbl_mock_103.mock_205 AS mock_1716, tbl_mock_103.mock_170 AS mock_1717, tbl_mock_103.mock_164 AS mock_1718, tbl_mock_103.mock_190 AS mock_1719, tbl_mock_103.mock_165 AS mock_1720, tbl_mock_103.mock_118 AS mock_1721, tbl_mock_103.mock_162 AS mock_1722, tbl_mock_103.mock_169 AS mock_1723, tbl_mock_103.mock_090 AS mock_1724, tbl_mock_103.mock_201 AS mock_1725, tbl_mock_103.mock_018 AS mock_1726, tbl_mock_103.mock_019 AS mock_1727, tbl_mock_103.mock_117 AS mock_1728, tbl_mock_103.mock_180 AS mock_1729, tbl_mock_103.mock_121 AS mock_1730, tbl_mock_103.mock_163 AS mock_1731, tbl_mock_103.mock_220 AS mock_1732, tbl_mock_103.mock_104 AS mock_1733, tbl_mock_103.mock_204 AS mock_1734, tbl_mock_103.mock_187 AS mock_1735, tbl_mock_103.mock_189 AS mock_1736, tbl_mock_103.mock_188 AS mock_1737, tbl_mock_103.mock_209 AS mock_1738, tbl_mock_103.mock_211 AS mock_1739, tbl_mock_103.mock_194 AS mock_1740, tbl_mock_103.mock_196 AS mock_1741, tbl_mock_103.mock_195 AS mock_1742, tbl_mock_103.mock_223 AS mock_1743, tbl_mock_103.mock_222 AS mock_1744, tbl_mock_103.mock_027 AS mock_1745, tbl_mock_103.mock_028 AS mock_1746, tbl_mock_103.mock_178 AS mock_1747, tbl_mock_103.mock_044 AS mock_1748, tbl_mock_103.mock_200 AS mock_1749, tbl_mock_103.mock_174 AS mock_1750, tbl_mock_103.mock_175 AS mock_1751, tbl_mock_103.mock_224 AS mock_1752, tbl_mock_103.mock_116 AS mock_1753, tbl_mock_103.mock_155 AS mock_1754, tbl_mock_103.mock_167 AS mock_1755, tbl_mock_103.mock_156 AS mock_1756, tbl_mock_103.mock_157 AS mock_1757, tbl_mock_103.mock_218 AS mock_1758, tbl_mock_103.mock_115 AS mock_1759, tbl_mock_103.mock_208 AS mock_1760, tbl_mock_103.mock_022 AS mock_1761, tbl_mock_103.mock_087 AS mock_1762, tbl_mock_103.mock_007 AS mock_1763, tbl_mock_103.mock_197 AS mock_1764, tbl_mock_103.mock_107 AS mock_1700, tbl_mock_103.mock_110 AS mock_1765, tbl_mock_103.mock_105 AS mock_1766, tbl_mock_103.mock_158 AS mock_1767, tbl_mock_103.mock_112 AS mock_1768, tbl_mock_103.mock_214 AS mock_1769, tbl_mock_103.mock_217 AS mock_1770, tbl_mock_103.mock_215 AS mock_1771, tbl_mock_103.mock_216 AS mock_1772, tbl_mock_103.mock_091 AS mock_1773, tbl_mock_103.mock_173 AS mock_1774, tbl_mock_103.mock_096 AS mock_1775, tbl_mock_103.mock_059 AS mock_1776, tbl_mock_103.mock_049 AS mock_1777, tbl_mock_103.mock_014 AS mock_1778, tbl_mock_103.mock_051 AS mock_1779, tbl_mock_103.mock_221 AS mock_1780, tbl_mock_103.mock_172 AS mock_1781, tbl_mock_103.mock_097 AS mock_1782, tbl_mock_103.mock_020 AS mock_1783, tbl_mock_103.mock_203 AS mock_1784, tbl_mock_103.mock_171 AS mock_1785, tbl_mock_103.mock_108 AS mock_1786, tbl_mock_103.mock_106 AS mock_1787, tbl_mock_103.mock_111 AS mock_1788, tbl_mock_103.mock_113 AS mock_1789, tbl_mock_103.mock_207 AS mock_1790, tbl_mock_103.mock_120 AS mock_1791, tbl_mock_103.mock_159 AS mock_1792, tbl_mock_103.mock_153 AS mock_1793, tbl_mock_103.mock_198 AS mock_1794, tbl_mock_103.mock_176 AS mock_1795, tbl_mock_103.mock_199 AS mock_1796, tbl_mock_103.mock_154 AS mock_1797, tbl_mock_103.mock_109 AS mock_1798, tbl_mock_103.mock_219 AS mock_1799, tbl_mock_103.mock_202 AS mock_1800, tbl_mock_103.mock_021 AS mock_1801, tbl_mock_103.mock_212 AS mock_1802, tbl_mock_103.mock_210 AS mock_1803, tbl_mock_103.mock_161 AS mock_1804, tbl_mock_103.mock_191 AS mock_1805, tbl_mock_103.mock_192 AS mock_1806, tbl_mock_103.mock_193 AS mock_1807, tbl_mock_103.mock_182 AS mock_1808, tbl_mock_103.mock_185 AS mock_1809, tbl_mock_103.mock_184 AS mock_1810, tbl_mock_103.mock_186 AS mock_1811, tbl_mock_103.mock_160 AS mock_1812, tbl_mock_103.mock_114 AS mock_1813, tbl_mock_103.mock_177 AS mock_1814, tbl_mock_103.mock_206 AS mock_1815, tbl_mock_103.mock_067 AS mock_1816, tbl_mock_103.mock_166 AS mock_1817, tbl_mock_103.mock_071 AS mock_1818, tbl_mock_103.mock_213 AS mock_1819\nFROM db_mock_000.tbl_mock_001 INNER JOIN db_mock_000.tbl_mock_103 ON (tbl_mock_001.mock_002 = tbl_mock_103.id) AND (tbl_mock_001.mock_098 = tbl_mock_103.mock_098);"
  },
  "column_statistics": {
    "db_mock_000.tbl_mock_225": {
      "mock_098": "[5.0, 16030.0, 0.0, 8.0, 1241.0] ESTIMATE",
      "mock_002": "[1.0, 3.2245587E7, 0.0, 8.0, 2.1305112E7] ESTIMATE",
      "mock_226": "[1.0, 292832.0, 0.0, 8.0, 59999.0] ESTIMATE"
    },
    "db_mock_000.tbl_mock_103": {
      "mock_098": "[5.0, 16034.0, 0.0, 8.0, 1455.0] ESTIMATE",
      "mock_107": "[-Infinity, Infinity, 0.034225, 0.009615, 390.0] ESTIMATE",
      "id": "[1.0, 3.2257128E7, 0.0, 8.0, 3.2124832E7] ESTIMATE",
      "mock_031": "[-Infinity, Infinity, 0.0, 1024.0, 1.0] ESTIMATE"
    },
    "db_mock_000.tbl_mock_001": {
      "mock_098": "[5.0, 16034.0, 0.0, 8.0, 1450.0] ESTIMATE",
      "mock_002": "[1.0, 3.2242441E7, 0.0, 8.0, 3.2103212E7] ESTIMATE",
      "mock_050": "[0.0, 0.0, 0.0, 1.0, 1.0] ESTIMATE",
      "id": "[1.0, 1.4669525E8, 0.0, 8.0, 1.4470352E8] ESTIMATE",
      "mock_024": "[-Infinity, Infinity, 0.4126373007308381, 14.155565139220919, 3.2368122E7] ESTIMATE"
    },
    "db_mock_000.tbl_mock_227": {
      "mock_098": "[5.0, 15956.0, 0.0, 8.0, 817.0] ESTIMATE",
      "mock_228": "[1.0, 35305.0, 0.0, 8.0, 13080.0] ESTIMATE",
      "mock_229": "[1.0, 1.46313445E8, 0.0, 8.0, 3.2487194E7] ESTIMATE"
    }
  },
  "explain_info": "PLAN COST\n  CPU: 39040.8\n  Memory: 8111.200000000001\n\nPLAN FRAGMENT 0(F15)\n  Output Exprs:269: mock_1698\n  Input Partition: UNPARTITIONED\n  RESULT SINK\n\n  34:AGGREGATE (update finalize)\n  |  aggregate: mock_1698[(*); args: ; result: BIGINT; args nullable: false; result nullable: false]\n  |  hasNullableGenerateChild: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_1698-->[0.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  \n  33:EXCHANGE\n     distribution type: GATHER\n     cardinality: 1\n\nPLAN FRAGMENT 1(F11)\n\n  Input Partition: HASH_PARTITIONED: 270: mock_002\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 33\n\n  32:Project\n  |  output columns:\n  |  285 <-> 1\n  |  hasNullableGenerateChild: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * auto_fill_col-->[1.0, 1.0, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  31:NESTLOOP JOIN\n  |  join op: INNER JOIN\n  |  other join predicates: (CASE WHEN (272: countRows IS NULL) OR (272: countRows = 0) THEN FALSE WHEN 2: mock_002 IS NULL THEN NULL WHEN 270: mock_002 IS NOT NULL THEN TRUE WHEN 273: countNotNulls < 272: countRows THEN NULL ELSE FALSE END) OR (2: mock_002 = 1)\n  |  can local shuffle: false\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * countRows-->[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE\n  |  * countNotNulls-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * auto_fill_col-->[1.0, 1.0, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  |----30:EXCHANGE\n  |       distribution type: BROADCAST\n  |       cardinality: 1\n  |    \n  24:HASH JOIN\n  |  join op: LEFT OUTER JOIN (BUCKET_SHUFFLE(S))\n  |  equal join conjunct: [2: mock_002, BIGINT, true] = [270: mock_002, BIGINT, false]\n  |  can local shuffle: false\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----23:AGGREGATE (merge finalize)\n  |    |  group by: [270: mock_002, BIGINT, false]\n  |    |  cardinality: 1\n  |    |  column statistics: \n  |    |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |    |  \n  |    22:EXCHANGE\n  |       distribution type: SHUFFLE\n  |       partition exprs: [270: mock_002, BIGINT, false]\n  |       cardinality: 1\n  |    \n  18:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [2: mock_002, BIGINT, true]\n     cardinality: 1\n\nPLAN FRAGMENT 2(F13)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 30\n\n  29:AGGREGATE (merge finalize)\n  |  aggregate: mock_1698[([273: countNotNulls, BIGINT, false]); args: BIGINT; result: BIGINT; args nullable: true; result nullable: false], mock_1698[([272: countRows, BIGINT, false]); args: BIGINT; result: BIGINT; args nullable: true; result nullable: false]\n  |  cardinality: 1\n  |  column statistics: \n  |  * countRows-->[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE\n  |  * countNotNulls-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  28:EXCHANGE\n     distribution type: GATHER\n     cardinality: 1\n\nPLAN FRAGMENT 3(F12)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 28\n\n  27:AGGREGATE (update serialize)\n  |  aggregate: mock_1698[([271: mock_002, BIGINT, false]); args: BIGINT; result: BIGINT; args nullable: false; result nullable: false], mock_1698[(1); args: BIGINT; result: BIGINT; args nullable: false; result nullable: false]\n  |  cardinality: 1\n  |  column statistics: \n  |  * countRows-->[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE\n  |  * countNotNulls-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  26:Project\n  |  output columns:\n  |  271 <-> [266: mock_002, BIGINT, false]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  25:EXCHANGE\n     distribution type: SHUFFLE\n     cardinality: 1\n\nPLAN FRAGMENT 4(F10)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: HASH_PARTITIONED: 270: mock_002\n  OutPut Exchange id: 22\n\n  21:AGGREGATE (update serialize)\n  |  STREAMING\n  |  group by: [270: mock_002, BIGINT, false]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  20:Project\n  |  output columns:\n  |  270 <-> [266: mock_002, BIGINT, false]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  19:EXCHANGE\n     distribution type: SHUFFLE\n     cardinality: 1\n\nPLAN FRAGMENT 5(F02)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: HASH_PARTITIONED: 2: mock_002\n  OutPut Exchange id: 18\n\n  17:Project\n  |  output columns:\n  |  2 <-> [2: mock_002, BIGINT, false]\n  |  hasNullableGenerateChild: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  16:NESTLOOP JOIN\n  |  join op: INNER JOIN\n  |  other join predicates: (((((CAST(null_or_empty(21: mock_024) AS TINYINT) = 0) AND (257: expr)) AND (lower(164: mock_107) IN ('united states', 'canada'))) AND (CAST(coalesce(CAST(NOT ((lower(get_json_string(107: mock_031, '$.\"email_Domain1__c\"')) LIKE '%pagerduty%') OR (lower(get_json_string(107: mock_031, '$.\"email_Domain1__c\"')) LIKE '%rundeck%')) AS TINYINT), 1) AS BOOLEAN))) AND (lower(get_json_string(107: mock_031, '$.\"fY21_Territory_Score__c\"')) IN ('a - highest', 'b - high', 'c - low'))) OR (CASE WHEN (276: countRows IS NULL) OR (276: countRows = 0) THEN FALSE WHEN 1: id IS NULL THEN NULL WHEN 274: mock_229 IS NOT NULL THEN TRUE WHEN 277: countNotNulls < 276: countRows THEN NULL ELSE FALSE END)\n  |  can local shuffle: false\n  |  cardinality: 1\n  |  column statistics: \n  |  * id-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_024-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_031-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_107-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_229-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * countRows-->[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE\n  |  * countNotNulls-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----15:EXCHANGE\n  |       distribution type: BROADCAST\n  |       cardinality: 1\n  |    \n  9:HASH JOIN\n  |  join op: LEFT OUTER JOIN (BROADCAST)\n  |  equal join conjunct: [1: id, BIGINT, false] = [274: mock_229, BIGINT, true]\n  |  can local shuffle: false\n  |  cardinality: 1\n  |  column statistics: \n  |  * id-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_024-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_031-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_107-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * mock_229-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----8:EXCHANGE\n  |       distribution type: BROADCAST\n  |       cardinality: 1\n  |    \n  2:EMPTYSET\n     cardinality: 1\n     column statistics: \n     * id-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_024-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_031-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * mock_107-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n\nPLAN FRAGMENT 6(F07)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 15\n\n  14:AGGREGATE (merge finalize)\n  |  aggregate: mock_1698[([276: countRows, BIGINT, false]); args: BIGINT; result: BIGINT; args nullable: true; result nullable: false], mock_1698[([277: countNotNulls, BIGINT, false]); args: BIGINT; result: BIGINT; args nullable: true; result nullable: false]\n  |  cardinality: 1\n  |  column statistics: \n  |  * countRows-->[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE\n  |  * countNotNulls-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  13:EXCHANGE\n     distribution type: GATHER\n     cardinality: 1\n\nPLAN FRAGMENT 7(F06)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 13\n\n  12:AGGREGATE (update serialize)\n  |  aggregate: mock_1698[(1); args: BIGINT; result: BIGINT; args nullable: false; result nullable: false], mock_1698[([275: mock_229, BIGINT, true]); args: BIGINT; result: BIGINT; args nullable: true; result nullable: false]\n  |  cardinality: 1\n  |  column statistics: \n  |  * countRows-->[-Infinity, Infinity, 0.0, 8.0, 1.0] ESTIMATE\n  |  * countNotNulls-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  11:Project\n  |  output columns:\n  |  275 <-> [261: mock_229, BIGINT, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_229-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  10:EXCHANGE\n     distribution type: SHUFFLE\n     cardinality: 1\n\nPLAN FRAGMENT 8(F04)\n\n  Input Partition: HASH_PARTITIONED: 274: mock_229\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 08\n\n  7:AGGREGATE (merge finalize)\n  |  group by: [274: mock_229, BIGINT, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_229-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  6:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [274: mock_229, BIGINT, true]\n     cardinality: 1\n\nPLAN FRAGMENT 9(F03)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: HASH_PARTITIONED: 274: mock_229\n  OutPut Exchange id: 06\n\n  5:AGGREGATE (update serialize)\n  |  STREAMING\n  |  group by: [274: mock_229, BIGINT, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_229-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  4:Project\n  |  output columns:\n  |  274 <-> [261: mock_229, BIGINT, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_229-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  3:EXCHANGE\n     distribution type: SHUFFLE\n     cardinality: 1\n\nPLAN FRAGMENT 10(F01)\n  Output Exprs:261: mock_229\n  Input Partition: UNPARTITIONED\n  MultiCastDataSinks:\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 03\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 10\n\n  1:EMPTYSET\n     cardinality: 1\n     column statistics: \n     * mock_229-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n\nPLAN FRAGMENT 11(F00)\n  Output Exprs:266: mock_002\n  Input Partition: UNPARTITIONED\n  MultiCastDataSinks:\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 19\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 25\n\n  0:EMPTYSET\n     cardinality: 1\n     column statistics: \n     * mock_002-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n",
  "session_variables": "{\"partial_update_mode\":\"auto\",\"cbo_cte_reuse\":true,\"character_set_connection\":\"utf8\",\"cbo_use_correlated_join_estimate\":true,\"enable_insert_strict\":true,\"enable_connector_adaptive_io_tasks\":true,\"tx_isolation\":\"REPEATABLE-READ\",\"enable_hive_metadata_cache_with_insert\":false,\"automv_prune_rollup_unable_aggregate_with_conjuncts\":true,\"hive_temp_staging_dir\":\"/tmp/starrocks\",\"cbo_cte_reuse_rate_v2\":1.15,\"enable_datacache_io_adaptor\":false,\"character_set_results\":\"utf8\",\"materialized_view_union_rewrite_mode\":0,\"enable_count_star_optimization\":true,\"enable_iceberg_column_statistics\":false,\"automv_card_rowcount_ratio_lwm\":0,\"thrift_plan_protocol\":\"compact\",\"enable_plan_serialize_concurrently\":true,\"materialized_view_max_relation_mapping_size\":10,\"global_runtime_filter_build_min_size\":131072,\"enable_iceberg_identity_column_optimize\":true,\"enable_view_based_mv_rewrite\":false,\"query_excluding_mv_names\":\"\",\"enable_rewrite_simple_agg_to_meta_scan\":false,\"enable_ukfk_opt\":false,\"enable_adaptive_sink_dop\":true,\"enable_ukfk_join_reorder\":false,\"consistent_hash_virtual_number\":128,\"warehouse\":\"default_warehouse\",\"enable_profile\":true,\"load_mem_limit\":0,\"cbo_eq_base_type\":\"varchar\",\"enable_materialized_view_for_insert\":false,\"large_decimal_underlying_type\":\"panic\",\"sql_safe_updates\":0,\"runtime_filter_early_return_selectivity\":0.05,\"enable_local_shuffle_agg\":true,\"disable_function_fold_constants\":false,\"enable_query_queue\":true,\"enable_cbo_view_based_mv_rewrite\":false,\"automv_sampling_buckets\":512,\"select_ratio_threshold\":0.15,\"automv_decay_accelerated_queries\":false,\"query_delivery_timeout\":300,\"collation_database\":\"utf8_general_ci\",\"spill_mem_table_size\":104857600,\"follower_query_forward_mode\":\"\",\"orc_use_column_names\":false,\"cbo_use_lock_db\":false,\"new_planner_agg_stage\":0,\"enable_strict_order_by\":true,\"hash_join_interpolate_passthrough\":false,\"use_compute_nodes\":-1,\"collation_connection\":\"utf8_general_ci\",\"enable_rewrite_bitmap_union_to_bitamp_agg\":true,\"enable_force_rule_based_mv_rewrite\":true,\"enable_array_distinct_after_agg_opt\":true,\"resource_group\":\"\",\"always_collect_low_card_dict\":false,\"enable_materialized_view_plan_cache\":true,\"spill_operator_max_bytes\":1048576000,\"cbo_max_reorder_node_use_dp\":10,\"cbo_prepare_metadata_thread_pool_size\":16,\"enable_result_sink_accumulate\":true,\"enable_hive_column_stats\":true,\"enable_async_profile\":true,\"enable_groupby_use_output_alias\":false,\"global_runtime_filter_wait_timeout\":20,\"forward_to_leader\":false,\"count_distinct_column_buckets\":1024,\"cross_join_cost_penalty\":1000000,\"query_cache_agg_cardinality_limit\":5000000,\"cboPushDownAggregateMode_v1\":-1,\"window_partition_mode\":1,\"enable_tablet_internal_parallel_v2\":true,\"interpolate_passthrough\":true,\"enable_incremental_mv\":false,\"cbo_push_down_topn_limit\":1000,\"automv_enable_semi_anti_join\":true,\"SQL_AUTO_IS_NULL\":false,\"event_scheduler\":\"OFF\",\"max_pipeline_dop\":64,\"broadcast_right_table_scale_factor\":10,\"materialized_view_rewrite_mode\":\"DEFAULT\",\"enable_read_iceberg_puffin_ndv\":true,\"enable_write_hive_external_table\":false,\"enable_simplify_case_when\":true,\"enable_aggregation_pipeline_share_limit\":true,\"runtime_join_filter_push_down_limit\":1024000,\"trace_log_mode\":\"command\",\"enable_scan_datacache\":false,\"big_query_log_cpu_second_threshold\":480,\"div_precision_increment\":4,\"runtime_adaptive_dop_max_block_rows_per_driver_seq\":16384,\"log_rejected_record_num\":0,\"enable_short_circuit\":false,\"cbo_push_down_distinct_below_window\":true,\"sql_mode_v2\":262191,\"prefer_cte_rewrite\":false,\"optimizer_materialized_view_timelimit\":1000,\"hdfs_backend_selector_scan_range_shuffle\":false,\"pipeline_profile_level\":1,\"parallel_fragment_exec_instance_num\":1,\"max_scan_key_num\":-1,\"net_read_timeout\":60,\"streaming_preaggregation_mode\":\"auto\",\"hive_partition_stats_sample_size\":3000,\"enable_mv_planner\":false,\"enable_collect_table_level_scan_stats\":true,\"enable_populate_datacache\":true,\"query_debug_options\":\"\",\"profile_timeout\":2,\"cbo_push_down_aggregate\":\"global\",\"spill_encode_level\":7,\"enable_query_dump\":false,\"global_runtime_filter_build_max_size\":67108864,\"enable_rewrite_sum_by_associative_rule\":true,\"query_cache_hot_partition_num\":3,\"enable_prune_complex_types\":true,\"query_cache_type\":0,\"max_parallel_scan_instance_num\":-1,\"enable_dynamic_prune_scan_range\":true,\"query_cache_entry_max_rows\":409600,\"connector_io_tasks_per_scan_operator\":16,\"enable_materialized_view_union_rewrite\":true,\"sql_quote_show_create\":true,\"scan_or_to_union_threshold\":50000000,\"enable_materialized_view_rewrite_partition_compensate\":true,\"enable_exchange_pass_through\":true,\"runtime_profile_report_interval\":10,\"automv_use_bitmap_count_distinct\":true,\"query_cache_entry_max_bytes\":4194304,\"enable_partition_column_value_only_optimization\":true,\"connector_max_split_size\":67108864,\"interleaving_group_size\":10,\"automv_sampling_ratio_low_bound\":0.01,\"enable_exchange_perf\":false,\"enable_prepare_stmt\":true,\"workgroup_id\":0,\"enable_rewrite_groupingsets_to_union_all\":false,\"transmission_compression_type\":\"lz4\",\"interactive_timeout\":3600,\"use_page_cache\":true,\"automv_push_down_agg_below_semi_anti_join\":false,\"big_query_log_scan_bytes_threshold\":10737418240,\"collation_server\":\"utf8_general_ci\",\"cbo_decimal_cast_string_strict\":true,\"enable_hyperscan_vec\":true,\"enable_datacache_async_populate_mode\":false,\"cbo_enable_predicate_subfield_path\":true,\"tablet_internal_parallel_mode\":\"auto\",\"enable_pipeline\":true,\"spill_mode\":\"auto\",\"enable_split_scan_predicate_with_date\":false,\"enable_query_debug_trace\":false,\"like_predicate_consolidate_min\":0,\"cbo_materialized_view_rewrite_related_mvs_limit\":64,\"enable_show_all_variables\":false,\"full_sort_max_buffered_bytes\":16777216,\"catalog\":\"default_catalog\",\"wait_timeout\":28800,\"automv_partial_rollup_min_agg_pieces\":3,\"max_buckets_per_be_to_use_balancer_assignment\":6,\"enable_query_tablet_affinity\":false,\"transmission_encode_level\":7,\"query_including_mv_names\":\"\",\"transaction_isolation\":\"REPEATABLE-READ\",\"automv_use_array_agg_count_distinct\":false,\"enable_global_runtime_filter\":true,\"enable_load_profile\":false,\"enable_rewrite_simple_agg_to_hdfs_scan\":false,\"enable_plan_validation\":true,\"load_transmission_compression_type\":\"lz4\",\"global_runtime_filter_rpc_http_min_size\":67108864,\"cbo_materialized_view_rewrite_rule_output_limit\":3,\"automv_card_rowcount_ratio_hwm\":0.5,\"cbo_enable_low_cardinality_optimize\":true,\"scan_use_query_mem_ratio\":0.3,\"datacache_evict_probability\":100,\"enable_analyze_phase_prune_columns\":false,\"connector_huge_file_size\":1073741824,\"new_planner_optimize_timeout\":120000,\"enable_outer_join_reorder\":true,\"force_schedule_local\":false,\"hudi_mor_force_jni_reader\":false,\"enable_agg_spill_preaggregation\":true,\"cbo_enable_greedy_join_reorder\":true,\"range_pruner_max_predicate\":100,\"enable_rbo_table_prune\":false,\"spillable_operator_mask\":-1,\"rpc_http_min_size\":2147482624,\"enable_file_metacache\":false,\"cbo_debug_alive_backend_number\":0,\"global_runtime_filter_probe_min_size\":102400,\"scan_or_to_union_limit\":4,\"automv_default_partition_by_time_granule\":\"day\",\"enable_cbo_table_prune\":true,\"enable_parallel_merge\":true,\"cbo_materialized_view_rewrite_candidate_limit\":12,\"skew_join_use_mcv_count\":5,\"cbo_derive_join_is_null_predicate\":true,\"nested_mv_rewrite_max_level\":3,\"enable_materialized_view_text_match_rewrite\":false,\"big_query_profile_threshold\":\"0s\",\"net_write_timeout\":60,\"cbo_prune_shuffle_column_rate\":0.1,\"spill_revocable_max_bytes\":0,\"hash_join_push_down_right_table\":true,\"max_ukfk_join_reorder_scale_ratio\":100,\"pipeline_sink_dop\":0,\"automv_relative_error_bound\":0.05,\"broadcast_row_limit\":15000000,\"enable_prune_iceberg_manifest\":true,\"exec_mem_limit\":2147483648,\"enable_sort_aggregate\":false,\"query_cache_force_populate\":false,\"computation_fragment_scheduling_policy\":\"COMPUTE_NODES_ONLY\",\"runtime_filter_on_exchange_node\":false,\"disable_join_reorder\":false,\"enable_rule_based_materialized_view_rewrite\":true,\"global_runtime_filter_rpc_timeout\":400,\"connector_scan_use_query_mem_ratio\":0.3,\"net_buffer_length\":16384,\"cbo_prune_subfield\":true,\"full_sort_max_buffered_rows\":1024000,\"automv_use_cardinality_estimation\":true,\"query_timeout\":1800,\"connector_io_tasks_slow_io_latency_ms\":50,\"cbo_max_reorder_node\":50,\"automv_sampling_timeout\":300000,\"enable_distinct_column_bucketization\":false,\"enable_big_query_log\":true,\"analyze_mv\":\"sample\",\"runtime_filter_scan_wait_time\":20,\"enable_sync_materialized_view_rewrite\":true,\"prefer_compute_node\":false,\"enable_strict_type\":false,\"automv_enable_complex_derived_dimensions\":true,\"enable_table_prune_on_update\":false,\"group_concat_max_len\":1024,\"enable_stats_to_optimize_skew_join\":true,\"parse_tokens_limit\":3500000,\"chunk_size\":4096,\"global_runtime_filter_probe_min_selectivity\":0.5,\"query_mem_limit\":0,\"enable_filter_unused_columns_in_scan_stage\":true,\"enable_materialized_view_single_table_view_delta_rewrite\":false,\"enable_prune_complex_types_in_unnest\":true,\"automv_max_calculate_steps\":2147483647,\"auto_increment_increment\":1,\"sql_dialect\":\"StarRocks\",\"automv_use_hll_count_distinct\":false,\"enable_per_bucket_optimize\":true,\"automv_enable_complex_derived_metrics\":false,\"big_query_log_scan_rows_threshold\":1000000000,\"character_set_client\":\"utf8\",\"autocommit\":true,\"enable_column_expr_predicate\":true,\"enable_partition_bucket_optimize\":false,\"max_ukfk_join_reorder_fk_rows\":100000000,\"enable_runtime_adaptive_dop\":false,\"cbo_cte_max_limit\":10,\"connector_sink_compression_codec\":\"uncompressed\",\"automv_min_sampling_rows\":1073741824,\"storage_engine\":\"olap\",\"spill_operator_min_bytes\":52428800,\"cbo_enable_dp_join_reorder\":true,\"tx_visible_wait_timeout\":10,\"materialized_view_join_same_table_permutation_limit\":5,\"enable_materialized_view_view_delta_rewrite\":true,\"cbo_max_reorder_node_use_exhaustive\":4,\"enable_sql_digest\":false,\"spill_mem_table_num\":2,\"enable_spill\":false,\"enable_materialized_view_rewrite_greedy_mode\":false,\"pipeline_dop\":4,\"single_node_exec_plan\":false,\"full_sort_late_materialization_v2\":true,\"automv_max_order_by_columns\":3,\"join_implementation_mode_v2\":\"auto\",\"enable_connector_split_io_tasks\":false,\"sql_select_limit\":9223372036854775807,\"enable_materialized_view_rewrite\":true,\"materialized_view_subuqery_text_match_max_count\":4,\"statistic_collect_parallel\":1,\"hdfs_backend_selector_hash_algorithm\":\"consistent\",\"enable_expr_prune_partition\":true,\"enable_topn_runtime_filter\":true,\"disable_colocate_join\":false,\"max_pushdown_conditions_per_column\":-1,\"default_table_compression\":\"lz4_frame\",\"runtime_adaptive_dop_max_output_amplification_factor\":0,\"skew_join_rand_range\":1000,\"choose_execute_instances_mode\":\"LOCALITY\",\"skew_join_data_skew_threshold\":0.2,\"innodb_read_only\":true,\"spill_mem_limit_threshold\":0.8,\"cbo_reorder_threshold_use_exhaustive\":6,\"enable_predicate_reorder\":false,\"enable_query_cache\":false,\"transaction_read_only\":\"OFF\",\"max_allowed_packet\":33554432,\"enable_partition_level_cardinality_estimation\":true,\"enable_parallel_prepare_metadata\":false,\"time_zone\":\"+00:00\",\"enable_multicolumn_global_runtime_filter\":false,\"character_set_server\":\"utf8\",\"cbo_use_nth_exec_plan\":0,\"io_tasks_per_scan_operator\":4,\"parallel_exchange_instance_num\":-1,\"enable_shared_scan\":false,\"audit_execute_stmt\":false,\"cbo_derive_range_join_predicate\":false,\"allow_default_partition\":false,\"paimon_force_jni_reader\":false,\"enable_pipeline_level_shuffle\":true}",
  "be_number": 40,
  "be_core_stat": {
    "numOfHardwareCoresPerBe": "{\"12096\":48,\"12097\":48,\"12098\":48,\"12099\":48,\"12100\":48,\"12101\":48,\"12102\":48,\"12103\":48,\"12104\":48,\"12105\":48,\"12106\":48,\"12107\":48,\"10004\":48,\"12069\":48,\"12070\":48,\"12071\":48,\"12072\":48,\"12073\":48,\"12074\":48,\"12075\":48,\"12076\":48,\"12077\":48,\"12078\":48,\"12079\":48,\"12080\":48,\"12081\":48,\"12082\":48,\"12083\":48,\"12084\":48,\"12085\":48,\"12086\":48,\"12087\":48,\"12088\":48,\"12089\":48,\"12090\":48,\"12091\":48,\"12092\":48,\"12093\":48,\"12094\":48,\"12095\":48}",
    "cachedAvgNumOfHardwareCores": -1
  },
  "exception": [],
  "version": "3.2.12",
  "commit_version": "2bcb673"
}