{
  "statement": "WITH tbl_mock_309 (mock_308) AS (SELECT 'asdfasdfasdf' AS mock_308) , tbl_mock_001 (mock_214, mock_216, mock_311, mock_189, mock_139) AS (SELECT tbl_mock_313.mock_214, tbl_mock_313.mock_216, tbl_mock_313.mock_006 = 'CBU' AS mock_311, tbl_mock_313.mock_189, tbl_mock_313.mock_139\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_313) , tbl_mock_277 (mock_278, mock_314) AS (SELECT tbl_mock_315.mock_278, NOT (coalesce(tbl_mock_315.mock_267 IN ('Beijing', 'Shunyi'), FALSE)) AS mock_314\nFROM db_mock_000.tbl_mock_277 AS tbl_mock_315) , tbl_mock_280 (mock_281, mock_316) AS (SELECT tbl_mock_317.mock_281, NOT (tbl_mock_317.mock_267 IS NULL) AS mock_316\nFROM db_mock_000.tbl_mock_280 AS tbl_mock_317) , tbl_mock_320 (mock_318, mock_319) AS (SELECT tbl_mock_321.mock_214 AS mock_318, tbl_mock_322.mock_316 AS mock_319\nFROM db_mock_000.tbl_mock_294 AS tbl_mock_321 LEFT OUTER JOIN tbl_mock_280 AS tbl_mock_322 ON tbl_mock_321.mock_281 = tbl_mock_322.mock_281) , tbl_mock_327 (mock_323, mock_324, mock_325, mock_326, mock_139) AS (SELECT tbl_mock_328.mock_189 AS mock_323, tbl_mock_328.mock_311 AS mock_324, tbl_mock_329.mock_314 AS mock_325, tbl_mock_330.mock_319 AS mock_326, tbl_mock_328.mock_139\nFROM tbl_mock_001 AS tbl_mock_328 LEFT OUTER JOIN tbl_mock_277 AS tbl_mock_329 ON tbl_mock_328.mock_216 = tbl_mock_329.mock_278 LEFT OUTER JOIN tbl_mock_320 AS tbl_mock_330 ON tbl_mock_328.mock_214 = tbl_mock_330.mock_318) , tbl_mock_332 (mock_331) AS (SELECT replace(tbl_mock_333.mock_189, 'ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜ', 'abcdefghijklmnopqrstuvwxyzäöü') AS mock_331\nFROM db_mock_000.tbl_mock_001 AS tbl_mock_333) , tbl_mock_334 (mock_331) AS (SELECT tbl_mock_335.mock_331\nFROM tbl_mock_332 AS tbl_mock_335\nGROUP BY tbl_mock_335.mock_331) , tbl_mock_337 (mock_336) AS (SELECT array_agg(tbl_mock_338.mock_331) AS mock_336\nFROM tbl_mock_334 AS tbl_mock_338) , tbl_mock_341 (mock_339, mock_340) AS (SELECT tbl_mock_342.mock_308 AS mock_339, tbl_mock_343.mock_336 AS mock_340\nFROM tbl_mock_309 AS tbl_mock_342 CROSS JOIN tbl_mock_337 AS tbl_mock_343 ) , tbl_mock_345 (mock_344) AS (SELECT array_contains(tbl_mock_346.mock_340, tbl_mock_346.mock_339) AS mock_344\nFROM tbl_mock_341 AS tbl_mock_346) , tbl_mock_353 (mock_347, mock_348, mock_349, mock_350, mock_351, mock_352) AS (SELECT tbl_mock_355.mock_344 AS mock_347, tbl_mock_354.mock_139 AS mock_348, tbl_mock_354.mock_323 AS mock_349, tbl_mock_354.mock_324 AS mock_350, tbl_mock_354.mock_325 AS mock_351, tbl_mock_354.mock_326 AS mock_352\nFROM tbl_mock_327 AS tbl_mock_354 CROSS JOIN tbl_mock_345 AS tbl_mock_355 ) , tbl_mock_360 (mock_347, mock_349, mock_356, mock_357, mock_358, mock_359) AS (SELECT tbl_mock_361.mock_347, tbl_mock_361.mock_349, CAST((year(tbl_mock_361.mock_348)) AS BIGINT) AS mock_356, tbl_mock_361.mock_350 AS mock_357, tbl_mock_361.mock_351 AS mock_358, tbl_mock_361.mock_352 AS mock_359\nFROM tbl_mock_353 AS tbl_mock_361) , tbl_mock_366 (mock_347, mock_349, mock_362, mock_363, mock_364, mock_365) AS (SELECT tbl_mock_367.mock_347, tbl_mock_367.mock_349, tbl_mock_367.mock_356 >= (CAST(2023 AS BIGINT)) AS mock_362, tbl_mock_367.mock_357 AS mock_363, tbl_mock_367.mock_358 AS mock_364, tbl_mock_367.mock_359 AS mock_365\nFROM tbl_mock_360 AS tbl_mock_367) , tbl_mock_369 (mock_347, mock_349, mock_368) AS (SELECT tbl_mock_370.mock_347, tbl_mock_370.mock_349, ((((((tbl_mock_370.mock_363 AND tbl_mock_370.mock_364) AND tbl_mock_370.mock_365) AND tbl_mock_370.mock_362) AND tbl_mock_370.mock_363) AND tbl_mock_370.mock_364) AND tbl_mock_370.mock_365) AND tbl_mock_370.mock_362 AS mock_368\nFROM tbl_mock_366 AS tbl_mock_370) , tbl_mock_371 (mock_347, mock_349) AS (SELECT tbl_mock_372.mock_347, tbl_mock_372.mock_349\nFROM tbl_mock_369 AS tbl_mock_372\nWHERE tbl_mock_372.mock_368) , tbl_mock_374 (mock_373, mock_347) AS (SELECT count(tbl_mock_375.mock_349) AS mock_373, tbl_mock_375.mock_347\nFROM tbl_mock_371 AS tbl_mock_375\nGROUP BY tbl_mock_375.mock_347) , tbl_mock_376 (mock_373, mock_347) AS (SELECT tbl_mock_377.mock_373, tbl_mock_377.mock_347\nFROM tbl_mock_374 AS tbl_mock_377 LIMIT 2147483646) , tbl_mock_378 (mock_373, mock_347) AS (SELECT tbl_mock_379.mock_373, tbl_mock_379.mock_347\nFROM tbl_mock_376 AS tbl_mock_379 LIMIT 2147483646) , tbl_mock_380 (mock_305, mock_306, mock_307) AS ((SELECT tbl_mock_381.mock_373 AS mock_305, tbl_mock_381.mock_347 AS mock_306, CAST(1 AS BIGINT) AS mock_307\nFROM tbl_mock_378 AS tbl_mock_381) UNION ALL (SELECT NULL AS mock_305, NULL AS mock_306, CAST(2 AS BIGINT) AS mock_307\nFROM tbl_mock_309 AS tbl_mock_382)) SELECT tbl_mock_383.mock_305, tbl_mock_383.mock_306, tbl_mock_383.mock_307\nFROM tbl_mock_380 AS tbl_mock_383",
  "table_meta": {
    "db_mock_000.tbl_mock_001": "CREATE TABLE db_mock_000.tbl_mock_001 (\nmock_211 int(11) NOT NULL ,\nmock_239 largeint(40) NOT NULL ,\nmock_240 varchar(65535) ,\nmock_254 varchar(65535) ,\nmock_258 datetime ,\nmock_257 datetime ,\nmock_242 varchar(65535) ,\nmock_004 varchar(65535) ,\nmock_003 varchar(65535) ,\nmock_005 varchar(65535) ,\nmock_002 varchar(65535) ,\nmock_261 varchar(65535) ,\nmock_262 varchar(65535) ,\nmock_241 varchar(65535) ,\nmock_255 varchar(65535) ,\nmock_250 varchar(65535) ,\nmock_274 varchar(65535) ,\nmock_243 varchar(65535) ,\nmock_256 varchar(65535) ,\nmock_253 varchar(65535) ,\nmock_252 varchar(65535) ,\nmock_247 varchar(65535) ,\nmock_244 varchar(65535) ,\nmock_246 varchar(65535) ,\nmock_245 datetime ,\nmock_248 datetime ,\nmock_249 datetime ,\nmock_276 varchar(65535) ,\nmock_007 varchar(65535) ,\nmock_265 varchar(65535) ,\nmock_006 varchar(65535) ,\nmock_260 varchar(65535) ,\nmock_272 varchar(65535) ,\nmock_271 varchar(65535) ,\nmock_273 varchar(65535) ,\nmock_267 varchar(65535) ,\nmock_268 varchar(65535) ,\nmock_270 varchar(65535) ,\nmock_263 varchar(65535) ,\nmock_275 varchar(65535) ,\nid varchar(65535) ,\nmock_266 varchar(65535) ,\nmock_259 varchar(65535) ,\nmock_269 varchar(65535) ,\nmock_264 varchar(65535) ,\nmock_251 varchar(65535) ,\nmock_237 largeint(40) ,\nmock_230 largeint(40) ,\nmock_223 largeint(40) ,\nmock_212 largeint(40) ,\nmock_219 largeint(40) ,\nmock_238 largeint(40) ,\nmock_234 largeint(40) ,\nmock_220 largeint(40) ,\nmock_228 largeint(40) ,\nmock_235 largeint(40) ,\nmock_225 largeint(40) ,\nmock_226 largeint(40) ,\nmock_224 largeint(40) ,\nmock_222 largeint(40) ,\nmock_236 largeint(40) ,\nmock_229 largeint(40) ,\nmock_214 largeint(40) ,\nmock_215 largeint(40) ,\nmock_216 largeint(40) ,\nmock_217 largeint(40) ,\nmock_232 largeint(40) ,\nmock_213 largeint(40) ,\nmock_227 largeint(40) ,\nmock_231 largeint(40) ,\nmock_221 largeint(40) ,\nmock_218 largeint(40) ,\nmock_233 largeint(40) ,\nmock_019 array<datetime> ,\nmock_020 array<datetime> ,\nmock_031 array<datetime> ,\nmock_034 array<datetime> ,\nmock_035 array<datetime> ,\nmock_036 array<datetime> ,\nmock_037 array<datetime> ,\nmock_038 array<datetime> ,\nmock_039 array<datetime> ,\nmock_040 array<datetime> ,\nmock_021 array<datetime> ,\nmock_116 datetime ,\nmock_117 datetime ,\nmock_128 datetime ,\nmock_139 datetime ,\nmock_150 datetime ,\nmock_161 datetime ,\nmock_172 datetime ,\nmock_175 datetime ,\nmock_176 datetime ,\nmock_177 datetime ,\nmock_118 datetime ,\nmock_119 datetime ,\nmock_120 datetime ,\nmock_121 datetime ,\nmock_122 datetime ,\nmock_123 datetime ,\nmock_124 datetime ,\nmock_125 datetime ,\nmock_126 datetime ,\nmock_127 datetime ,\nmock_129 datetime ,\nmock_041 array<int(11)> ,\nmock_042 array<int(11)> ,\nmock_044 array<int(11)> ,\nmock_045 array<int(11)> ,\nmock_046 array<int(11)> ,\nmock_047 array<int(11)> ,\nmock_048 array<int(11)> ,\nmock_049 array<int(11)> ,\nmock_050 array<int(11)> ,\nmock_051 array<int(11)> ,\nmock_043 array<int(11)> ,\nmock_189 varchar(65533) ,\nmock_190 varchar(65533) ,\nmock_201 varchar(65533) ,\nmock_204 varchar(65533) ,\nmock_205 varchar(65533) ,\nmock_206 varchar(65533) ,\nmock_207 varchar(65533) ,\nmock_208 varchar(65533) ,\nmock_209 varchar(65533) ,\nmock_210 varchar(65533) ,\nmock_191 varchar(65533) ,\nmock_084 bigint(20) ,\nmock_085 bigint(20) ,\nmock_096 bigint(20) ,\nmock_107 bigint(20) ,\nmock_110 bigint(20) ,\nmock_111 bigint(20) ,\nmock_112 bigint(20) ,\nmock_113 bigint(20) ,\nmock_114 bigint(20) ,\nmock_115 bigint(20) ,\nmock_086 bigint(20) ,\nmock_178 double ,\nmock_179 double ,\nmock_181 double ,\nmock_182 double ,\nmock_183 double ,\nmock_184 double ,\nmock_185 double ,\nmock_186 double ,\nmock_187 double ,\nmock_188 double ,\nmock_180 double ,\nmock_052 array<varchar(65533)> ,\nmock_053 array<varchar(65533)> ,\nmock_064 array<varchar(65533)> ,\nmock_075 array<varchar(65533)> ,\nmock_078 array<varchar(65533)> ,\nmock_079 array<varchar(65533)> ,\nmock_080 array<varchar(65533)> ,\nmock_081 array<varchar(65533)> ,\nmock_082 array<varchar(65533)> ,\nmock_083 array<varchar(65533)> ,\nmock_054 array<varchar(65533)> ,\nmock_008 array<bigint(20)> ,\nmock_009 array<bigint(20)> ,\nmock_011 array<bigint(20)> ,\nmock_012 array<bigint(20)> ,\nmock_013 array<bigint(20)> ,\nmock_014 array<bigint(20)> ,\nmock_015 array<bigint(20)> ,\nmock_016 array<bigint(20)> ,\nmock_017 array<bigint(20)> ,\nmock_018 array<bigint(20)> ,\nmock_010 array<bigint(20)> ,\nmock_192 varchar(65533) ,\nmock_193 varchar(65533) ,\nmock_194 varchar(65533) ,\nmock_195 varchar(65533) ,\nmock_196 varchar(65533) ,\nmock_197 varchar(65533) ,\nmock_198 varchar(65533) ,\nmock_199 varchar(65533) ,\nmock_200 varchar(65533) ,\nmock_202 varchar(65533) ,\nmock_203 varchar(65533) ,\nmock_055 array<varchar(65533)> ,\nmock_056 array<varchar(65533)> ,\nmock_057 array<varchar(65533)> ,\nmock_058 array<varchar(65533)> ,\nmock_059 array<varchar(65533)> ,\nmock_060 array<varchar(65533)> ,\nmock_061 array<varchar(65533)> ,\nmock_062 array<varchar(65533)> ,\nmock_063 array<varchar(65533)> ,\nmock_065 array<varchar(65533)> ,\nmock_066 array<varchar(65533)> ,\nmock_067 array<varchar(65533)> ,\nmock_068 array<varchar(65533)> ,\nmock_069 array<varchar(65533)> ,\nmock_070 array<varchar(65533)> ,\nmock_071 array<varchar(65533)> ,\nmock_072 array<varchar(65533)> ,\nmock_073 array<varchar(65533)> ,\nmock_074 array<varchar(65533)> ,\nmock_076 array<varchar(65533)> ,\nmock_077 array<varchar(65533)> ,\nmock_022 array<datetime> ,\nmock_023 array<datetime> ,\nmock_024 array<datetime> ,\nmock_025 array<datetime> ,\nmock_026 array<datetime> ,\nmock_027 array<datetime> ,\nmock_028 array<datetime> ,\nmock_029 array<datetime> ,\nmock_030 array<datetime> ,\nmock_032 array<datetime> ,\nmock_033 array<datetime> ,\nmock_130 datetime ,\nmock_131 datetime ,\nmock_132 datetime ,\nmock_133 datetime ,\nmock_134 datetime ,\nmock_135 datetime ,\nmock_136 datetime ,\nmock_137 datetime ,\nmock_138 datetime ,\nmock_140 datetime ,\nmock_141 datetime ,\nmock_142 datetime ,\nmock_143 datetime ,\nmock_144 datetime ,\nmock_145 datetime ,\nmock_146 datetime ,\nmock_147 datetime ,\nmock_148 datetime ,\nmock_149 datetime ,\nmock_151 datetime ,\nmock_152 datetime ,\nmock_153 datetime ,\nmock_154 datetime ,\nmock_155 datetime ,\nmock_156 datetime ,\nmock_157 datetime ,\nmock_158 datetime ,\nmock_159 datetime ,\nmock_160 datetime ,\nmock_162 datetime ,\nmock_163 datetime ,\nmock_164 datetime ,\nmock_165 datetime ,\nmock_166 datetime ,\nmock_167 datetime ,\nmock_168 datetime ,\nmock_169 datetime ,\nmock_170 datetime ,\nmock_171 datetime ,\nmock_173 datetime ,\nmock_174 datetime ,\nmock_087 bigint(20) ,\nmock_088 bigint(20) ,\nmock_089 bigint(20) ,\nmock_090 bigint(20) ,\nmock_091 bigint(20) ,\nmock_092 bigint(20) ,\nmock_093 bigint(20) ,\nmock_094 bigint(20) ,\nmock_095 bigint(20) ,\nmock_097 bigint(20) ,\nmock_098 bigint(20) ,\nmock_099 bigint(20) ,\nmock_100 bigint(20) ,\nmock_101 bigint(20) ,\nmock_102 bigint(20) ,\nmock_103 bigint(20) ,\nmock_104 bigint(20) ,\nmock_105 bigint(20) ,\nmock_106 bigint(20) ,\nmock_108 bigint(20) ,\nmock_109 bigint(20) \n) ENGINE= OLAP \nPRIMARY KEY(mock_211, mock_239)\nDISTRIBUTED BY HASH(mock_211) BUCKETS 2499 \nPROPERTIES (\n\"replication_num\" = \"1\",\n\"colocate_with\" = \"ae941e934_6b1b_48d1_b477_deb6c6a2acc7_e3b880fe_42b5_4d3d_8632_d64e89cdc175_7acec888_043a_4941_99b9_c69fca105018_cg_group1\"\n);",
    "db_mock_000.tbl_mock_277": "CREATE TABLE db_mock_000.tbl_mock_277 (\nmock_279 largeint(40) NOT NULL ,\nmock_268 varchar(65535) ,\nmock_270 varchar(65535) ,\nmock_267 varchar(65535) ,\nid varchar(65535) ,\nmock_216 largeint(40) ,\nmock_278 largeint(40) \n) ENGINE= OLAP \nPRIMARY KEY(mock_279)\nDISTRIBUTED BY HASH(mock_279) BUCKETS 20 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);",
    "db_mock_000.tbl_mock_280": "CREATE TABLE db_mock_000.tbl_mock_280 (\nmock_282 largeint(40) NOT NULL ,\nmock_285 bigint(20) ,\nmock_286 bigint(20) ,\nmock_290 double ,\nmock_288 double ,\nmock_289 double ,\nmock_287 double ,\nmock_284 double ,\nmock_283 double ,\nmock_293 varchar(65535) ,\nmock_292 varchar(65535) ,\nmock_291 varchar(65535) ,\nmock_275 varchar(65535) ,\nmock_267 varchar(65535) ,\nid varchar(65535) ,\nmock_281 largeint(40) \n) ENGINE= OLAP \nPRIMARY KEY(mock_282)\nDISTRIBUTED BY HASH(mock_282) BUCKETS 20 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);",
    "db_mock_000.tbl_mock_294": "CREATE TABLE db_mock_000.tbl_mock_294 (\nmock_297 largeint(40) NOT NULL ,\nmock_298 bigint(20) ,\nmock_299 bigint(20) ,\nmock_293 varchar(65535) ,\nmock_300 double ,\nmock_301 bigint(20) ,\nmock_295 varchar(65535) ,\nmock_296 varchar(65535) ,\nmock_275 varchar(65535) ,\nmock_292 varchar(65535) ,\nmock_303 varchar(65535) ,\nmock_291 varchar(65535) ,\nmock_302 varchar(65535) ,\nid varchar(65535) ,\nmock_304 varchar(65535) ,\nmock_214 largeint(40) ,\nmock_281 largeint(40) \n) ENGINE= OLAP \nPRIMARY KEY(mock_297)\nDISTRIBUTED BY HASH(mock_297) BUCKETS 20 \nPROPERTIES (\n\"replication_num\" = \"1\"\n);"
  },
  "table_row_count": {
    "db_mock_000.tbl_mock_001": {
      "tbl_mock_001": 372066436
    },
    "db_mock_000.tbl_mock_280": {
      "tbl_mock_280": 1
    },
    "db_mock_000.tbl_mock_294": {
      "tbl_mock_294": 1
    },
    "db_mock_000.tbl_mock_277": {
      "tbl_mock_277": 18
    }
  },
  "column_statistics": {
    "db_mock_000.tbl_mock_001": {
      "mock_006": "[-Infinity, Infinity, 0.023585, 2.0, 3.0] ESTIMATE",
      "mock_214": "[-1.70140644854813E38, 1.7014074948370689E38, 0.0, 16.0, 142992.0] ESTIMATE",
      "mock_189": "[-Infinity, Infinity, 0.431125, 42.50205, 5663.0] ESTIMATE",
      "mock_139": "[1.578355201E9, 1.731888001E9, 0.20431, 8.0, 1090.0] ESTIMATE",
      "mock_216": "[-1.576315803121195E38, 1.2156607072359882E38, 0.0, 16.0, 15.0] ESTIMATE"
    },
    "db_mock_000.tbl_mock_280": {
      "mock_267": "[-Infinity, Infinity, 0.0, 14.44308943089431, 9.0] ESTIMATE",
      "mock_281": "[-1.6944259208712022E38, 1.7007073650589482E38, 0.0, 16.0, 875.0] ESTIMATE"
    },
    "db_mock_000.tbl_mock_294": {
      "mock_214": "[-1.6931355558944874E38, 1.6961467521643026E38, 0.0, 16.0, 3465.0] ESTIMATE",
      "mock_281": "[-1.6980864537066439E38, 1.7007073650589482E38, 0.0, 16.0, 797.0] ESTIMATE"
    },
    "db_mock_000.tbl_mock_277": {
      "mock_267": "[-Infinity, Infinity, 0.0, 12.61111111111111, 18.0] ESTIMATE",
      "mock_278": "[-1.576315803121195E38, 1.4578736798154647E38, 0.0, 16.0, 18.0] ESTIMATE"
    }
  },
  "explain_info": "PLAN COST\n  CPU: 1.9840026440098994E9\n  Memory: 8788.10205\n\nPLAN FRAGMENT 0(F23)\n  Output Exprs:616: count | 617: array_contains | 618: cast\n  Input Partition: UNPARTITIONED\n  RESULT SINK\n\n  45:EXCHANGE\n     cardinality: 2147483647\n\nPLAN FRAGMENT 1(F00)\n\n  Input Partition: RANDOM\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 45\n\n  0:UNION\n  |  output exprs:\n  |      [616, BIGINT, true] | [617, VARCHAR, true] | [618, BIGINT, false]\n  |  child exprs:\n  |      [607: count, BIGINT, false] | [603: array_contains, VARCHAR, true] | [608: cast, BIGINT, false]\n  |      [614: cast, BIGINT, true] | [615: cast, VARCHAR, true] | [613: cast, BIGINT, false]\n  |  pass-through-operands: all\n  |  cardinality: 2147483647\n  |  column statistics: \n  |  * count-->[-Infinity, Infinity, 0.4311249997992418, 7.999999994270043, 1.5] ESTIMATE\n  |  * array_contains-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * cast-->[1.0, 2.0, 0.0, 8.0, 2.0] ESTIMATE\n  |  \n  |----44:EXCHANGE\n  |       cardinality: 1\n  |    \n  41:EXCHANGE\n     limit: 2147483646\n     cardinality: 1\n\nPLAN FRAGMENT 2(F22)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 44\n\n  43:Project\n  |  output columns:\n  |  613 <-> 2\n  |  614 <-> NULL\n  |  615 <-> NULL\n  |  cardinality: 1\n  |  column statistics: \n  |  * cast-->[2.0, 2.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  * cast-->[-Infinity, Infinity, 0.0, 1.0, 1.0] ESTIMATE\n  |  \n  42:UNION\n     constant exprs: \n         NULL\n     cardinality: 1\n     column statistics: \n     * -->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 23.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 3(F21)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: RANDOM\n  OutPut Exchange id: 41\n\n  40:EXCHANGE\n     distribution type: GATHER\n     limit: 2147483646\n     cardinality: 1\n\nPLAN FRAGMENT 4(F20)\n\n  Input Partition: HASH_PARTITIONED: 603: array_contains\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 40\n\n  39:Project\n  |  output columns:\n  |  603 <-> [603: array_contains, VARCHAR, true]\n  |  607 <-> [607: count, BIGINT, false]\n  |  608 <-> 1\n  |  limit: 2147483646\n  |  cardinality: 1\n  |  column statistics: \n  |  * array_contains-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * count-->[0.0, 1.0, 0.431125, 8.0, 1.0] ESTIMATE\n  |  * cast-->[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  \n  38:AGGREGATE (merge finalize)\n  |  aggregate: count[([607: count, BIGINT, false]); args: VARCHAR; result: BIGINT; args nullable: true; result nullable: false]\n  |  group by: [603: array_contains, VARCHAR, true]\n  |  limit: 2147483646\n  |  cardinality: 1\n  |  column statistics: \n  |  * array_contains-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * count-->[0.0, 1.0, 0.431125, 8.0, 1.0] ESTIMATE\n  |  * cast-->[1.0, 1.0, 0.0, 8.0, 1.0] ESTIMATE\n  |  \n  37:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [603: array_contains, VARCHAR, true]\n     cardinality: 1\n\nPLAN FRAGMENT 5(F19)\n\n  Input Partition: HASH_PARTITIONED: 286: mock_278\n  OutPut Partition: HASH_PARTITIONED: 603: array_contains\n  OutPut Exchange id: 37\n\n  36:AGGREGATE (update serialize)\n  |  STREAMING\n  |  aggregate: count[([119: mock_189, VARCHAR, true]); args: VARCHAR; result: BIGINT; args nullable: true; result nullable: false]\n  |  group by: [603: array_contains, VARCHAR, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * array_contains-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  * count-->[0.0, 1.0, 0.431125, 8.0, 1.0] ESTIMATE\n  |  \n  35:Project\n  |  output columns:\n  |  119 <-> [119: mock_189, VARCHAR, true]\n  |  603 <-> array_contains[('übergabezeitpunkt woche', [601: array_agg, ARRAY<VARCHAR>, true], 3, '##'); args: VARCHAR,INVALID_TYPE,INT,VARCHAR; result: VARCHAR; args nullable: true; result nullable: true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_189-->[-Infinity, Infinity, 0.431125, 42.50205, 1.0] ESTIMATE\n  |  * array_contains-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  34:HASH JOIN\n  |  join op: INNER JOIN (PARTITIONED)\n  |  equal join conjunct: [286: mock_278, LARGEINT, true] = [67: mock_216, LARGEINT, true]\n  |  build runtime filters:\n  |  - filter_id = 2, build_expr = (67: mock_216), remote = true\n  |  output columns: 119, 601\n  |  can local shuffle: true\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_189-->[-Infinity, Infinity, 0.431125, 42.50205, 1.0] ESTIMATE\n  |  * array_contains-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----33:EXCHANGE\n  |       distribution type: SHUFFLE\n  |       partition exprs: [67: mock_216, LARGEINT, true]\n  |       cardinality: 1\n  |    \n  3:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [286: mock_278, LARGEINT, true]\n     cardinality: 14\n\nPLAN FRAGMENT 6(F17)\n\n  Input Partition: HASH_PARTITIONED: 65: mock_214\n  OutPut Partition: HASH_PARTITIONED: 67: mock_216\n  OutPut Exchange id: 33\n\n  32:Project\n  |  output columns:\n  |  67 <-> [67: mock_216, LARGEINT, true]\n  |  119 <-> [119: mock_189, VARCHAR, true]\n  |  601 <-> [601: array_agg, ARRAY<VARCHAR>, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_216-->[-1.576315803121195E38, 1.2156607072359882E38, 0.0, 16.0, 15.0] ESTIMATE\n  |  * mock_189-->[-Infinity, Infinity, 0.431125, 42.50205, 5663.0] ESTIMATE\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  31:HASH JOIN\n  |  join op: INNER JOIN (PARTITIONED)\n  |  equal join conjunct: [65: mock_214, LARGEINT, true] = [303: mock_214, LARGEINT, true]\n  |  build runtime filters:\n  |  - filter_id = 1, build_expr = (303: mock_214), remote = true\n  |  output columns: 67, 119, 601\n  |  can local shuffle: false\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_214-->[-1.70140644854813E38, 1.7014074948370689E38, 0.0, 16.0, 142992.0] ESTIMATE\n  |  * mock_216-->[-1.576315803121195E38, 1.2156607072359882E38, 0.0, 16.0, 15.0] ESTIMATE\n  |  * mock_189-->[-Infinity, Infinity, 0.431125, 42.50205, 5663.0] ESTIMATE\n  |  * mock_214-->[-1.6931355558944874E38, 1.6961467521643026E38, 0.0, 16.0, 3465.0] ESTIMATE\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----30:EXCHANGE\n  |       distribution type: SHUFFLE\n  |       partition exprs: [303: mock_214, LARGEINT, true]\n  |       cardinality: 1\n  |    \n  6:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [65: mock_214, LARGEINT, true]\n     cardinality: 1\n\nPLAN FRAGMENT 7(F15)\n\n  Input Partition: HASH_PARTITIONED: 304: mock_281\n  OutPut Partition: HASH_PARTITIONED: 303: mock_214\n  OutPut Exchange id: 30\n\n  29:Project\n  |  output columns:\n  |  303 <-> [303: mock_214, LARGEINT, true]\n  |  601 <-> [601: array_agg, ARRAY<VARCHAR>, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_214-->[-1.6931355558944874E38, 1.6961467521643026E38, 0.0, 16.0, 3465.0] ESTIMATE\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  28:HASH JOIN\n  |  join op: INNER JOIN (PARTITIONED)\n  |  equal join conjunct: [304: mock_281, LARGEINT, true] = [320: mock_281, LARGEINT, true]\n  |  build runtime filters:\n  |  - filter_id = 0, build_expr = (320: mock_281), remote = true\n  |  output columns: 303, 601\n  |  can local shuffle: false\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_214-->[-1.6931355558944874E38, 1.6961467521643026E38, 0.0, 16.0, 3465.0] ESTIMATE\n  |  * mock_281-->[-1.6980864537066439E38, 1.7007073650589482E38, 0.0, 16.0, 797.0] ESTIMATE\n  |  * mock_281-->[-1.6944259208712022E38, 1.7007073650589482E38, 0.0, 16.0, 875.0] ESTIMATE\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----27:EXCHANGE\n  |       distribution type: SHUFFLE\n  |       partition exprs: [320: mock_281, LARGEINT, true]\n  |       cardinality: 1\n  |    \n  13:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [304: mock_281, LARGEINT, true]\n     cardinality: 1\n\nPLAN FRAGMENT 8(F09)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 320: mock_281\n  OutPut Exchange id: 27\n\n  26:Project\n  |  output columns:\n  |  320 <-> [320: mock_281, LARGEINT, true]\n  |  601 <-> [601: array_agg, ARRAY<VARCHAR>, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_281-->[-1.6944259208712022E38, 1.7007073650589482E38, 0.0, 16.0, 875.0] ESTIMATE\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  25:NESTLOOP JOIN\n  |  join op: CROSS JOIN\n  |  can local shuffle: false\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_281-->[-1.6944259208712022E38, 1.7007073650589482E38, 0.0, 16.0, 875.0] ESTIMATE\n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  |----24:EXCHANGE\n  |       distribution type: BROADCAST\n  |       cardinality: 1\n  |    \n  15:Project\n  |  output columns:\n  |  320 <-> [320: mock_281, LARGEINT, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_281-->[-1.6944259208712022E38, 1.7007073650589482E38, 0.0, 16.0, 875.0] ESTIMATE\n  |  \n  14:OlapScanNode\n     table: mock_280, rollup: mock_280\n     preAggregation: on\n     Predicates: 318: mock_267 IS NOT NULL\n     partitionsRatio=1/1, tabletsRatio=20/20\n     tabletList=394880022,394880032,394880045,394880824,394880828,394880832,394880836,394880840,394880844,394880848 ...\n     actualRows=872, avgRowSize=30.443089\n     cardinality: 1\n     column statistics: \n     * mock_267-->[-Infinity, Infinity, 0.0, 14.44308943089431, 9.0] ESTIMATE\n     * mock_281-->[-1.6944259208712022E38, 1.7007073650589482E38, 0.0, 16.0, 875.0] ESTIMATE\n\nPLAN FRAGMENT 9(F12)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 24\n\n  23:AGGREGATE (merge finalize)\n  |  aggregate: array_agg[([601: array_agg, struct<col1 array<varchar>>, true]); args: VARCHAR; result: ARRAY<VARCHAR>; args nullable: true; result nullable: true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  22:EXCHANGE\n     distribution type: GATHER\n     cardinality: 1\n\nPLAN FRAGMENT 10(F11)\n\n  Input Partition: HASH_PARTITIONED: 600: xxx_translate\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 22\n\n  21:AGGREGATE (update serialize)\n  |  aggregate: array_agg[([600: xxx_translate, VARCHAR, true]); args: VARCHAR; result: struct<col1 array<varchar>>; args nullable: true; result nullable: true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * array_agg-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  20:AGGREGATE (merge finalize)\n  |  group by: [600: xxx_translate, VARCHAR, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * xxx_translate-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  19:EXCHANGE\n     distribution type: SHUFFLE\n     partition exprs: [600: xxx_translate, VARCHAR, true]\n     cardinality: 1\n\nPLAN FRAGMENT 11(F10)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 600: xxx_translate\n  OutPut Exchange id: 19\n\n  18:AGGREGATE (update serialize)\n  |  STREAMING\n  |  group by: [600: xxx_translate, VARCHAR, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * xxx_translate-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  17:Project\n  |  output columns:\n  |  600 <-> xxx_translate[([440: mock_189, VARCHAR, true], 'ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜ', 'abcdefghijklmnopqrstuvwxyzäöü'); args: VARCHAR,VARCHAR,VARCHAR; result: VARCHAR; args nullable: true; result nullable: true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * xxx_translate-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n  |  \n  16:OlapScanNode\n     table: mock_001, rollup: mock_001\n     preAggregation: on\n     partitionsRatio=1/1, tabletsRatio=2499/2499\n     tabletList=394881285,394881289,394881293,394881343,394881347,394881351,394881355,394881359,394881493,394881497 ...\n     actualRows=9060365, avgRowSize=43.50205\n     cardinality: 1\n     column statistics: \n     * mock_189-->[-Infinity, Infinity, 0.431125, 42.50205, 5663.0] ESTIMATE\n     * xxx_translate-->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n\nPLAN FRAGMENT 12(F05)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 304: mock_281\n  OutPut Exchange id: 13\n\n  12:Project\n  |  output columns:\n  |  303 <-> [303: mock_214, LARGEINT, true]\n  |  304 <-> [304: mock_281, LARGEINT, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_214-->[-1.6931355558944874E38, 1.6961467521643026E38, 0.0, 16.0, 3465.0] ESTIMATE\n  |  * mock_281-->[-1.6980864537066439E38, 1.7007073650589482E38, 0.0, 16.0, 797.0] ESTIMATE\n  |  \n  11:NESTLOOP JOIN\n  |  join op: CROSS JOIN\n  |  can local shuffle: false\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_214-->[-1.6931355558944874E38, 1.6961467521643026E38, 0.0, 16.0, 3465.0] ESTIMATE\n  |  * mock_281-->[-1.6980864537066439E38, 1.7007073650589482E38, 0.0, 16.0, 797.0] ESTIMATE\n  |  * expr-->[-Infinity, Infinity, 0.0, 23.0, 1.0] ESTIMATE\n  |  \n  |----10:EXCHANGE\n  |       distribution type: BROADCAST\n  |       cardinality: 1\n  |    \n  7:OlapScanNode\n     table: mock_294, rollup: mock_294\n     preAggregation: on\n     Predicates: 304: mock_281 IS NOT NULL\n     partitionsRatio=1/1, tabletsRatio=20/20\n     tabletList=394880978,394880982,394880986,394880990,394880994,394880998,394881002,394881006,394881010,394881014 ...\n     actualRows=3419, avgRowSize=32.0\n     cardinality: 1\n     probe runtime filters:\n     - filter_id = 0, probe_expr = (304: mock_281)\n     column statistics: \n     * mock_214-->[-1.6931355558944874E38, 1.6961467521643026E38, 0.0, 16.0, 3465.0] ESTIMATE\n     * mock_281-->[-1.6980864537066439E38, 1.7007073650589482E38, 0.0, 16.0, 797.0] ESTIMATE\n\nPLAN FRAGMENT 13(F06)\n\n  Input Partition: UNPARTITIONED\n  OutPut Partition: UNPARTITIONED\n  OutPut Exchange id: 10\n\n  9:Project\n  |  output columns:\n  |  323 <-> 'übergabezeitpunkt woche'\n  |  cardinality: 1\n  |  column statistics: \n  |  * expr-->[-Infinity, Infinity, 0.0, 23.0, 1.0] ESTIMATE\n  |  \n  8:UNION\n     constant exprs: \n         NULL\n     cardinality: 1\n     column statistics: \n     * -->[-Infinity, Infinity, 0.0, 1.0, 1.0] UNKNOWN\n     * expr-->[-Infinity, Infinity, 0.0, 23.0, 1.0] ESTIMATE\n\nPLAN FRAGMENT 14(F03)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 65: mock_214\n  OutPut Exchange id: 06\n\n  5:Project\n  |  output columns:\n  |  65 <-> [65: mock_214, LARGEINT, true]\n  |  67 <-> [67: mock_216, LARGEINT, true]\n  |  119 <-> [119: mock_189, VARCHAR, true]\n  |  cardinality: 1\n  |  column statistics: \n  |  * mock_214-->[-1.70140644854813E38, 1.7014074948370689E38, 0.0, 16.0, 142992.0] ESTIMATE\n  |  * mock_216-->[-1.576315803121195E38, 1.2156607072359882E38, 0.0, 16.0, 15.0] ESTIMATE\n  |  * mock_189-->[-Infinity, Infinity, 0.431125, 42.50205, 5663.0] ESTIMATE\n  |  \n  4:OlapScanNode\n     table: mock_001, rollup: mock_001\n     preAggregation: on\n     Predicates: [33: mock_006, VARCHAR, true] = 'CBU', year[([90: mock_139, DATETIME, true]); args: DATETIME; result: SMALLINT; args nullable: true; result nullable: true] >= 2023\n     partitionsRatio=1/1, tabletsRatio=2499/2499\n     tabletList=394881285,394881289,394881293,394881343,394881347,394881351,394881355,394881359,394881493,394881497 ...\n     actualRows=9060365, avgRowSize=84.50205\n     cardinality: 1\n     probe runtime filters:\n     - filter_id = 1, probe_expr = (65: mock_214)\n     column statistics: \n     * mock_006-->[-Infinity, Infinity, 0.0, 2.0, 3.0] ESTIMATE\n     * mock_214-->[-1.70140644854813E38, 1.7014074948370689E38, 0.0, 16.0, 142992.0] ESTIMATE\n     * mock_216-->[-1.576315803121195E38, 1.2156607072359882E38, 0.0, 16.0, 15.0] ESTIMATE\n     * mock_139-->[1.578355201E9, 1.731888001E9, 0.20431, 8.0, 1090.0] ESTIMATE\n     * mock_189-->[-Infinity, Infinity, 0.431125, 42.50205, 5663.0] ESTIMATE\n\nPLAN FRAGMENT 15(F01)\n\n  Input Partition: RANDOM\n  OutPut Partition: HASH_PARTITIONED: 286: mock_278\n  OutPut Exchange id: 03\n\n  2:Project\n  |  output columns:\n  |  286 <-> [286: mock_278, LARGEINT, true]\n  |  cardinality: 14\n  |  column statistics: \n  |  * mock_278-->[-1.576315803121195E38, 1.4578736798154647E38, 0.0, 16.0, 13.5] ESTIMATE\n  |  \n  1:OlapScanNode\n     table: mock_277, rollup: mock_277\n     preAggregation: on\n     Predicates: NOT (coalesce(283: mock_267 IN ('Beijing', 'Shunyi'), FALSE))\n     partitionsRatio=1/1, tabletsRatio=20/20\n     tabletList=394881111,394881148,394881152,394881272,394881395,394881399,394881403,394881407,394881411,394881415 ...\n     actualRows=18, avgRowSize=28.61111\n     cardinality: 14\n     probe runtime filters:\n     - filter_id = 2, probe_expr = (286: mock_278)\n     column statistics: \n     * mock_267-->[-Infinity, Infinity, 0.0, 12.61111111111111, 13.5] ESTIMATE\n     * mock_278-->[-1.576315803121195E38, 1.4578736798154647E38, 0.0, 16.0, 13.5] ESTIMATE\n",
  "session_variables": "{\"partial_update_mode\":\"auto\",\"cbo_cte_reuse\":true,\"character_set_connection\":\"utf8\",\"cbo_use_correlated_join_estimate\":true,\"enable_insert_strict\":true,\"enable_connector_adaptive_io_tasks\":true,\"tx_isolation\":\"REPEATABLE-READ\",\"enable_hive_metadata_cache_with_insert\":false,\"hive_temp_staging_dir\":\"/tmp/starrocks\",\"cbo_cte_reuse_rate_v2\":0,\"spill_rand_ratio\":0.1,\"enable_datacache_io_adaptor\":false,\"character_set_results\":\"utf8\",\"materialized_view_union_rewrite_mode\":0,\"enable_count_star_optimization\":true,\"enable_iceberg_column_statistics\":false,\"thrift_plan_protocol\":\"binary\",\"enable_plan_serialize_concurrently\":true,\"enable_rewrite_partition_column_minmax\":true,\"global_runtime_filter_build_min_size\":131072,\"enable_iceberg_identity_column_optimize\":true,\"enable_view_based_mv_rewrite\":false,\"query_excluding_mv_names\":\"\",\"enable_rewrite_simple_agg_to_meta_scan\":false,\"enable_ukfk_opt\":false,\"enable_adaptive_sink_dop\":true,\"enable_ukfk_join_reorder\":false,\"consistent_hash_virtual_number\":128,\"warehouse\":\"default_warehouse\",\"enable_profile\":false,\"load_mem_limit\":0,\"spill_storage_volume\":\"\",\"cbo_eq_base_type\":\"varchar\",\"enable_materialized_view_for_insert\":false,\"large_decimal_underlying_type\":\"panic\",\"sql_safe_updates\":0,\"runtime_filter_early_return_selectivity\":0.05,\"enable_local_shuffle_agg\":true,\"disable_function_fold_constants\":false,\"enable_query_queue\":true,\"enable_cbo_view_based_mv_rewrite\":false,\"select_ratio_threshold\":0.15,\"enable_connector_sink_global_shuffle\":true,\"query_delivery_timeout\":300,\"collation_database\":\"utf8_general_ci\",\"spill_mem_table_size\":104857600,\"enable_gin_filter\":true,\"follower_query_forward_mode\":\"\",\"orc_use_column_names\":false,\"spill_enable_compaction\":true,\"cbo_use_lock_db\":false,\"new_planner_agg_stage\":0,\"enable_strict_order_by\":true,\"hash_join_interpolate_passthrough\":false,\"use_compute_nodes\":-1,\"enable_metadata_profile\":false,\"collation_connection\":\"utf8_general_ci\",\"enable_rewrite_bitmap_union_to_bitamp_agg\":true,\"enable_force_rule_based_mv_rewrite\":true,\"enable_array_distinct_after_agg_opt\":true,\"resource_group\":\"\",\"group_execution_max_groups\":128,\"scan_hive_partition_num_limit\":0,\"always_collect_low_card_dict\":false,\"enable_materialized_view_plan_cache\":true,\"spill_operator_max_bytes\":1048576000,\"enable_materialized_view_agg_pushdown_rewrite\":false,\"cbo_max_reorder_node_use_dp\":10,\"cbo_prepare_metadata_thread_pool_size\":16,\"enable_result_sink_accumulate\":true,\"enable_hive_column_stats\":true,\"enable_async_profile\":true,\"enable_groupby_use_output_alias\":false,\"global_runtime_filter_wait_timeout\":20,\"forward_to_leader\":false,\"enable_prune_column_after_index_filter\":true,\"count_distinct_column_buckets\":1024,\"cross_join_cost_penalty\":1000000,\"query_cache_agg_cardinality_limit\":5000000,\"connector_sink_spill_mem_limit_threshold\":0.5,\"cboPushDownAggregateMode_v1\":-1,\"window_partition_mode\":1,\"enable_tablet_internal_parallel_v2\":true,\"interpolate_passthrough\":true,\"enable_incremental_mv\":false,\"cbo_push_down_topn_limit\":1000,\"SQL_AUTO_IS_NULL\":false,\"event_scheduler\":\"OFF\",\"max_pipeline_dop\":64,\"broadcast_right_table_scale_factor\":10,\"materialized_view_rewrite_mode\":\"DEFAULT\",\"enable_read_iceberg_puffin_ndv\":true,\"enable_write_hive_external_table\":false,\"enable_simplify_case_when\":true,\"enable_aggregation_pipeline_share_limit\":true,\"runtime_join_filter_push_down_limit\":1024000,\"trace_log_mode\":\"command\",\"enable_scan_datacache\":false,\"big_query_log_cpu_second_threshold\":480,\"div_precision_increment\":4,\"runtime_adaptive_dop_max_block_rows_per_driver_seq\":16384,\"log_rejected_record_num\":0,\"phased_scheduler_max_concurrency\":2,\"populate_datacache_mode\":\"auto\",\"enable_short_circuit\":false,\"cbo_push_down_distinct_below_window\":true,\"sql_mode_v2\":32,\"prefer_cte_rewrite\":false,\"optimizer_materialized_view_timelimit\":1000,\"hdfs_backend_selector_scan_range_shuffle\":false,\"pipeline_profile_level\":1,\"parallel_fragment_exec_instance_num\":1,\"max_scan_key_num\":-1,\"net_read_timeout\":60,\"streaming_preaggregation_mode\":\"auto\",\"hive_partition_stats_sample_size\":3000,\"enable_mv_planner\":false,\"enable_collect_table_level_scan_stats\":true,\"enable_fine_grained_range_predicate\":false,\"enable_populate_datacache\":true,\"enable_connector_sink_writer_scaling\":true,\"query_debug_options\":\"\",\"profile_timeout\":2,\"cbo_push_down_aggregate\":\"global\",\"spill_encode_level\":7,\"enable_query_dump\":false,\"max_spill_read_buffer_bytes_per_driver\":16777216,\"global_runtime_filter_build_max_size\":67108864,\"cbo_push_down_groupingset_reshuffle\":true,\"enable_rewrite_sum_by_associative_rule\":true,\"query_cache_hot_partition_num\":3,\"enable_prune_complex_types\":true,\"enable_delta_lake_column_statistics\":false,\"metadata_collect_query_timeout\":60,\"query_cache_type\":0,\"max_parallel_scan_instance_num\":-1,\"enable_dynamic_prune_scan_range\":true,\"query_cache_entry_max_rows\":409600,\"connector_io_tasks_per_scan_operator\":16,\"disable_spill_to_local_disk\":false,\"enable_materialized_view_union_rewrite\":true,\"sql_quote_show_create\":true,\"enable_constant_execute_in_fe\":true,\"scan_or_to_union_threshold\":50000000,\"enable_materialized_view_rewrite_partition_compensate\":true,\"enable_exchange_pass_through\":true,\"runtime_profile_report_interval\":10,\"query_cache_entry_max_bytes\":4194304,\"enable_partition_column_value_only_optimization\":true,\"connector_max_split_size\":67108864,\"array_low_cardinality_optimize\":true,\"interleaving_group_size\":10,\"enable_exchange_perf\":false,\"enable_prepare_stmt\":true,\"workgroup_id\":0,\"enable_pipeline_level_multi_partitioned_rf\":false,\"enable_rewrite_groupingsets_to_union_all\":false,\"spill_enable_direct_io\":false,\"cbo_push_down_groupingset\":true,\"disable_lambda_pushdown\":false,\"transmission_compression_type\":\"NO_COMPRESSION\",\"interactive_timeout\":3600,\"use_page_cache\":true,\"big_query_log_scan_bytes_threshold\":10737418240,\"collation_server\":\"utf8_general_ci\",\"cbo_decimal_cast_string_strict\":true,\"enable_hyperscan_vec\":true,\"enable_datacache_async_populate_mode\":false,\"cbo_enable_predicate_subfield_path\":true,\"tablet_internal_parallel_mode\":\"auto\",\"enable_pipeline\":true,\"spill_mode\":\"auto\",\"allow_hive_without_partition_filter\":true,\"cbo_prune_json_subfield_depth\":20,\"enable_query_debug_trace\":false,\"like_predicate_consolidate_min\":2,\"cbo_materialized_view_rewrite_related_mvs_limit\":64,\"enable_lake_tablet_internal_parallel\":false,\"enable_show_all_variables\":false,\"hdfs_backend_selector_force_rebalance\":false,\"full_sort_max_buffered_bytes\":16777216,\"catalog\":\"default_catalog\",\"wait_timeout\":28800,\"max_buckets_per_be_to_use_balancer_assignment\":6,\"enable_query_tablet_affinity\":false,\"transmission_encode_level\":7,\"query_including_mv_names\":\"\",\"transaction_isolation\":\"REPEATABLE-READ\",\"enable_global_runtime_filter\":true,\"enable_load_profile\":false,\"enable_rewrite_simple_agg_to_hdfs_scan\":false,\"enable_plan_validation\":true,\"load_transmission_compression_type\":\"NO_COMPRESSION\",\"global_runtime_filter_rpc_http_min_size\":67108864,\"cbo_materialized_view_rewrite_rule_output_limit\":3,\"cbo_enable_low_cardinality_optimize\":true,\"scan_use_query_mem_ratio\":0.3,\"datacache_evict_probability\":100,\"enable_analyze_phase_prune_columns\":false,\"connector_huge_file_size\":1073741824,\"new_planner_optimize_timeout\":10000,\"enable_outer_join_reorder\":true,\"force_schedule_local\":false,\"hudi_mor_force_jni_reader\":false,\"enable_agg_spill_preaggregation\":true,\"cbo_enable_greedy_join_reorder\":true,\"range_pruner_max_predicate\":100,\"enable_rbo_table_prune\":false,\"spillable_operator_mask\":-1,\"enable_wait_dependent_event\":false,\"rpc_http_min_size\":2147482624,\"low_cardinality_optimize_v2\":true,\"enable_file_metacache\":false,\"cbo_debug_alive_backend_number\":0,\"global_runtime_filter_probe_min_size\":102400,\"scan_or_to_union_limit\":4,\"enable_cbo_table_prune\":false,\"enable_parallel_merge\":true,\"cbo_materialized_view_rewrite_candidate_limit\":12,\"skew_join_use_mcv_count\":5,\"cbo_derive_join_is_null_predicate\":true,\"nested_mv_rewrite_max_level\":3,\"enable_materialized_view_text_match_rewrite\":true,\"big_query_profile_threshold\":\"100s\",\"net_write_timeout\":60,\"cbo_prune_shuffle_column_rate\":0.1,\"spill_revocable_max_bytes\":0,\"hash_join_push_down_right_table\":true,\"connector_sink_target_max_file_size\":1073741824,\"max_ukfk_join_reorder_scale_ratio\":100,\"pipeline_sink_dop\":0,\"broadcast_row_limit\":15000000,\"enable_prune_iceberg_manifest\":true,\"exec_mem_limit\":2147483648,\"enable_sort_aggregate\":false,\"query_cache_force_populate\":false,\"computation_fragment_scheduling_policy\":\"COMPUTE_NODES_ONLY\",\"runtime_filter_on_exchange_node\":false,\"disable_join_reorder\":false,\"enable_evaluate_schema_scan_rule\":true,\"global_runtime_filter_rpc_timeout\":400,\"connector_scan_use_query_mem_ratio\":0.3,\"net_buffer_length\":16384,\"cbo_prune_subfield\":true,\"full_sort_max_buffered_rows\":1024000,\"query_timeout\":300,\"connector_io_tasks_slow_io_latency_ms\":50,\"cbo_max_reorder_node\":50,\"enable_distinct_column_bucketization\":false,\"enable_big_query_log\":false,\"analyze_mv\":\"sample\",\"enable_spill_buffer_read\":true,\"group_execution_min_scan_rows\":5000000,\"runtime_filter_scan_wait_time\":20,\"enable_sync_materialized_view_rewrite\":true,\"prefer_compute_node\":false,\"enable_strict_type\":false,\"enable_table_prune_on_update\":false,\"group_concat_max_len\":1024,\"enable_stats_to_optimize_skew_join\":true,\"parse_tokens_limit\":3500000,\"chunk_size\":4096,\"global_runtime_filter_probe_min_selectivity\":0.5,\"query_mem_limit\":0,\"enable_filter_unused_columns_in_scan_stage\":false,\"enable_materialized_view_single_table_view_delta_rewrite\":false,\"cbo_prune_json_subfield\":false,\"enable_spill_to_remote_storage\":false,\"enable_materialized_view_transparent_union_rewrite\":true,\"enable_prune_complex_types_in_unnest\":true,\"auto_increment_increment\":1,\"sql_dialect\":\"StarRocks\",\"enable_per_bucket_optimize\":true,\"enable_group_execution\":false,\"big_query_log_scan_rows_threshold\":1000000000,\"character_set_client\":\"utf8\",\"autocommit\":true,\"enable_column_expr_predicate\":true,\"enable_partition_bucket_optimize\":false,\"max_ukfk_join_reorder_fk_rows\":100000000,\"enable_subfield_no_copy\":true,\"jit_level\":1,\"enable_runtime_adaptive_dop\":false,\"cbo_cte_max_limit\":10,\"connector_sink_compression_codec\":\"uncompressed\",\"storage_engine\":\"olap\",\"spill_operator_min_bytes\":52428800,\"cbo_enable_dp_join_reorder\":true,\"tx_visible_wait_timeout\":10,\"materialized_view_join_same_table_permutation_limit\":5,\"enable_materialized_view_view_delta_rewrite\":true,\"cbo_max_reorder_node_use_exhaustive\":4,\"enable_sql_digest\":false,\"spill_mem_table_num\":2,\"enable_spill\":false,\"enable_materialized_view_rewrite_greedy_mode\":false,\"pipeline_dop\":0,\"single_node_exec_plan\":false,\"full_sort_late_materialization_v2\":true,\"join_implementation_mode_v2\":\"auto\",\"enable_connector_split_io_tasks\":false,\"sql_select_limit\":9223372036854775807,\"enable_materialized_view_rewrite\":true,\"materialized_view_subuqery_text_match_max_count\":4,\"statistic_collect_parallel\":1,\"hdfs_backend_selector_hash_algorithm\":\"consistent\",\"enable_expr_prune_partition\":true,\"plan_mode\":\"auto\",\"enable_topn_runtime_filter\":true,\"disable_colocate_join\":false,\"max_pushdown_conditions_per_column\":-1,\"default_table_compression\":\"lz4_frame\",\"runtime_adaptive_dop_max_output_amplification_factor\":0,\"skew_join_rand_range\":1000,\"choose_execute_instances_mode\":\"LOCALITY\",\"skew_join_data_skew_threshold\":0.2,\"innodb_read_only\":true,\"spill_mem_limit_threshold\":0.8,\"cbo_reorder_threshold_use_exhaustive\":6,\"enable_predicate_reorder\":false,\"enable_connector_sink_spill\":true,\"enable_query_cache\":false,\"enable_phased_scheduler\":false,\"group_execution_group_scale\":64,\"transaction_read_only\":\"OFF\",\"max_allowed_packet\":33554432,\"enable_partition_level_cardinality_estimation\":true,\"enable_parallel_prepare_metadata\":false,\"time_zone\":\"Etc/UTC\",\"enable_multicolumn_global_runtime_filter\":false,\"character_set_server\":\"utf8\",\"cbo_use_nth_exec_plan\":0,\"io_tasks_per_scan_operator\":4,\"parallel_exchange_instance_num\":-1,\"enable_shared_scan\":false,\"join_late_materialization\":false,\"audit_execute_stmt\":false,\"cbo_derive_range_join_predicate\":false,\"allow_default_partition\":false,\"paimon_force_jni_reader\":false,\"enable_pipeline_level_shuffle\":true}",
  "be_number": 20,
  "be_core_stat": {
    "numOfHardwareCoresPerBe": "{\"10016\":64,\"10017\":64,\"10018\":64,\"10019\":64,\"10026\":64,\"10027\":64,\"10031\":64,\"10032\":64,\"10005\":64,\"10006\":64,\"10007\":64,\"10039\":64,\"10008\":64,\"10040\":64,\"10009\":64,\"10041\":64,\"10013\":64,\"10045\":64,\"10014\":64,\"10015\":64}",
    "cachedAvgNumOfHardwareCores": 64
  },
  "exception": [],
  "version": "xxxxxx",
  "commit_version": "xxxxxx"
}