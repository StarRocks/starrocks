-- name: test_array_map_2
CREATE TABLE `array_map_test` (
  `id` tinyint(4) NOT NULL COMMENT "",
  `arr_str` array<string> NULL COMMENT "",
  `arr_largeint` array<largeint> NULL COMMENT ""
) ENGINE=OLAP
DUPLICATE KEY(`id`)
DISTRIBUTED BY RANDOM
PROPERTIES (
"replication_num" = "1"
);
-- result:
-- !result
insert into array_map_test values (1, array_repeat("abcdefghasdasdasirnqwrq", 20000), array_repeat(100, 20000));
-- result:
-- !result
select count() from array_map_test where array_length(array_map((x,y)->(id+length(x)+y), arr_str, arr_largeint)) > 10 ;
-- result:
1
-- !result
select count(array_length(array_map((x,y)->(id+length(x)+y), arr_str, arr_largeint))) from array_map_test;
-- result:
1
-- !result
select count() from array_map_test where any_match(x->any_match(x->x<10, arr_largeint), arr_largeint);
-- result:
0
-- !result
select count(any_match(x->any_match(x->x<10, arr_largeint), arr_largeint)) from array_map_test;
-- result:
1
-- !result
select count(array_map(x->array_length(array_concat(arr_str,[])), arr_largeint)) from array_map_test;
-- result:
1
-- !result
set @arr=array_repeat("12345",1000000);
-- result:
-- !result
select array_length(array_map((x,y)->x > y, @arr,@arr)) from table(generate_series(1,10,1));
-- result:
1000000
1000000
1000000
1000000
1000000
1000000
1000000
1000000
1000000
1000000
-- !result
select count(*) from array_map_test where array_map((a1) -> concat(split(id, 'd'), split(id, 'd')), arr_str) is not null;
-- result:
1
-- !result
-- name: test_array_map_3
CREATE TABLE `t` (
  `k` bigint NOT NULL COMMENT "",
  `arr_0` array<bigint> NOT NULL COMMENT "",
  `arr_1` array<bigint> NULL COMMENT "",
  `arr_2` array<bigint> NULL COMMENT ""
) ENGINE=OLAP
PRIMARY KEY(`k`)
DISTRIBUTED BY HASH(`k`) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
-- result:
-- !result
insert into t values (1, [1,2], [1,2],[2,3]), (2, [1,2], null, [2,3]), (3, [1,2],[1,2],null),(4, [1,2],[null,null],[2,3]), (5, [1], [1,2], [3]);
-- result:
-- !result
select array_map((x,y,z)->x+y+z, arr_0, arr_1, arr_2) from t;
-- result:
[REGEX].*Input array element's size is not equal in array_map().*
-- !result
select array_map((x,y,z)->x+y+z, arr_0, arr_1, arr_2) from t where k != 5 order by k;
-- result:
[4,7]
None
None
[null,null]
-- !result
delete from t where k = 5;
-- result:
-- !result
select array_map((x,y,z)->x+y+z, arr_0, arr_1, arr_2) from t order by k;
-- result:
[4,7]
None
None
[null,null]
-- !result
select array_map((x,y,z,d)->x+y+z+d, arr_0, arr_1, arr_2, [1,2]) from t order by k;
-- result:
[5,9]
None
None
[null,null]
-- !result
select array_map((x,y,z,d)->x+y+z+d, arr_0, arr_1, arr_2, [1]) from t order by k;
-- result:
[REGEX].*Input array element's size is not equal in array_map().*
-- !result
select array_map((x)->x*x, arr_0) from t order by k;
-- result:
[1,4]
[1,4]
[1,4]
[1,4]
-- !result
select k from t where coalesce(element_at(array_map(x->x+any_match(array_map(x->x<10,arr_1)), arr_1), 1),element_at(array_map(x->x+any_match(array_map(x->x<10,arr_2)), arr_2), 1),element_at(array_map(x->x+any_match(array_map(x->x<10,arr_0)), arr_0), 1))=2 order by k;
-- result:
1
3
-- !result
select k from t where coalesce(element_at(array_map(x->x+any_match(array_map(x->x<10,arr_1)), arr_1), 1),element_at(array_map(x->x+any_match(array_map(x->x<10,arr_2)), arr_2), 1),element_at(array_map(x->x+any_match(array_map(x->x<10,arr_0)), arr_0), 1))>0 and coalesce(element_at(array_map(x->x+any_match(array_map(x->x<10,arr_1)), arr_1), 1),element_at(array_map(x->x+any_match(array_map(x->x<10,arr_2)), arr_2), 1)) < 10  order by k;
-- result:
1
2
3
4
-- !result
select k, coalesce(element_at(array_map(x->x+any_match(array_map(x->x<10,arr_1)), arr_1), 1),element_at(array_map(x->x+any_match(array_map(x->x<10,arr_2)), arr_2), 1),element_at(array_map(x->x+any_match(array_map(x->x<10,arr_0)), arr_0), 1)) as col1 from t order by k;
-- result:
1	2
2	3
3	2
4	3
-- !result
select k, coalesce(element_at(array_map(x->x+any_match(array_map(x->x<10,arr_1)), arr_1), 1),element_at(array_map(x->x+any_match(array_map(x->x<10,arr_2)), arr_2), 1),element_at(array_map(x->x+any_match(array_map(x->x<10,arr_0)), arr_0), 1)) as col1, coalesce(element_at(array_map(x->x+any_match(array_map(x->x<10,arr_1)), arr_1), 1),element_at(array_map(x->x+any_match(array_map(x->x<10,arr_2)), arr_2), 1)) as col2 from t order by k;
-- result:
1	2	2
2	3	3
3	2	2
4	3	3
-- !result
select array_map(x->x, arr_0) from t order by k;
-- result:
[1,2]
[1,2]
[1,2]
[1,2]
-- !result
select array_map((x,y,z)->10, arr_0, arr_1, arr_2) from t;
-- result:
[10,10]
None
None
[10,10]
-- !result
select array_map((x,y)-> k, arr_0, arr_1) from t order by k;
-- result:
[1,1]
None
[3,3]
[4,4]
-- !result
select array_map((x,y)->k, [1,2],[2,3]) from t order by k;
-- result:
[1,1]
[2,2]
[3,3]
[4,4]
-- !result
select array_map((x,y,z)->x+y+z, [1,2],[2,3],[3,4]) from t;
-- result:
[6,9]
[6,9]
[6,9]
[6,9]
-- !result
select array_map((x,y,z)->x+y+z, [1,2],[2,null],[3,4]) from t;
-- result:
[6,null]
[6,null]
[6,null]
[6,null]
-- !result
select array_map((x,y,z)->x+y+z, [1,2],[2,null],null) from t;
-- result:
None
None
None
None
-- !result
select array_map(x->array_map(x->x+100,x), [[1,2,3]]);
-- result:
[[101,102,103]]
-- !result
select array_map(x->array_map(x->x+100,x), [[1,2,3], [null]]);
-- result:
[[101,102,103],[null]]
-- !result
select array_map(x->array_map(x->array_map(x->x+100,x),x), [[[1,2,3]]]);
-- result:
[[[101,102,103]]]
-- !result
select array_map(arg0 -> array_map(arg1 -> array_map(arg2 -> array_map(arg3 -> array_length(arg1) + arg3, arg2), arg1), arg0), [[[[1,2]]]]);
-- result:
[[[[2,3]]]]
-- !result
select array_map(arg0 -> array_map(arg1 -> array_map(arg2 -> array_map(arg3 -> array_length(arg0) + arg3, arg2), arg1), arg0), [[[[1,2]]]]);
-- result:
[[[[2,3]]]]
-- !result
select array_map(arg0 -> array_map(arg1 -> array_map(arg2 -> array_map(arg3 -> array_length(arg2) + arg3, arg2), arg1), arg0), [[[[1,2]]]]);
-- result:
[[[[3,4]]]]
-- !result
select array_map(arg0 -> array_map(arg1 -> array_map(arg2 -> array_map(arg3 -> array_map(arg4->array_length(arg2) + arg4, arg3), arg2), arg1), arg0), [[[[[1,2]]]]] );
-- result:
[[[[[2,3]]]]]
-- !result
set @arr=array_generate(1,10000);
-- result:
-- !result
select /*+ SET_VAR(query_mem_limit=104857600)*/array_sum(array_map(x->array_contains(@arr,x), array_generate(1,100000)));
-- result:
10000
-- !result