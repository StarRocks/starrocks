
-- name: test_array_map_2
CREATE TABLE `array_map_test` (
  `id` tinyint(4) NOT NULL COMMENT "",
  `arr_str` array<string> NULL COMMENT "",
  `arr_largeint` array<largeint> NULL COMMENT ""
) ENGINE=OLAP
DUPLICATE KEY(`id`)
DISTRIBUTED BY RANDOM
PROPERTIES (
"replication_num" = "1"
);

insert into array_map_test values (1, array_repeat("abcdefghasdasdasirnqwrq", 20000), array_repeat(100, 20000));

select count() from array_map_test where array_length(array_map((x,y)->(id+length(x)+y), arr_str, arr_largeint)) > 10 ;
select count(array_length(array_map((x,y)->(id+length(x)+y), arr_str, arr_largeint))) from array_map_test;

select count() from array_map_test where any_match(x->any_match(x->x<10, arr_largeint), arr_largeint);
select count(any_match(x->any_match(x->x<10, arr_largeint), arr_largeint)) from array_map_test;
select count(array_map(x->array_length(array_concat(arr_str,[])), arr_largeint)) from array_map_test;

set @arr=array_repeat("12345",1000000);
select array_length(array_map((x,y)->x > y, @arr,@arr)) from table(generate_series(1,10,1));

-- name: test_array_map_3
CREATE TABLE `t` (
  `k` bigint NOT NULL COMMENT "",
  `arr_0` array<bigint> NOT NULL COMMENT "",
  `arr_1` array<bigint> NULL COMMENT "",
  `arr_2` array<bigint> NULL COMMENT ""
) ENGINE=OLAP
PRIMARY KEY(`k`)
DISTRIBUTED BY HASH(`k`) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);

insert into t values (1, [1,2], [1,2],[2,3]), (2, [1,2], null, [2,3]), (3, [1,2],[1,2],null),(4, [1,2],[null,null],[2,3]), (5, [1], [1,2], [3]);
select array_map((x,y,z)->x+y+z, arr_0, arr_1, arr_2) from t;
select array_map((x,y,z)->x+y+z, arr_0, arr_1, arr_2) from t where k != 5 order by k;
delete from t where k = 5;

select array_map((x,y,z)->x+y+z, arr_0, arr_1, arr_2) from t order by k;
select array_map((x,y,z,d)->x+y+z+d, arr_0, arr_1, arr_2, [1,2]) from t order by k;
select array_map((x,y,z,d)->x+y+z+d, arr_0, arr_1, arr_2, [1]) from t order by k;
select array_map((x)->x*x, arr_0) from t order by k;


select array_map(x->x, arr_0) from t order by k;
-- independent expr
select array_map((x,y,z)->10, arr_0, arr_1, arr_2) from t;
select array_map((x,y)-> k, arr_0, arr_1) from t order by k;

-- independent expr with all const
select array_map((x,y)->k, [1,2],[2,3]) from t order by k;

-- non indepentdent with all const
select array_map((x,y,z)->x+y+z, [1,2],[2,3],[3,4]) from t;
select array_map((x,y,z)->x+y+z, [1,2],[2,null],[3,4]) from t;
select array_map((x,y,z)->x+y+z, [1,2],[2,null],null) from t;

