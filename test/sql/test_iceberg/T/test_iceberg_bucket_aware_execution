-- name: testIcebergBucketAwareExecution

create external catalog iceberg_sql_test_${uuid0} PROPERTIES ("type"="iceberg", "iceberg.catalog.type"="hive", "iceberg.catalog.hive.metastore.uris"="${iceberg_catalog_hive_metastore_uris}","enable_iceberg_metadata_cache"="true","enable_get_stats_from_external_metadata"="true","aws.s3.access_key" = "${oss_ak}","aws.s3.secret_key" = "${oss_sk}","aws.s3.endpoint" = "${oss_endpoint}");

-- ## check plan
set enable_bucket_aware_execution_on_lake = true;
-- #### colocate join
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b on a.trip_id = b.trip_id', 'INNER JOIN (COLOCATE)')
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 c where a.trip_id = b.trip_id and b.trip_id = c.trip_id', 'INNER JOIN (COLOCATE)')
function: assert_explain_not_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 c where a.trip_id = b.trip_id and b.trip_id = c.trip_id', 'INNER JOIN (PARTITIONED)')
function: assert_explain_not_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 c where a.trip_id = b.trip_id and b.trip_id = c.trip_id', 'INNER JOIN (BUCKET_SHUFFLE(S))')

-- #### bucket shuffle join
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b on a.trip_id = b.trip_id', 'INNER JOIN (BUCKET_SHUFFLE)')
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_evo c where a.trip_id = b.trip_id and b.trip_id = c.trip_id', 'INNER JOIN (BUCKET_SHUFFLE)')
function: assert_explain_not_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_evo c where a.trip_id = b.trip_id and b.trip_id = c.trip_id', 'INNER JOIN (PARTITIONED)')
function: assert_explain_not_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_evo c where a.trip_id = b.trip_id and b.trip_id = c.trip_id', 'INNER JOIN (BUCKET_SHUFFLE(S))')
function: assert_explain_not_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_evo c where a.trip_id = b.trip_id and b.trip_id = c.trip_id', 'INNER JOIN (COLOCATE)')

-- #### colocate/bucket shuffle join for multi bucket columns
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_2 b on a.trip_id = b.trip_id', 'INNER JOIN (COLOCATE)')
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_2 b on a.trip_id = b.trip_id and a.vendor_id = b.vendor_id', 'INNER JOIN (COLOCATE)')

-- #### aggregation without shuffle
function: assert_explain_contains('select sum(trip_distance), trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 group by trip_id', 'update finalize')
function: assert_explain_contains('select sum(trip_distance), vendor_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 group by vendor_id', 'update finalize')
function: assert_explain_contains('select sum(trip_distance), trip_id, vendor_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 group by trip_id, vendor_id', 'update finalize')

-- #### aggregation on join
function: assert_explain_contains('select sum(a.trip_distance), a.trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b on a.trip_id = b.trip_id group by a.trip_id', 'INNER JOIN (COLOCATE)')
function: assert_explain_contains('select sum(a.trip_distance), a.trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b on a.trip_id = b.trip_id group by a.trip_id', 'update finalize')
function: assert_explain_contains('select sum(a.trip_distance), a.trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b on a.trip_id = b.trip_id group by a.trip_id', 'INNER JOIN (BUCKET_SHUFFLE)')
function: assert_explain_contains('select sum(a.trip_distance), a.trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b on a.trip_id = b.trip_id group by a.trip_id', 'update finalize')

-- #### analytic
function: assert_explain_not_contains('select trip_id, trip_distance, RANK() over (partition by trip_id order by trip_distance desc) as rank from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_analytic', '1:EXCHANGE')

-- #### colocate/bucket set operation
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big except select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1', 'colocate')
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big except select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2', 'colocate')
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big except select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket', 'BUCKET_SHUFFLE_HASH_PARTITIONED')

-- #### bucket num not match
function: assert_explain_not_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_not_match b on a.trip_id = b.trip_id', 'INNER JOIN (COLOCATE)')
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_not_match b on a.trip_id = b.trip_id', 'INNER JOIN (BUCKET_SHUFFLE)')

-- #### int32 type
-- cause of type cast, can't use colocate join, but can be bucket shuffle join
function: assert_explain_not_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join [colocate] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_int32 b on a.trip_id = b.trip_id', 'INNER JOIN (COLOCATE)')
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join [colocate] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_int32 b on a.trip_id = b.trip_id', 'INNER JOIN (BUCKET_SHUFFLE)')

-- #### string type
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_string_1 a join [colocate] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_string_2 b on a.trip_id = b.trip_id', 'INNER JOIN (COLOCATE)')

-- #### uuid type
function: assert_explain_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_uuid_1 a join [colocate] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_uuid_2 b on a.trip_id = b.trip_id', 'INNER JOIN (COLOCATE)')

-- #### functional boundary
function: assert_explain_not_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join [colocate] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_evo b on a.trip_id = b.trip_id', 'INNER JOIN (COLOCATE)')
function: assert_explain_not_contains('select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_evo a join [bucket] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b on a.trip_id = b.trip_id', 'INNER JOIN (BUCKET_SHUFFLE)')
function: assert_explain_contains('select sum(trip_distance), trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_multi_bucket_type group by trip_id', 'update finalize')
function: assert_explain_not_contains('select sum(trip_distance), dt from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_multi_bucket_type group by dt', 'update finalize')
function: assert_explain_not_contains('select sum(trip_distance), ts from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_multi_bucket_type group by ts', 'update finalize')
function: assert_explain_not_contains('select sum(trip_distance), dec from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_multi_bucket_type group by dec', 'update finalize')

-- ## check result
-- #### colocate join
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b on a.trip_id = b.trip_id;
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 c where a.trip_id = b.trip_id and b.trip_id = c.trip_id;

-- #### bucket shuffle join
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b on a.trip_id = b.trip_id;
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_evo c where a.trip_id = b.trip_id and b.trip_id = c.trip_id;
-- wait for global runtime filter
set global_runtime_filter_wait_timeout = 500;
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_evo c where a.trip_id = b.trip_id and b.trip_id = c.trip_id;
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_evo c where a.trip_id = b.trip_id and b.trip_id = c.trip_id;
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_evo c where a.trip_id = b.trip_id and b.trip_id = c.trip_id;

-- #### colocate/bucket shuffle join for multi bucket columns
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_2 b on a.trip_id = b.trip_id;
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_2 b on a.trip_id = b.trip_id and a.vendor_id = b.vendor_id;

-- #### aggregation without shuffle
select sum(trip_distance), trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 group by trip_id order by 1 desc, 2 limit 3;
select sum(trip_distance), vendor_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 group by vendor_id order by 1 desc, 2 limit 3;
select sum(trip_distance), trip_id, vendor_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 group by trip_id, vendor_id order by 1 desc, 2, 3 limit 3;

-- #### aggregation on join
select sum(a.trip_distance), a.trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b on a.trip_id = b.trip_id group by a.trip_id order by 1 desc, 2 limit 3;
select sum(a.trip_distance), a.trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b on a.trip_id = b.trip_id group by a.trip_id order by 1 desc, 2 limit 3;

-- #### analytic
select trip_id, trip_distance, RANK() over (partition by trip_id order by trip_distance desc) as rank from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_analytic order by 3 asc, 1 desc limit 5;

-- #### colocate/bucket set operation
select count(trip_distance), count(*), sum(trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big except select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1;
select count(trip_distance), count(*), sum(trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big except select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2;
select count(trip_distance), count(*), sum(trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big except select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket;

-- #### bucket num not match
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_not_match b on a.trip_id = b.trip_id;

-- #### int32 type
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join [colocate] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_int32 b on a.trip_id = b.trip_id;

-- #### string type
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_string_1 a join [colocate] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_string_2 b on a.trip_id = b.trip_id;

-- #### uuid type
-- select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_uuid_1 a join [colocate] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_uuid_2 b on a.trip_id = b.trip_id;

set enable_bucket_aware_execution_on_lake = false;
-- #### colocate join
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b on a.trip_id = b.trip_id;
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 c where a.trip_id = b.trip_id and b.trip_id = c.trip_id;

-- #### bucket shuffle join
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b on a.trip_id = b.trip_id;
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_evo c where a.trip_id = b.trip_id and b.trip_id = c.trip_id;

-- #### colocate/bucket shuffle join for multi bucket columns
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_2 b on a.trip_id = b.trip_id;
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_2 b on a.trip_id = b.trip_id and a.vendor_id = b.vendor_id;

-- #### aggregation without shuffle
select sum(trip_distance), trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 group by trip_id order by 1 desc, 2 limit 3;
select sum(trip_distance), vendor_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 group by vendor_id order by 1 desc, 2 limit 3;
select sum(trip_distance), trip_id, vendor_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_2bucket_1 group by trip_id, vendor_id order by 1 desc, 2, 3 limit 3;

-- #### aggregation on join
select sum(a.trip_distance), a.trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2 b on a.trip_id = b.trip_id group by a.trip_id order by 1 desc, 2 limit 3;
select sum(a.trip_distance), a.trip_id from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big a join [BUCKET] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket b on a.trip_id = b.trip_id group by a.trip_id order by 1 desc, 2 limit 3;

-- #### analytic
select trip_id, trip_distance, RANK() over (partition by trip_id order by trip_distance desc) as rank from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_analytic order by 3 asc, 1 desc limit 5;

-- #### colocate/bucket set operation
select count(trip_distance), count(*), sum(trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big except select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1;
select count(trip_distance), count(*), sum(trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big except select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_2;
select count(trip_distance), count(*), sum(trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_big except select * from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_no_bucket;

-- #### bucket num not match
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_bucket_not_match b on a.trip_id = b.trip_id;

-- ## int32 type
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_1 a join [colocate] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_int32 b on a.trip_id = b.trip_id;

-- ## string type
select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_string_1 a join [colocate] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_string_2 b on a.trip_id = b.trip_id;

-- ## uuid type
-- select count(a.trip_distance), count(*), sum(a.trip_distance) from iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_uuid_1 a join [colocate] iceberg_sql_test_${uuid0}.iceberg_bucket_db.taxis_1bucket_uuid_2 b on a.trip_id = b.trip_id;

drop catalog iceberg_sql_test_${uuid0};