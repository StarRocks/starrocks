-- name: test_aa_statistic_behavior @sequential @slow
DROP DATABASE IF EXISTS test_statistic_behavior;
-- result:
-- !result
CREATE DATABASE test_statistic_behavior;
-- result:
-- !result
USE test_statistic_behavior;
-- result:
-- !result
CREATE TABLE `source` (
  `k1` int(11) NULL COMMENT "",
  `event_day` datetime NULL COMMENT ""
) ENGINE=OLAP
DUPLICATE KEY(`k1`, `event_day`)
PARTITION BY date_trunc('day', event_day)
PROPERTIES (
"replication_num" = "1"
);
-- result:
-- !result
insert into source select generate_series, '2020-01-01' from table(generate_series(1, 250000));
-- result:
-- !result
insert into source select generate_series, '2021-01-01' from table(generate_series(1, 250000));
-- result:
-- !result
insert into source select generate_series, '2022-01-01' from table(generate_series(1, 250000));
-- result:
-- !result
insert into source select generate_series, '2023-01-01' from table(generate_series(1, 250000));
-- result:
-- !result
insert into source select generate_series, '2024-01-01' from table(generate_series(1, 150000));
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("enable_sync_tablet_stats" = "false");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("loads_history_sync_interval_second" = "1000000");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("enable_trigger_analyze_job_immediate" = "false");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("enable_auto_collect_statistics" = "false");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("enable_statistic_collect" = "false");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("statistic_collect_interval_sec" = "6");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("tablet_stat_update_interval_second" = "3");
-- result:
-- !result
update default_catalog.information_schema.be_configs set `value` = "3" where name= "tablet_stat_cache_update_interval_second";
-- result:
-- !result
drop all analyze job;
-- result:
-- !result
shell: sleep 110
-- result:
0

-- !result
shell: sleep 110
-- result:
0

-- !result
shell: sleep 110
-- result:
0

-- !result
CREATE TABLE `target_table` (
  `k1` int(11) NULL COMMENT "",
  `event_day` datetime NULL COMMENT ""
) ENGINE=OLAP
DUPLICATE KEY(`k1`, `event_day`)
PARTITION BY date_trunc('day', event_day)
PROPERTIES (
"replication_num" = "1"
);
-- result:
-- !result
insert into target_table select * from source where event_day = '2020-01-01';
-- result:
-- !result
function: show_stats_meta("show stats meta where `Database` = 'test_statistic_behavior' and `table` = 'target_table'")
-- result:
[['test_statistic_behavior', 'target_table', 'ALL', 'SAMPLE', '{sample_once_times=1, init_stats_sample_job=true}', '100%', '(k1,SAMPLE),(event_day,SAMPLE)', '[tableRowCount=1, tableRowCountInStatistics=250000, totalPartitionCount=1, unhealthyPartitionCount=1, unhealthyPartitionRowCount=0, unhealthyPartitionDataSize=0KB, updatePartitionRowCountForCalc=0, deltaRowCount=0]']]
-- !result
insert into target_table select * from source where event_day >= '2022-01-01';
-- result:
-- !result
function: show_stats_meta("show stats meta where `Database` = 'test_statistic_behavior' and `table` = 'target_table'")
-- result:
[['test_statistic_behavior', 'target_table', 'ALL', 'SAMPLE', '{sample_once_times=2, init_stats_sample_job=true}', '100%', '(k1,SAMPLE),(event_day,SAMPLE)', '[tableRowCount=1, tableRowCountInStatistics=900000, totalPartitionCount=4, unhealthyPartitionCount=4, unhealthyPartitionRowCount=0, unhealthyPartitionDataSize=0KB, updatePartitionRowCountForCalc=0, deltaRowCount=650000]']]
-- !result
insert into target_table select * from source;
-- result:
-- !result
function: show_stats_meta("show stats meta where `Database` = 'test_statistic_behavior' and `table` = 'target_table'")
-- result:
[['test_statistic_behavior', 'target_table', 'ALL', 'SAMPLE', '{sample_once_times=3, init_stats_sample_job=true}', '0%', '(k1,SAMPLE),(event_day,SAMPLE)', '[tableRowCount=1, tableRowCountInStatistics=1150000, totalPartitionCount=5, unhealthyPartitionCount=5, unhealthyPartitionRowCount=0, unhealthyPartitionDataSize=0KB, updatePartitionRowCountForCalc=900000, deltaRowCount=1800000]']]
-- !result
ADMIN SET FRONTEND CONFIG ("enable_sync_tablet_stats" = "true");
-- result:
-- !result
shell: sleep 5
-- result:
0

-- !result
function: show_stats_meta("show stats meta where `Database` = 'test_statistic_behavior' and `table` = 'target_table'")
-- result:
[['test_statistic_behavior', 'target_table', 'ALL', 'SAMPLE', '{sample_once_times=3, init_stats_sample_job=true}', '56%', '(k1,SAMPLE),(event_day,SAMPLE)', '[tableRowCount=2050001, tableRowCountInStatistics=1150000, totalPartitionCount=5, unhealthyPartitionCount=4, unhealthyPartitionRowCount=1800000, unhealthyPartitionDataSize=181KB, updatePartitionRowCountForCalc=900001, deltaRowCount=0]']]
-- !result
ADMIN SET FRONTEND CONFIG ("enable_statistic_collect" = "true");
-- result:
-- !result
create analyze full all properties  ("statistic_exclude_pattern"="^(?!.*test_statistic_behavior).*$");
-- result:
-- !result
shell: sleep 7
-- result:
0

-- !result
function: show_stats_meta("show stats meta where `Database` = 'test_statistic_behavior' and `table` = 'target_table'")
-- result:
[['test_statistic_behavior', 'target_table', 'ALL', 'FULL', '{sample_once_times=3, full_schedule_times=1}', '100%', '(k1,FULL),(event_day,FULL)', '[tableRowCount=2050001, tableRowCountInStatistics=2050001, totalPartitionCount=5, unhealthyPartitionCount=0, unhealthyPartitionRowCount=0, unhealthyPartitionDataSize=0KB, updatePartitionRowCountForCalc=1, deltaRowCount=0]']]
-- !result
drop all analyze job;
-- result:
-- !result
shell: sleep 7
-- result:
0

-- !result
insert into target_table select * from target_table;
-- result:
-- !result
shell: sleep 5
-- result:
0

-- !result
create analyze full all properties  ("statistic_exclude_pattern"="^(?!.*test_statistic_behavior).*$");
-- result:
-- !result
shell: sleep 7
-- result:
0

-- !result
function: show_stats_meta("show stats meta where `Database` = 'test_statistic_behavior' and `table` = 'target_table'")
-- result:
[['test_statistic_behavior', 'target_table', 'ALL', 'FULL', '{sample_once_times=3, full_schedule_times=2}', '100%', '(k1,FULL),(event_day,FULL)', '[tableRowCount=4100001, tableRowCountInStatistics=4100001, totalPartitionCount=5, unhealthyPartitionCount=0, unhealthyPartitionRowCount=0, unhealthyPartitionDataSize=0KB, updatePartitionRowCountForCalc=1, deltaRowCount=0]']]
-- !result
drop all analyze job;
-- result:
-- !result
shell: sleep 7
-- result:
0

-- !result
insert into target_table select * from source where event_day = '2020-01-01' limit 100000;
-- result:
-- !result
shell: sleep 5
-- result:
0

-- !result
create analyze full all properties  ("statistic_exclude_pattern"="^(?!.*test_statistic_behavior).*$");
-- result:
-- !result
shell: sleep 7
-- result:
0

-- !result
function: show_stats_meta("show stats meta where `Database` = 'test_statistic_behavior' and `table` = 'target_table'")
-- result:
[['test_statistic_behavior', 'target_table', 'ALL', 'FULL', '{sample_once_times=3, full_schedule_times=2}', '97%', '(k1,FULL),(event_day,FULL)', '[tableRowCount=4200001, tableRowCountInStatistics=4100001, totalPartitionCount=5, unhealthyPartitionCount=1, unhealthyPartitionRowCount=1100000, unhealthyPartitionDataSize=123KB, updatePartitionRowCountForCalc=100000, deltaRowCount=0]']]
-- !result
drop all analyze job;
-- result:
-- !result
shell: sleep 13
-- result:
0

-- !result
insert into target_table select k1, '2026-01-01' from source where event_day = '2021-01-01';
-- result:
-- !result
shell: sleep 5
-- result:
0

-- !result
function: show_stats_meta("show stats meta where `Database` = 'test_statistic_behavior' and `table` = 'target_table'")
-- result:
[['test_statistic_behavior', 'target_table', 'ALL', 'SAMPLE', '{sample_once_times=4, full_schedule_times=2, init_stats_sample_job=true}', '97%', '(k1,SAMPLE),(event_day,SAMPLE)', '[tableRowCount=4450001, tableRowCountInStatistics=4350000, totalPartitionCount=6, unhealthyPartitionCount=1, unhealthyPartitionRowCount=1100000, unhealthyPartitionDataSize=123KB, updatePartitionRowCountForCalc=100001, deltaRowCount=0]']]
-- !result
insert into target_table select * from source;
-- result:
-- !result
shell: sleep 5
-- result:
0

-- !result
create analyze all properties  ("statistic_exclude_pattern"="^(?!.*test_statistic_behavior).*$");
-- result:
-- !result
shell: sleep 7
-- result:
0

-- !result
function: show_stats_meta("show stats meta where `Database` = 'test_statistic_behavior' and `table` = 'target_table'")
-- result:
[['test_statistic_behavior', 'target_table', 'ALL', 'SAMPLE', '{sample_once_times=4, full_schedule_times=2, statistic_exclude_pattern=^(?!.*test_statistic_behavior).*$, sample_schedule_times=1}', '100%', '(k1,SAMPLE),(event_day,SAMPLE)', '[tableRowCount=5600001, tableRowCountInStatistics=5600001, totalPartitionCount=6, unhealthyPartitionCount=0, unhealthyPartitionRowCount=0, unhealthyPartitionDataSize=0KB, updatePartitionRowCountForCalc=1, deltaRowCount=0]']]
-- !result
drop all analyze job;
-- result:
-- !result
shell: sleep 7
-- result:
0

-- !result
ADMIN SET FRONTEND CONFIG ("statistic_auto_collect_small_table_size" = "1");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("statistic_auto_collect_large_table_interval" = "0");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("statistic_auto_collect_sample_threshold" = "0.6");
-- result:
-- !result
select count(*) from target_table where k1 = -1 and event_day = '2021-01-01';
-- result:
0
-- !result
admin execute on frontend 'import com.starrocks.statistic.columns.PredicateColumnsMgr; PredicateColumnsMgr.getInstance().persist();';
-- result:
-- !result
insert into target_table select * from target_table;
-- result:
-- !result
shell: sleep 5
-- result:
0

-- !result
create analyze all properties  ("statistic_exclude_pattern"="^(?!.*test_statistic_behavior).*$");
-- result:
-- !result
shell: sleep 7
-- result:
0

-- !result
function: show_stats_meta("show stats meta where `Database` = 'test_statistic_behavior' and `table` = 'target_table'")
-- result:
[['test_statistic_behavior', 'target_table', 'ALL', 'FULL', '{sample_once_times=4, full_schedule_times=3, sample_schedule_times=1}', '100%', '(k1,FULL),(event_day,FULL)', '[tableRowCount=11200001, tableRowCountInStatistics=11200001, totalPartitionCount=6, unhealthyPartitionCount=0, unhealthyPartitionRowCount=0, unhealthyPartitionDataSize=0KB, updatePartitionRowCountForCalc=1, deltaRowCount=0]']]
-- !result
drop stats target_table;
-- result:
-- !result
drop table target_table;
-- result:
-- !result
drop all analyze job;
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("enable_sync_tablet_stats" = "true");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("enable_statistic_collect" = "true");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("enable_auto_collect_statistics" = "true");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("enable_trigger_analyze_job_immediate" = "true");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("statistic_auto_collect_small_table_size" = "5368709120");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("statistic_auto_collect_large_table_interval" = "43200");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("statistic_auto_collect_sample_threshold" = "0.3");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("statistic_collect_interval_sec" = "300");
-- result:
-- !result
ADMIN SET FRONTEND CONFIG ("tablet_stat_update_interval_second" = "180");
-- result:
-- !result
shell: sleep 10
-- result:
0

-- !result