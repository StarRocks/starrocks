-- name: test_basic_create_index
CREATE TABLE `t_test_basic_create_index_pk` (
  `id1` bigint(20) NOT NULL COMMENT "",
  `id2` bigint(20) NOT NULL COMMENT "",
  `id3` bigint(20) NOT NULL COMMENT ""
) ENGINE=OLAP 
PRIMARY KEY(`id1`)
DISTRIBUTED BY HASH(`id1`) BUCKETS 1 
PROPERTIES (
"replication_num" = "1",
"in_memory" = "false",
"enable_persistent_index" = "false",
"replicated_storage" = "false",
"compression" = "LZ4"
);

CREATE INDEX index_1 ON t_test_basic_create_index_pk (id2) USING BITMAP;
function: wait_alter_table_finish()

CREATE INDEX index_2 ON t_test_basic_create_index_pk (id3) USING BITMAP;
function: wait_alter_table_finish()

CREATE TABLE `t_test_basic_create_index_dup` (
  `id1` bigint(20) NOT NULL COMMENT "",
  `id2` bigint(20) NOT NULL COMMENT "",
  `id3` bigint(20) NOT NULL COMMENT "",
  `id4` string NOT NULL COMMENT "",
  `id5` string NOT NULL COMMENT "",
  `id6` bigint(20) NOT NULL COMMENT "",
  `id7` string NOT NULL COMMENT ""
) ENGINE=OLAP 
DUPLICATE KEY(`id1`)
DISTRIBUTED BY HASH(`id1`) BUCKETS 1 
PROPERTIES (
"replication_num" = "1",
"in_memory" = "false",
"enable_persistent_index" = "false",
"replicated_storage" = "false",
"compression" = "LZ4"
);

CREATE INDEX index_1 ON t_test_basic_create_index_dup (id2) USING BITMAP;
function: wait_alter_table_finish()

CREATE INDEX index_2 ON t_test_basic_create_index_dup (id3) USING BITMAP;
function: wait_alter_table_finish()

CREATE INDEX index_3 ON t_test_basic_create_index_dup (id4) USING GIN;
function: wait_alter_table_finish()

CREATE INDEX index_4 ON t_test_basic_create_index_dup (id5) USING GIN;
function: wait_alter_table_finish()

CREATE INDEX index_5 ON t_test_basic_create_index_dup (id6) USING BITMAP;
function: wait_alter_table_finish()

CREATE INDEX index_6 ON t_test_basic_create_index_dup (id7) USING GIN;
function: wait_alter_table_finish()

-- not supported
CREATE TABLE `t_test_basic_create_index_replicated` (
  `id1` bigint(20) NOT NULL COMMENT "",
  `id2` bigint(20) NOT NULL COMMENT "",
  `id3` bigint(20) NOT NULL COMMENT "",
  `id4` string NOT NULL COMMENT "",
  `id5` string NOT NULL COMMENT "",
  `id6` bigint(20) NOT NULL COMMENT "",
  `id7` string NOT NULL COMMENT "",
  INDEX `gin_id4` (`id4`) USING GIN ("parser" = "none") COMMENT ''
) ENGINE=OLAP
DUPLICATE KEY(`id1`)
DISTRIBUTED BY HASH(`id1`) BUCKETS 1
PROPERTIES (
"replication_num" = "1",
"in_memory" = "false",
"enable_persistent_index" = "false",
"replicated_storage" = "true",
"compression" = "LZ4"
);

DROP TABLE t_test_basic_create_index_pk;
DROP TABLE t_test_basic_create_index_dup;

-- name: test_query_gin_index
CREATE TABLE `t_test_gin_index_query` (
  `id1` bigint(20) NOT NULL COMMENT "",
  `query_none_analyzer` varchar(255) NOT NULL COMMENT "",
  `query_english` varchar(255) NOT NULL COMMENT "",
  `query_chinese` varchar(255) NOT NULL COMMENT "",
   INDEX gin_none (`query_none_analyzer`) USING GIN ("parser" = "none") COMMENT 'whole line index',
   INDEX gin_english (`query_english`) USING GIN ("parser" = "english") COMMENT 'english index',
   INDEX gin_chinese (`query_chinese`) USING GIN ("parser" = "chinese") COMMENT 'chinese index'
) ENGINE=OLAP
DUPLICATE KEY(`id1`)
DISTRIBUTED BY HASH(`id1`) BUCKETS 1
PROPERTIES (
"replication_num" = "1",
"in_memory" = "false",
"enable_persistent_index" = "false",
"replicated_storage" = "false",
"compression" = "LZ4"
);

insert into t_test_gin_index_query values
(1, 'starrocks', 'hello starrocks', '极速分析'),
(2, 'starrocks', 'hello world', '你好世界'),
(3, 'lakehouse', 'hello lakehouse', '湖仓一体'),
(4, 'materialized view', 'materialized view', '物化视图'),
(5, '中文测试', 'chinese test', '中文测试');

-- normal term index
select count(*) from t_test_gin_index_query where query_none_analyzer = 'starrocks';
select count(*) from t_test_gin_index_query where query_english = 'hello';
select count(*) from t_test_gin_index_query where query_english in ('world', 'lakehouse', 'view');
-- hybrid filter
select count(*) from t_test_gin_index_query where query_english != 'hello' and id1 > 4;
select count(*) from t_test_gin_index_query where query_english = 'hello' and query_none_analyzer = 'lakehouse';
-- whole line index, can match by `like`
select count(*) from t_test_gin_index_query where query_none_analyzer like '%ed vi%';
-- split terms and index, match by term
select count(*) from t_test_gin_index_query where query_english like '%ed vi%';
select count(*) from t_test_gin_index_query where query_english like '%teria%';
-- chinese
select count(*) from test.t_test_gin_index_query where query_chinese = '你好';
select count(*) from test.t_test_gin_index_query where query_none_analyzer = '中文测试';

drop table t_test_gin_index_query;
