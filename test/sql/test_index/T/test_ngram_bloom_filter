-- name: test_ngram_bloom_filter
create database ngram_bloom_filter_db_1;
use  ngram_bloom_filter_db_1;
CREATE TABLE ngram_index(
    timestamp DATETIME NOT NULL,
    username STRING,
    price INT NULL,
    INDEX idx_name1(username) USING NGRAMBF ("gram_num" = "4", "bloom_filter_fpp" = "0.05")
)PROPERTIES ("replication_num" = "1");

show index from ngram_index;

insert into ngram_index values ('2023-01-01',"chinese",3),('2023-01-02',"chineaaaaaaaaaaaab",4),('2023-01-03',"我爱吃烤全羊yangyangchin",4),('2023-01-04',"tonightisgreadnight",4);

select * from ngram_index order by ngram_search(username, 'chinese',4) desc;
drop index idx_name1 on ngram_index;
function: wait_alter_table_finish()
show index from ngram_index;

ALTER TABLE ngram_index ADD INDEX idx_name1(username) USING NGRAMBF ('gram_num' = "4", "bloom_filter_fpp" = "0.01");
function: wait_alter_table_finish()
show index from ngram_index;
select * from ngram_index order by  ngram_search(username, 'chinese',4) desc;
drop database ngram_bloom_filter_db_1;

-- name: test_ngram_bloom_filter_default
create database ngram_bloom_filter_db_2;
use  ngram_bloom_filter_db_2;
CREATE TABLE ngram_index_default_1(
    timestamp DATETIME NOT NULL,
    username STRING,
    price INT NULL,
    INDEX idx_name1(username) USING NGRAMBF ("gram_num" = "4")
)PROPERTIES ("replication_num" = "1");
show index from ngram_index_default_1;

CREATE TABLE ngram_index_default_2(
    timestamp DATETIME NOT NULL,
    username STRING,
    price INT NULL,
    INDEX idx_name1(username) USING NGRAMBF ("bloom_filter_fpp" = "0.05")
)PROPERTIES ("replication_num" = "1");
show index from ngram_index_default_2;
-- if default value of gram_num is not set, be will crash when insert data
insert into ngram_index_default_2 values ('2023-01-01',"chinese",3),('2023-01-02',"chineaaaaaaaaaaaab",4),('2023-01-03',"我爱吃烤全羊yangyangchin",4),('2023-01-04',"tonightisgreadnight",4);


CREATE TABLE ngram_index_default_3(
    timestamp DATETIME NOT NULL,
    username STRING,
    price INT NULL,
    INDEX idx_name1(username) USING NGRAMBF
)PROPERTIES ("replication_num" = "1");
show index from ngram_index_default_3;

-- name: test_ngram_bloom_filter_like
CREATE TABLE ngram_index_like(
    timestamp DATETIME NOT NULL,
    username STRING,
    price INT NULL,
    INDEX idx_name1(username) USING NGRAMBF ("gram_num" = "4", "bloom_filter_fpp" = "0.05")
)PROPERTIES ("replication_num" = "1");

insert into ngram_index_like values ('2023-01-01',"hina",3);
insert into ngram_index_like values ('2023-01-01',"chinese",3);
-- 2 rows are filterd
select * from ngram_index_like where username like 'chia%';
-- one row output, one row is filterd
select * from ngram_index_like where username like '_hine%';
-- this can not use index
select * from ngram_index_like where username like '_hin%';


-- name: test_ngram_bloom_filter_case_insensitive
CREATE TABLE ngram_index_case_in_sensitive(
    timestamp DATETIME NOT NULL,
    Username STRING,
    price INT NULL
)PROPERTIES ("replication_num" = "1");
insert into ngram_index_case_in_sensitive values ('2023-01-01',"aAbac",3);
insert into ngram_index_case_in_sensitive values ('2023-01-01',"AaBAa",3);

select ngram_search(Username,"aabaa",4) as order_col from ngram_index_case_in_sensitive order by order_col desc;

select ngram_search_case_insensitive(Username,"aabaa",4) as order_col from ngram_index_case_in_sensitive order by order_col desc;

select * from ngram_index_case_in_sensitive where Username like "AaBA_";


ALTER TABLE ngram_index_case_in_sensitive ADD INDEX idx_name1(Username) USING NGRAMBF ('gram_num' = "4", "bloom_filter_fpp" = "0.01");
function: wait_alter_table_finish()

-- index and function is case sensitive, so tow rows is filterd
select * from ngram_index_case_in_sensitive order by ngram_search(Username,"aabaa",4) desc;
-- function is case insensitive, index is sensitive, so index doesn't filter any data
select * from ngram_index_case_in_sensitive order by ngram_search_case_insensitive(Username,"aabaa",4) desc;
-- when index is case insensitve, like should behave correctly instead of return empty set
select * from ngram_index_case_in_sensitive where Username like "AaBA_";

drop index idx_name1 on ngram_index_case_in_sensitive;
function: wait_alter_table_finish()

ALTER TABLE ngram_index_case_in_sensitive ADD INDEX idx_name1(Username) USING NGRAMBF ('gram_num' = "4", "bloom_filter_fpp" = "0.05", "case_sensitive" = "false");
function: wait_alter_table_finish()
-- function is case sensitive, index is case insensitive, index doesn't filter any data 
-- because tow rows all hit bloom filter if case insensitive, which is a bad case
select * from ngram_index_case_in_sensitive order by ngram_search(Username,"aabaa",4) desc;

-- both are case insensitive, can't filter data 
select * from ngram_index_case_in_sensitive order by ngram_search_case_insensitive(Username,"aabaa",4) desc;

-- name: test_ngram_bloom_filter_char
create database ngram_bloom_filter_db_3;
use ngram_bloom_filter_db_3;
CREATE TABLE ngram_index_char(
    timestamp DATETIME NOT NULL,
    username char(20) NOT NULL,
    price INT NULL,
    INDEX idx_name1(username) USING NGRAMBF ("gram_num" = "4", "bloom_filter_fpp" = "0.05")
)PROPERTIES ("replication_num" = "1");

show index from ngram_index_char;

insert into ngram_index_char values ('2023-01-01',"chinese",3),('2023-01-02',"chineaaa",4),('2023-01-03',"我爱chin",4),('2023-01-04',"toniggrht",4);
select * from ngram_index_char where username like '_hiaa%';

-- name: test_bloom_filter
create database ngram_bloom_filter_db_4;
use ngram_bloom_filter_db_4;
CREATE TABLE `common_duplicate` (
  `c0` int(11) NOT NULL COMMENT "",
  `c1` int(11) NOT NULL COMMENT "",
  `c2` varchar(500)  NULL COMMENT ""
) ENGINE=OLAP
DUPLICATE KEY(`c0`, `c1`, `c2`)
COMMENT "OLAP"
DISTRIBUTED BY HASH(`c0`, `c1`, `c2`) BUCKETS 3
PROPERTIES (
"replication_num" = "1",
"bloom_filter_columns" = "c1,c2",
"in_memory" = "false",
"enable_persistent_index" = "false",
"replicated_storage" = "true",
"compression" = "LZ4"
);
insert into common_duplicate values (1,1,"abc"),(2,2,"abc"),(3,3,"abc"),(4,4,"abc"),(5,5,"abc"),(6,6,NULL);
select * from common_duplicate where c2 like '%b%' order by c0;
select * from common_duplicate where c2 in ("ab","bc","abc") order by c0;
select * from common_duplicate where c2 is not null order by c0;
select * from common_duplicate where c2 is  null order by c0;
select * from common_duplicate where c2 ="abc" order by c0;
select * from common_duplicate where c1 = 2;