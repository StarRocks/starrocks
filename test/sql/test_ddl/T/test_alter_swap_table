-- name: test_alter_swap_table
create database db_test_alter_swap_table;
use db_test_alter_swap_table;

CREATE TABLE s1 
(
    k1 int not null, k2 int, k3 int
)
DUPLICATE KEY(k1, k2)
DISTRIBUTED BY RANDOM 
PROPERTIES("replication_num" = "1", 'unique_constraints'='s1.k1');

CREATE TABLE s2 
(
    k1 int not null, k2 int, k3 int
)
DUPLICATE KEY(k1, k2)
DISTRIBUTED BY RANDOM 
PROPERTIES("replication_num" = "1", 'foreign_key_constraints'='s2(k1) REFERENCES s1(k1)');

CREATE TABLE s3 
(
    k1 int not null, k2 int, k3 int
)
DUPLICATE KEY(k1, k2)
DISTRIBUTED BY RANDOM 
PROPERTIES("replication_num" = "1", 'foreign_key_constraints'='s3(k1) REFERENCES s1(k1)');

INSERT INTO s1 values (1, 1, 1), (2, 2, 2);
INSERT INTO s2 values (1, 1, 1), (2, 2, 2);
INSERT INTO s3 values (1, 1, 1), (2, 2, 2);

create materialized view test_mv12
REFRESH DEFERRED MANUAL
PROPERTIES (
    "replication_num" = "1",
     'foreign_key_constraints'='s2(k1) REFERENCES s1(k1)',
     'unique_constraints'='s1.k1'
) 
as select s1.k1 as s11, s1.k2 as s12, s1.k3 as s13, s2.k1 s21, s2.k2 s22, s2.k3 s23 from s1 join s2 on s1.k1 = s2.k1;
[UC]REFRESH materialized view test_mv12 with sync mode;

set enable_rbo_table_prune = true;
set enable_cbo_table_prune = true;

function: assert_explain_not_contains('select s2.k1, s2.k2 from s1 join s2 on s1.k1 = s2.k1 order by 1, 2;', 's1')
function: assert_explain_not_contains('select s3.k1, s3.k2 from s1 join s3 on s1.k1 = s3.k1 order by 1, 2;', 's1')
function: assert_explain_contains('select s2.k1, s2.k2 from s2 order by 1, 2;', 'test_mv12')

select s2.k1, s2.k2 from s1 join s2 on s1.k1 = s2.k1 order by 1, 2;
select s3.k1, s3.k2 from s1 join s3 on s1.k1 = s3.k1 order by 1, 2;
select s2.k1, s2.k2 from s2 order by 1, 2;

ALTER TABLE s2 SWAP WITH s3;
ALTER materialized view test_mv12 active;
SHOW CREATE TABLE s2;
SHOW CREATE TABLE s3;

function: assert_explain_not_contains('select s2.k1, s2.k2 from s1 join s2 on s1.k1 = s2.k1 order by 1, 2;', 's1')
function: assert_explain_not_contains('select s3.k1, s3.k2 from s1 join s3 on s1.k1 = s3.k1 order by 1, 2;', 's1')
-- TODO(FIXME): This should be fixed in the future
function: assert_explain_not_contains('select s2.k1, s2.k2 from s2 order by 1, 2;', 'test_mv12')

select s2.k1, s2.k2 from s1 join s2 on s1.k1 = s2.k1 order by 1, 2;
select s3.k1, s3.k2 from s1 join s3 on s1.k1 = s3.k1 order by 1, 2;
select s2.k1, s2.k2 from s2 order by 1, 2;

CREATE TABLE s1_new
(
    k1 int not null, k2 int, k3 int
)
DUPLICATE KEY(k1, k2)
DISTRIBUTED BY RANDOM 
PROPERTIES("replication_num" = "1", 'unique_constraints'='s1_new.k1');

INSERT INTO s1_new values (1, 2, 3), (2, 3, 4);

ALTER TABLE s1 SWAP WITH s1_new;
ALTER materialized view test_mv12 active;
SHOW CREATE TABLE s1;
SHOW CREATE TABLE s1_new;
SHOW CREATE TABLE s2;
SHOW CREATE TABLE s3;

function: assert_explain_not_contains('select s2.k1, s2.k2 from s1 join s2 on s1.k1 = s2.k1 order by 1, 2;', 's1')
function: assert_explain_not_contains('select s3.k1, s3.k2 from s1 join s3 on s1.k1 = s3.k1 order by 1, 2;', 's1')
-- TODO(FIXME): This should be fixed in the future
function: assert_explain_not_contains('select s2.k1, s2.k2 from s2 order by 1, 2;', 'test_mv12')

select s2.k1, s2.k2 from s1 join s2 on s1.k1 = s2.k1 order by 1, 2;
select s3.k1, s3.k2 from s1 join s3 on s1.k1 = s3.k1 order by 1, 2;
select s2.k1, s2.k2 from s2 order by 1, 2;

DROP TABLE s1;
SHOW CREATE TABLE s2;
SHOW CREATE TABLE s3;

CREATE TABLE `primary_table_with_null_partition` ( `k1` date not null, `k2` datetime not null, `k3` varchar(20) not null, `k4` varchar(20) not null, `k5` boolean not null, `v1` tinyint, `v2` smallint, `v3` int, `v4` bigint, `v5` largeint, `v6` float, `v7` double, `v8` decimal(27,9) ) PRIMARY KEY(`k1`, `k2`, `k3`, `k4`, `k5`) COMMENT "OLAP" PARTITION BY RANGE(`k1`) ( PARTITION `p202006` VALUES LESS THAN ("2020-07-01"), PARTITION `p202007` VALUES LESS THAN ("2020-08-01"), PARTITION `p202008` VALUES LESS THAN ("2020-09-01") ) DISTRIBUTED BY HASH(`k1`, `k2`, `k3`, `k4`, `k5`) BUCKETS 3 PROPERTIES ( "replication_num" = "1", "storage_format" = "v2" );
CREATE TABLE `aggregate_table_with_null` ( `k1` date, `k2` datetime, `k3` char(20), `k4` varchar(20), `k5` boolean, `v1` bigint sum, `v2` bigint sum, `v3` bigint sum, `v4` bigint max, `v5` largeint max, `v6` float min, `v7` double min, `v8` decimal(27,9) sum ) AGGREGATE KEY(`k1`, `k2`, `k3`, `k4`, `k5`) COMMENT "OLAP" DISTRIBUTED BY HASH(`k1`, `k2`, `k3`, `k4`, `k5`) BUCKETS 3 PROPERTIES ( "replication_num" = "1", "storage_format" = "v2", "light_schema_change" = "false" );
INSERT INTO primary_table_with_null_partition values ('2020-06-01', '2020-06-01 00:00:00', 'a', 'a', true, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0), ('2020-07-01', '2020-07-01 00:00:00', 'a', 'a', true, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0), ('2020-08-01', '2020-08-01 00:00:00', 'a', 'a', true, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0);
INSERT INTO aggregate_table_with_null values ('2020-06-01', '2020-06-01 00:00:00', 'a', 'a', true, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0), ('2020-07-01', '2020-07-01 00:00:00', 'a', 'a', true, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0), ('2020-08-01', '2020-08-01 00:00:00', 'a', 'a', true, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0);
select * from primary_table_with_null_partition order by k1 limit 3;
select * from aggregate_table_with_null order by k1 limit 3;
-- swap table
alter table primary_table_with_null_partition SWAP WITH aggregate_table_with_null;
select * from primary_table_with_null_partition order by k1 limit 3;
select * from aggregate_table_with_null order by k1 limit 3;

DROP DATABASE db_test_alter_swap_table;