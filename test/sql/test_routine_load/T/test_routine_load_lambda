-- name: test_routine_load_lambda

create database db_${uuid0};
use db_${uuid0};

CREATE TABLE `test_lambda` (
  `id` string,
  `dt` datetime,
  `method` string,
  `ip`  string,
  `path` string,
  `vid` string,
  `cid` string
) ENGINE=OLAP
DUPLICATE KEY(`id`)
DISTRIBUTED BY HASH(`id`) BUCKETS 10
PROPERTIES (
 "replication_num" = "1"
);

CREATE ROUTINE LOAD test_lambda
ON test_lambda
COLUMNS (
    id,dt,method,ip,path,tmp1,tmp2,
    `vid`=get_json_string(array_filter(item -> get_json_string(item, '$.type')='type1', CAST(parse_json(tmp1) AS ARRAY<JSON>))[1], '$.vid'),
    `cid`=get_json_string(map_values((map_filter((k, v)->get_json_string(v, '$.type')='type1',cast(parse_json(tmp2) AS map<string,json>))))[1],'$.cid')
)
PROPERTIES
(
  "format" = "json",
  "jsonpaths" = "[
      \"$.id\",
      \"$.timestamp\",
      \"$.http.request.method\",
      \"$.http.request.headers.ip\",
      \"$.http.request.path\",
      \"$.events.context\",
      \"$.agent.findings\"
  ]"
)
FROM KAFKA
(
    "kafka_broker_list"="${broker_list}",
    "kafka_topic" = "test-routine-load-lambda",
    "property.kafka_default_offsets" = "OFFSET_BEGINNING"
);

function: check_routine_load_progress(1, "db_${uuid0}.test_lambda", "db_${uuid0}", "test_lambda")
sync;

select * from db_${uuid0}.test_lambda order by id;