-- name: test_jvm_udf

set enable_group_execution = true;

CREATE AGGREGATE FUNCTION sumbigint(bigint)
RETURNS bigint
symbol = "Sumbigint"
type = "StarrocksJar"
file = "${udf_url}/starrocks-jdbc%2FSumbigint.jar";

CREATE TABLE FUNCTION udtfstring(string)
RETURNS string
symbol = "UDTFstring"
type = "StarrocksJar"
file = "${udf_url}/starrocks-jdbc%2FUDTFstring.jar";

CREATE TABLE FUNCTION udtfstring_wrong_match(string)
RETURNS int
symbol = "UDTFstring"
type = "StarrocksJar"
file = "${udf_url}/starrocks-jdbc%2FUDTFstring.jar";

CREATE TABLE FUNCTION udtfint(int)
RETURNS int
symbol = "UDTFint"
type = "StarrocksJar"
file = "${udf_url}/starrocks-jdbc%2FUDTFint.jar";

CREATE TABLE FUNCTION udtfbigint(bigint)
RETURNS bigint
symbol = "UDTFbigint"
type = "StarrocksJar"
file = "${udf_url}/starrocks-jdbc%2FUDTFbigint.jar";

CREATE TABLE FUNCTION udtffloat(float)
RETURNS float
symbol = "UDTFfloat"
type = "StarrocksJar"
file = "${udf_url}/starrocks-jdbc%2FUDTFfloat.jar";

CREATE TABLE FUNCTION udtfdouble(double)
RETURNS double
symbol = "UDTFdouble"
type = "StarrocksJar"
file = "${udf_url}/starrocks-jdbc%2FUDTFdouble.jar";

CREATE FUNCTION exception_test(string)
RETURNS string
PROPERTIES
(
"symbol" = "ExceptionUDF2", 
"type" = "StarrocksJar", 
"file" = "${udf_url}/starrocks-jdbc/ExceptionUDF2.jar"
);

CREATE FUNCTION shared_exception_test(string)
RETURNS string
PROPERTIES
(
"symbol" = "ExceptionUDF2", 
"isolation"="shared",
"type" = "StarrocksJar", 
"file" = "${udf_url}/starrocks-jdbc/ExceptionUDF2.jar"
);

CREATE TABLE `t0` (
  `c0` int(11) NULL COMMENT "",
  `c1` varchar(20) NULL COMMENT "",
  `c2` varchar(200) NULL COMMENT "",
  `c3` int(11) NULL COMMENT ""
) ENGINE=OLAP
DUPLICATE KEY(`c0`, `c1`)
COMMENT "OLAP"
PROPERTIES (
"replication_num" = "1"
);

insert into t0 SELECT generate_series, generate_series, generate_series, generate_series FROM TABLE(generate_series(1,  40960));

-- test udtf cases
select count(udtfstring) from t0, udtfstring(c1);
select count(udtfstring_wrong_match) from t0, udtfstring_wrong_match(c1);
select count(udtfint) from t0, udtfint(c1);
select count(udtfbigint) from t0, udtfbigint(c1);
select count(udtffloat) from t0, udtffloat(c1);
select count(udtfdouble) from t0, udtfdouble(c1);
-- test udtf with utf8 case
select * from TABLE(udtfstring(""));
select * from TABLE(udtfstring("▁▂▃▄▅▆▇█"));
select * from TABLE(udtfstring("中文测试"));
select * from TABLE(udtfstring("∀∂∈ℝ∧∪≡∞ ↑↗↨↻⇣ ┐┼╔╘░►☺♀ ﬁ�⑀₂ἠḂӥẄɐː⍎אԱა"));
select * from TABLE(udtfstring("2H₂ + O₂ ⇌ 2H₂O"));
select * from TABLE(udtfstring("ᚻᛖ ᚳᚹᚫᚦ ᚦᚫᛏ ᚻᛖ ᛒᚢᛞᛖ ᚩᚾ ᚦᚫᛗ ᛚᚪᚾᛞᛖ ᚾᚩᚱᚦᚹᛖᚪᚱᛞᚢᛗ ᚹᛁᚦ ᚦᚪ ᚹᛖᛥᚫ"));


-- test group by limit case:
set streaming_preaggregation_mode="force_streaming";
select sum(delta), count(*), count(delta) from (select (sum(c3) - sumbigint(c3)) as delta from t0 group by c0,c1 limit 10) tb;

-- test group by spill case:
set streaming_preaggregation_mode="auto";
set enable_spill=true;
set spill_mode="force";

select sum(delta), count(*), count(delta) from (select (sum(c3) - sumbigint(c3)) as delta from t0 group by c0,c1) tb;
-- test udf exception case
select count(*) from t0 where exception_test(c1) is null;
-- run two times
select count(*) from t0 where shared_exception_test(c1) is null;
select count(*) from t0 where shared_exception_test(c1) is null;

-- test array and map
CREATE FUNCTION echo_array_string(array<string>)
RETURNS array<string>
PROPERTIES
(
  "symbol" = "EchoArray", 
  "isolation"="shared",
  "type" = "StarrocksJar", 
  "file" = "${udf_url}/starrocks-jdbc/ArrayMap.jar"
);

CREATE FUNCTION echo_array_int(array<int>)
RETURNS array<int>
PROPERTIES
(
  "symbol" = "EchoArray", 
  "isolation"="shared",
  "type" = "StarrocksJar", 
  "file" = "${udf_url}/starrocks-jdbc/ArrayMap.jar"
);

CREATE FUNCTION echo_map(map<int,string>)
RETURNS map<int,string>
PROPERTIES
(
  "symbol" = "EchoMap", 
  "isolation"="shared",
  "type" = "StarrocksJar", 
  "file" = "${udf_url}/starrocks-jdbc/ArrayMap.jar"
);

CREATE TABLE `tlistarray` (
  `c0` int(11) NULL COMMENT "",
  `c1` array<int> NULL,
  `c2` array<string> NULL COMMENT "",
  `c3` map<string, int> NULL COMMENT ""
) ENGINE=OLAP
DUPLICATE KEY(`c0`)
COMMENT "OLAP"
PROPERTIES (
"replication_num" = "1"
);

select echo_array_int([1,2,3]);
select echo_array_string([1,2,3]);
select echo_map(map(1,2,3,4));

insert into tlistarray values(1, [1,2,3], [1,2,3], map(1,2,3,4)), (2, [4,5], ["6", "7"], map(4,5,1,2)), (null,null,null,null);
select c0,echo_array_int(c1) from tlistarray order by 1;
select c0,echo_array_string(c2) from tlistarray order by 1;
select c0,echo_map(c3) from tlistarray order by 1;