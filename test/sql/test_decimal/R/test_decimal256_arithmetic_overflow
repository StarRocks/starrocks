-- name: test_decimal256_arithmetic_overflow
DROP DATABASE IF EXISTS test_decimal256_overflow;
-- result:
-- !result
CREATE DATABASE test_decimal256_overflow;
-- result:
-- !result
USE test_decimal256_overflow;
-- result:
-- !result
CREATE TABLE powers_of_2 (
    power_250 DECIMAL(76, 0)
) PROPERTIES("replication_num"="1");
-- result:
-- !result
insert into powers_of_2 select 1809251394333065553493296640760748560207343510400633813116524750123642650624;
-- result:
-- !result
select cast(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495 as string) from powers_of_2;
-- result:
57896044618658097711785492504343953926634992332820282019728792003956564819967
-- !result
select cast((-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) as string) from powers_of_2;
-- result:
--57896044618658097711785492504343953926634992332820282019728792003956564819968
-- !result
select cast(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495 + 1 as string) from powers_of_2;
-- result:
None
-- !result
select cast(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495 - 1 as string) from powers_of_2;
-- result:
57896044618658097711785492504343953926634992332820282019728792003956564819966
-- !result
select cast((power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) * 0 as string) from powers_of_2;
-- result:
0
-- !result
select cast((power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) * -1 as string) from powers_of_2;
-- result:
-57896044618658097711785492504343953926634992332820282019728792003956564819967
-- !result
select cast((power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) * 2 as string) from powers_of_2;
-- result:
None
-- !result
select cast((power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) * -2 as string) from powers_of_2;
-- result:
None
-- !result
select cast((-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) - 1 as string) from powers_of_2;
-- result:
None
-- !result
select cast((-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) + 1 as string) from powers_of_2;
-- result:
-57896044618658097711785492504343953926634992332820282019728792003956564819967
-- !result
select cast((-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) * 1 as string) from powers_of_2;
-- result:
--57896044618658097711785492504343953926634992332820282019728792003956564819968
-- !result
select cast((-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) * -1 as string) from powers_of_2;
-- result:
None
-- !result
select cast((-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) * -2 as string) from powers_of_2;
-- result:
None
-- !result
select cast((-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) * 2 as string) from powers_of_2;
-- result:
None
-- !result
select cast((-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) * 0 as string) from powers_of_2;
-- result:
0
-- !result
select cast(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495 + (-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) as string) from powers_of_2;
-- result:
-1
-- !result
select cast((power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) * (-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) as string) from powers_of_2;
-- result:
None
-- !result
select cast((power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) * (power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) as string) from powers_of_2;
-- result:
None
-- !result
select cast((-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) * (-(power_250 * 16 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602496 + 7237005577332262213973186563042994240829374041602535252466099000494570602495) - 1) as string) from powers_of_2;
-- result:
None
-- !result
create table test_256max_result(d1 decimal(76, 0)) PROPERTIES("replication_num"="1");
-- result:
-- !result
insert into test_256max_result select 1496577676626844588240573307387100039795808514605057;
-- result:
-- !result
select cast(d1 * 38685626227668133590597631 as string) from test_256max_result;
-- result:
57896044618658097711785492504343953926634992332820282019728792003956564819967
-- !result
create table test_256min_result(d1 decimal(76, 0), d2 decimal(76, 0)) PROPERTIES("replication_num"="1");
-- result:
-- !result
insert into test_256min_result select 340282366920938463463374607431768211456, -170141183460469231731687303715884105728;
-- result:
-- !result
select cast(d1 * d2 as string) from test_256min_result; -- 2^128 * -2^127

CREATE TABLE test_decimal_multiply_overflow (
    id INT,
    case_desc VARCHAR(200),
    d60_30 DECIMAL(60, 30),
    d70_20 DECIMAL(70, 20),
    d76_10 DECIMAL(76, 10),
    d76_38 DECIMAL(76, 38),
    d50_0  DECIMAL(50, 0),
    d38_0  DECIMAL(38, 0)   -- Maximum 38-digit decimal number
) PROPERTIES("replication_num"="1");
-- result:
--57896044618658097711785492504343953926634992332820282019728792003956564819968
-- !result
INSERT INTO test_decimal_multiply_overflow VALUES
(1, 'Small values',
 1.123456789012345678901234567890,
 12.12345678901234567890,
 123.1234567890,
 0.12345678901234567890123456789012345678,
 1000,
 12345),

(2, 'Medium values',
 123456789012345678901234567890.123456789012345678901234567890,  -- 60 digits
 12345678901234567890123456789012345678901234567890.12345678901234567890,  -- 70 digits
 1234567890123456789012345678901234567890123456789012345678901234.1234567890,  -- 76 digits
 12345678901234567890123456789012345678.12345678901234567890123456789012345678,  -- 76 digits
 12345678901234567890123456789012345678901234567890,  -- 50 digits
 12345678901234567890123456789012345678),  -- 38 digits

(3, 'Near max positive values',
 999999999999999999999999999999.999999999999999999999999999999,  -- d60_30 maximum
 99999999999999999999999999999999999999999999999999.99999999999999999999,  -- d70_20 maximum
 9999999999999999999999999999999999999999999999999999999999999999.9999999999,  -- d76_10 maximum
 99999999999999999999999999999999999999.99999999999999999999999999999999999999,  -- d76_38 maximum
 99999999999999999999999999999999999999999999999999,  -- d50_0 maximum
 99999999999999999999999999999999999999),  -- d38_0 maximum (38 nines)

(4, 'Near max negative values',
 -999999999999999999999999999999.999999999999999999999999999999,
 -99999999999999999999999999999999999999999999999999.99999999999999999999,
 -9999999999999999999999999999999999999999999999999999999999999999.9999999999,
 -99999999999999999999999999999999999999.99999999999999999999999999999999999999,
 -99999999999999999999999999999999999999999999999999,
 -99999999999999999999999999999999999999);
-- result:
-- !result
CREATE TABLE test_boundary_values (
    id INT,
    case_desc VARCHAR(200),
    -- Designed based on actual DECIMAL precision limits
    val_76_0 DECIMAL(76, 0),
    val_38_0 DECIMAL(38, 0),
    val_19_0 DECIMAL(19, 0),
    val_25_0 DECIMAL(25, 0),
    val_high_scale DECIMAL(76, 50)
) PROPERTIES("replication_num"="1");
-- result:
-- !result
INSERT INTO test_boundary_values VALUES
(1, 'Near 76-digit decimal max',
 9999999999999999999999999999999999999999999999999999999999999999999999999999,  -- 76 nines
 99999999999999999999999999999999999999,  -- 38 nines
 9999999999999999999,  -- 19 nines
 9999999999999999999999999,  -- 25 nines
 0.00000000000000000000000000000000000000000000000001),

(2, 'Near 76-digit decimal min',
 -9999999999999999999999999999999999999999999999999999999999999999999999999999,
 -99999999999999999999999999999999999999,
 -9999999999999999999,
 -9999999999999999999999999,
 -0.00000000000000000000000000000000000000000000000001),

(3, 'Multiplication overflow test values',
 1000000000000000000000000000000000000000000000000000000000000000000000000000,  -- 76-digit 10^75
 10000000000000000000000000000000000000,  -- 38-digit 10^37
 1000000000000000000,  -- 19-digit 10^18
 1000000000000000000000000,  -- 25-digit 10^24
 0.00000000000000000000000000000000000000000000000001),

(4, 'Medium size values',
 5000000000000000000000000000000000000000000000000000000000000000000000000000,  -- 76-digit 5*10^75
 50000000000000000000000000000000000000,  -- 38-digit 5*10^37
 5000000000000000000,  -- 19-digit 5*10^18
 5000000000000000000000000,  -- 25-digit 5*10^24
 0.50000000000000000000000000000000000000000000000000);
-- result:
-- !result
SELECT
    'Test 1.1: 76-digit max * 76-digit max (definite overflow)' as test_case,
    cast(val_76_0 as string),
    cast(val_76_0 * val_76_0 as string) as result,
    'Should overflow: 10^75 * 10^75 = 10^150, way beyond int256' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 1.1: 76-digit max * 76-digit max (definite overflow)	9999999999999999999999999999999999999999999999999999999999999999999999999999	None	Should overflow: 10^75 * 10^75 = 10^150, way beyond int256
-- !result
SELECT
    'Test 1.2: 38-digit max * 38-digit max (may overflow)' as test_case,
    cast(val_38_0 as string),
    cast(cast(val_38_0 as decimal(76, 0)) * val_38_0 as string) as result,
    'not overflow' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 1.2: 38-digit max * 38-digit max (may overflow)	99999999999999999999999999999999999999	9999999999999999999999999999999999999800000000000000000000000000000000000001	not overflow
-- !result
SELECT
    'Test 1.3: 19-digit * 19-digit (should not overflow)' as test_case,
    cast(val_19_0 as string),
    cast(val_19_0 * val_19_0 as string) as result,
    'Should not overflow: 10^18 * 10^18 = 10^36, within int256' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 1.3: 19-digit * 19-digit (should not overflow)	9999999999999999999	99999999999999999980000000000000000001	Should not overflow: 10^18 * 10^18 = 10^36, within int256
-- !result
SELECT
    'Test 1.4: Large value * 2' as test_case,
    cast(val_76_0 as string),
    cast(val_76_0 * 2 as string) as result,
    'Should overflow: near-max * 2' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 1.4: Large value * 2	9999999999999999999999999999999999999999999999999999999999999999999999999999	19999999999999999999999999999999999999999999999999999999999999999999999999998	Should overflow: near-max * 2
-- !result
SELECT
    'Test 1.5: Large value * 5' as test_case,
    cast(val_76_0 as string),
    cast(val_76_0 * 5 as string) as result,
    'Should overflow: near-max * 5' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 1.5: Large value * 5	9999999999999999999999999999999999999999999999999999999999999999999999999999	49999999999999999999999999999999999999999999999999999999999999999999999999995	Should overflow: near-max * 5
-- !result
SELECT
    'Test 1.6: Large value * 5.1' as test_case,
    cast(val_76_0 as string),
    cast(val_76_0 * 5.1 as string) as result,
    'Should overflow: near-max * 5.1' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 1.6: Large value * 5.1	9999999999999999999999999999999999999999999999999999999999999999999999999999	None	Should overflow: near-max * 5.1
-- !result
SELECT
    'Test 1.7: Large value * 6' as test_case,
    cast(val_76_0 as string),
    cast(val_76_0 * 6 as string) as result,
    'Should overflow: near-max * 6' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 1.7: Large value * 6	9999999999999999999999999999999999999999999999999999999999999999999999999999	None	Should overflow: near-max * 6
-- !result
SELECT
    'Test 2.1: Large negative * Large negative (positive overflow)' as test_case,
    cast(val_76_0 as string),
    cast(val_76_0 * val_76_0 as string) as result,
    'Should overflow: (-10^75) * (-10^75) = +10^150' as expected
FROM test_boundary_values WHERE id = 2;
-- result:
Test 2.1: Large negative * Large negative (positive overflow)	-9999999999999999999999999999999999999999999999999999999999999999999999999999	None	Should overflow: (-10^75) * (-10^75) = +10^150
-- !result
SELECT
    'Test 2.2: Large negative * Large positive (negative overflow)' as test_case,
    cast(a.val_76_0 as string) as neg_val,
    cast(b.val_76_0 as string) as pos_val,
    cast(a.val_76_0 * b.val_76_0 as string) as result,
    'Should overflow: (-10^75) * (+10^75) = -10^150' as expected
FROM test_boundary_values a, test_boundary_values b
WHERE a.id = 2 AND b.id = 1;
-- result:
Test 2.2: Large negative * Large positive (negative overflow)	-9999999999999999999999999999999999999999999999999999999999999999999999999999	9999999999999999999999999999999999999999999999999999999999999999999999999999	None	Should overflow: (-10^75) * (+10^75) = -10^150
-- !result
SELECT
    'Test 2.3: Negative boundary * 5' as test_case,
    cast(val_76_0 as string),
    cast(val_76_0 * 5 as string) as result,
    'Should not overflow' as expected
FROM test_boundary_values WHERE id = 2;
-- result:
Test 2.3: Negative boundary * 5	-9999999999999999999999999999999999999999999999999999999999999999999999999999	-49999999999999999999999999999999999999999999999999999999999999999999999999995	Should not overflow
-- !result
SELECT
    'Test 2.4: Negative boundary * 6' as test_case,
    cast(val_76_0 as string),
    cast(val_76_0 * 6 as string) as result,
    'Should overflow' as expected
FROM test_boundary_values WHERE id = 2;
-- result:
Test 2.4: Negative boundary * 6	-9999999999999999999999999999999999999999999999999999999999999999999999999999	None	Should overflow
-- !result
SELECT
    'Test 3.1: 76-digit * 38-digit' as test_case,
    cast(a.val_76_0 as string),
    cast(b.val_38_0 as string),
    cast(a.val_76_0 * b.val_38_0 as string) as result,
    'Should overflow: 10^75 * 10^37 = 10^112' as expected
FROM test_boundary_values a, test_boundary_values b
WHERE a.id = 1 AND b.id = 1;
-- result:
Test 3.1: 76-digit * 38-digit	9999999999999999999999999999999999999999999999999999999999999999999999999999	99999999999999999999999999999999999999	None	Should overflow: 10^75 * 10^37 = 10^112
-- !result
SELECT
    'Test 3.2: 38-digit * 25-digit' as test_case,
    cast(a.val_38_0 as string),
    cast(b.val_25_0 as string),
    cast(a.val_38_0 * b.val_25_0 as string) as result,
    'overflow' as expected
FROM test_boundary_values a, test_boundary_values b
WHERE a.id = 1 AND b.id = 1;
-- result:
Test 3.2: 38-digit * 25-digit	99999999999999999999999999999999999999	9999999999999999999999999	None	overflow
-- !result
SELECT
    'Test 3.2: 38-digit * 25-digit' as test_case,
    cast(a.val_38_0 as string),
    cast(b.val_25_0 as string),
    cast(cast(a.val_38_0 as decimal(50, 10)) * b.val_25_0 as string) as result,
    'should not overflow' as expected
FROM test_boundary_values a, test_boundary_values b
WHERE a.id = 1 AND b.id = 1;
-- result:
Test 3.2: 38-digit * 25-digit	99999999999999999999999999999999999999	9999999999999999999999999	999999999999999999999999899999999999990000000000000000000000001.0000000000	should not overflow
-- !result
SELECT
    'Test 3.3: 25-digit * 25-digit' as test_case,
    cast(val_25_0 as string),
    cast(val_25_0 * val_25_0 as string) as result,
    'overflow' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 3.3: 25-digit * 25-digit	9999999999999999999999999	None	overflow
-- !result
SELECT
    'Test 3.3: 25-digit * 25-digit' as test_case,
    cast(val_25_0 as string),
    cast(val_25_0 * cast(val_25_0 as decimal(39, 0)) as string) as result,
    'should not overflow' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 3.3: 25-digit * 25-digit	9999999999999999999999999	99999999999999999999999980000000000000000000000001	should not overflow
-- !result
CREATE TABLE test_progressive_boundary (
    id INT,
    digits INT,
    test_val DECIMAL(76, 0)
) PROPERTIES("replication_num"="1");
-- result:
-- !result
INSERT INTO test_progressive_boundary VALUES
(1, 10, 9999999999),                    -- 10 digits
(2, 15, 999999999999999),               -- 15 digits
(3, 20, 99999999999999999999),          -- 20 digits
(4, 25, 9999999999999999999999999),     -- 25 digits
(5, 30, 999999999999999999999999999999), -- 30 digits
(6, 35, 99999999999999999999999999999999999), -- 35 digits
(7, 38, 99999999999999999999999999999999999999); -- 38 digits

SELECT
    id,
    digits,
    cast(test_val as string),
    cast(test_val * test_val as string) as result,
    CASE
        WHEN digits <= 19 THEN 'Should succeed'
        WHEN digits <= 25 THEN 'May succeed'
        WHEN digits > 30 THEN 'Should succeed'
        ELSE 'Boundary case'
    END as expected
FROM test_progressive_boundary ORDER BY id;
-- result:
-- !result
SELECT
    'Test 5.1: Scale overflow, tiny value' as test_case,
    cast(val_high_scale * val_high_scale as string) as result,
    'Should fail due to scale=100 > 76' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
E: (1064, 'Getting analyzing error. Detail message: Return scale(100) exceeds maximum value(76), please cast decimal type to low-precision one.')
-- !result
SELECT
    'Test 5.2: Value overflow, scale OK' as test_case,
        cast(val_38_0 * val_38_0 as string) as result,
    'Should fail due to value overflow, scale=0 is fine' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 5.2: Value overflow, scale OK	None	Should fail due to value overflow, scale=0 is fine
-- !result
SELECT
    'Test 6.1: Large * 0' as test_case,
    cast(val_76_0 * 0 as string) as result,
    'Should return 0, no overflow' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 6.1: Large * 0	0	Should return 0, no overflow
-- !result
SELECT
    'Test 6.2: Large * 1' as test_case,
    cast(val_76_0 * 1 as string) as result,
    'Should return original value' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 6.2: Large * 1	9999999999999999999999999999999999999999999999999999999999999999999999999999	Should return original value
-- !result
SELECT
    'Test 6.3: Large * 0.1' as test_case,
    cast(val_76_0 * 0.1 as string) as result,
    'Should succeed, reduces magnitude' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 6.3: Large * 0.1	999999999999999999999999999999999999999999999999999999999999999999999999999.9	Should succeed, reduces magnitude
-- !result
SELECT
    'Test 6.4: Large * -1' as test_case,
    cast(val_76_0 * (-1) as string) as result,
    'Should return negative of original' as expected
FROM test_boundary_values WHERE id = 1;
-- result:
Test 6.4: Large * -1	-9999999999999999999999999999999999999999999999999999999999999999999999999999	Should return negative of original
-- !result
SELECT
    'Test 7.2: Scientific calculation' as test_case,
    cast(d76_10 * d76_10 as string) as result,
    'Simulates scientific computation overflow' as expected
FROM test_decimal_multiply_overflow WHERE id = 3;
-- result:
Test 7.2: Scientific calculation	None	Simulates scientific computation overflow
-- !result