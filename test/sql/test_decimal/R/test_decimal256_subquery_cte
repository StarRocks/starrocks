-- name: test_decimal256_subquery_cte
DROP DATABASE IF EXISTS test_decimal256_subquery;
-- result:
-- !result
CREATE DATABASE test_decimal256_subquery;
-- result:
-- !result
USE test_decimal256_subquery;
-- result:
-- !result
CREATE TABLE decimal_main_test (
    id INT,
    category VARCHAR(10),
    d50_15 DECIMAL(50,15),
    d76_20 DECIMAL(76,20)
) PROPERTIES("replication_num"="1");
-- result:
-- !result
CREATE TABLE decimal_secondary_test (
    id INT,
    ref_category VARCHAR(10),
    threshold_d50 DECIMAL(50,15),
    threshold_d76 DECIMAL(76,20)
) PROPERTIES("replication_num"="1");
-- result:
-- !result
INSERT INTO decimal_main_test VALUES
(1, 'A', 12345678901234567890123456789012345.123456789012345, 12345678901234567890123456789012345678901234567890123456.12345678901234567890),
(2, 'A', 98765432109876543210987654321098765.456789012345678, 98765432109876543210987654321098765432109876543210987654.45678901234567890123),
(3, 'B', 55555555555555555555555555555555555.789012345678901, 55555555555555555555555555555555555555555555555555555555.78901234567890123456),
(4, 'B', 77777777777777777777777777777777777.012345678901234, 77777777777777777777777777777777777777777777777777777777.01234567890123456789),
(5, 'C', 44444444444444444444444444444444444.567890123456789, 44444444444444444444444444444444444444444444444444444444.56789012345678901234),
(6, 'C', 88888888888888888888888888888888888.901234567890123, 88888888888888888888888888888888888888888888888888888888.90123456789012345678),
(7, 'A', 11111111111111111111111111111111111.234567890123456, 11111111111111111111111111111111111111111111111111111111.23456789012345678901),
(8, 'B', 22222222222222222222222222222222222.678901234567890, 22222222222222222222222222222222222222222222222222222222.67890123456789012345),
(9, 'C', 99999999999999999999999999999999999.345678901234567, 99999999999999999999999999999999999999999999999999999999.34567890123456789012),
(10, 'A', 66666666666666666666666666666666666.111111111111111, 66666666666666666666666666666666666666666666666666666666.11111111111111111111);
-- result:
-- !result
INSERT INTO decimal_secondary_test VALUES
(1, 'A', 50000000000000000000000000000000000.000000000000000, 50000000000000000000000000000000000000000000000000000000.00000000000000000000),
(2, 'B', 60000000000000000000000000000000000.000000000000000, 60000000000000000000000000000000000000000000000000000000.00000000000000000000),
(3, 'C', 70000000000000000000000000000000000.000000000000000, 70000000000000000000000000000000000000000000000000000000.00000000000000000000);
-- result:
-- !result
SELECT
    'Test1_SCALAR_SUBQUERY_SELECT' as test_name,
    id,
    category,
    d50_15,
    (SELECT AVG(d50_15) FROM decimal_main_test) as overall_avg,
    d50_15 - (SELECT AVG(d50_15) FROM decimal_main_test) as diff_from_avg
FROM decimal_main_test
ORDER BY id;
-- result:
Test1_SCALAR_SUBQUERY_SELECT	1	A	12345678901234567890123456789012345.123456789012345	57777777767777777776777777777677777.622098765432209	-45432098866543209886654320988665432.498641976419864
Test1_SCALAR_SUBQUERY_SELECT	2	A	98765432109876543210987654321098765.456789012345678	57777777767777777776777777777677777.622098765432209	40987654342098765434209876543420987.834690246913469
Test1_SCALAR_SUBQUERY_SELECT	3	B	55555555555555555555555555555555555.789012345678901	57777777767777777776777777777677777.622098765432209	-2222222212222222221222222222122221.833086419753308
Test1_SCALAR_SUBQUERY_SELECT	4	B	77777777777777777777777777777777777.012345678901234	57777777767777777776777777777677777.622098765432209	20000000010000000001000000000099999.390246913469025
Test1_SCALAR_SUBQUERY_SELECT	5	C	44444444444444444444444444444444444.567890123456789	57777777767777777776777777777677777.622098765432209	-13333333323333333332333333333233333.054208641975420
Test1_SCALAR_SUBQUERY_SELECT	6	C	88888888888888888888888888888888888.901234567890123	57777777767777777776777777777677777.622098765432209	31111111121111111112111111111211111.279135802457914
Test1_SCALAR_SUBQUERY_SELECT	7	A	11111111111111111111111111111111111.234567890123456	57777777767777777776777777777677777.622098765432209	-46666666656666666665666666666566666.387530875308753
Test1_SCALAR_SUBQUERY_SELECT	8	B	22222222222222222222222222222222222.678901234567890	57777777767777777776777777777677777.622098765432209	-35555555545555555554555555555455554.943197530864319
Test1_SCALAR_SUBQUERY_SELECT	9	C	99999999999999999999999999999999999.345678901234567	57777777767777777776777777777677777.622098765432209	42222222232222222223222222222322221.723580135802358
Test1_SCALAR_SUBQUERY_SELECT	10	A	66666666666666666666666666666666666.111111111111111	57777777767777777776777777777677777.622098765432209	8888888898888888889888888888988888.489012345678902
-- !result
SELECT
    'Test2_SCALAR_SUBQUERY_WHERE' as test_name,
    id,
    category,
    d50_15,
    d76_20
FROM decimal_main_test
WHERE d50_15 > (SELECT AVG(d50_15) FROM decimal_main_test)
ORDER BY d50_15;
-- result:
Test2_SCALAR_SUBQUERY_WHERE	10	A	66666666666666666666666666666666666.111111111111111	66666666666666666666666666666666666666666666666666666666.11111111111111111111
Test2_SCALAR_SUBQUERY_WHERE	4	B	77777777777777777777777777777777777.012345678901234	77777777777777777777777777777777777777777777777777777777.01234567890123456789
Test2_SCALAR_SUBQUERY_WHERE	6	C	88888888888888888888888888888888888.901234567890123	88888888888888888888888888888888888888888888888888888888.90123456789012345678
Test2_SCALAR_SUBQUERY_WHERE	2	A	98765432109876543210987654321098765.456789012345678	98765432109876543210987654321098765432109876543210987654.45678901234567890123
Test2_SCALAR_SUBQUERY_WHERE	9	C	99999999999999999999999999999999999.345678901234567	99999999999999999999999999999999999999999999999999999999.34567890123456789012
-- !result
SELECT
    'Test3_EXISTS_SUBQUERY' as test_name,
    mt.id,
    mt.category,
    mt.d50_15
FROM decimal_main_test mt
WHERE EXISTS (
    SELECT 1 FROM decimal_secondary_test st
    WHERE st.ref_category = mt.category
    AND mt.d50_15 > st.threshold_d50
)
ORDER BY mt.id;
-- result:
Test3_EXISTS_SUBQUERY	2	A	98765432109876543210987654321098765.456789012345678
Test3_EXISTS_SUBQUERY	4	B	77777777777777777777777777777777777.012345678901234
Test3_EXISTS_SUBQUERY	6	C	88888888888888888888888888888888888.901234567890123
Test3_EXISTS_SUBQUERY	9	C	99999999999999999999999999999999999.345678901234567
Test3_EXISTS_SUBQUERY	10	A	66666666666666666666666666666666666.111111111111111
-- !result
SELECT
    'Test4_IN_SUBQUERY' as test_name,
    id,
    category,
    d76_20
FROM decimal_main_test
WHERE d76_20 IN (
    SELECT d76_20 FROM decimal_main_test
    WHERE category = 'A'
    AND d76_20 > 100.00000000000000000000
)
ORDER BY d76_20;
-- result:
Test4_IN_SUBQUERY	7	A	11111111111111111111111111111111111111111111111111111111.23456789012345678901
Test4_IN_SUBQUERY	1	A	12345678901234567890123456789012345678901234567890123456.12345678901234567890
Test4_IN_SUBQUERY	10	A	66666666666666666666666666666666666666666666666666666666.11111111111111111111
Test4_IN_SUBQUERY	2	A	98765432109876543210987654321098765432109876543210987654.45678901234567890123
-- !result
WITH decimal_stats AS (
    SELECT
        category,
        AVG(d50_15) as avg_d50,
        AVG(d76_20) as avg_d76,
        COUNT(*) as cnt
    FROM decimal_main_test
    GROUP BY category
)
SELECT
    'Test6_BASIC_CTE' as test_name,
    ds.category,
    ds.avg_d50,
    ds.avg_d76,
    ds.cnt,
    mt.d50_15,
    mt.d50_15 - ds.avg_d50 as diff_from_cat_avg
FROM decimal_stats ds
JOIN decimal_main_test mt ON ds.category = mt.category
ORDER BY ds.category, mt.d50_15;
-- result:
Test6_BASIC_CTE	A	47222222197222222219722222221972221.981481200648148	47222222197222222219722222221972222222197222222219722221.98148120064814812006	4	11111111111111111111111111111111111.234567890123456	-36111111086111111108611111110861110.746913310524692
Test6_BASIC_CTE	A	47222222197222222219722222221972221.981481200648148	47222222197222222219722222221972222222197222222219722221.98148120064814812006	4	12345678901234567890123456789012345.123456789012345	-34876543295987654329598765432959876.858024411635803
Test6_BASIC_CTE	A	47222222197222222219722222221972221.981481200648148	47222222197222222219722222221972222222197222222219722221.98148120064814812006	4	66666666666666666666666666666666666.111111111111111	19444444469444444446944444444694444.129629910462963
Test6_BASIC_CTE	A	47222222197222222219722222221972221.981481200648148	47222222197222222219722222221972222222197222222219722221.98148120064814812006	4	98765432109876543210987654321098765.456789012345678	51543209912654320991265432099126543.475307811697530
Test6_BASIC_CTE	B	51851851851851851851851851851851851.826753086382675	51851851851851851851851851851851851851851851851851851851.82675308638267530863	3	22222222222222222222222222222222222.678901234567890	-29629629629629629629629629629629629.147851851814785
Test6_BASIC_CTE	B	51851851851851851851851851851851851.826753086382675	51851851851851851851851851851851851851851851851851851851.82675308638267530863	3	55555555555555555555555555555555555.789012345678901	3703703703703703703703703703703703.962259259296226
Test6_BASIC_CTE	B	51851851851851851851851851851851851.826753086382675	51851851851851851851851851851851851851851851851851851851.82675308638267530863	3	77777777777777777777777777777777777.012345678901234	25925925925925925925925925925925925.185592592518559
Test6_BASIC_CTE	C	77777777777777777777777777777777777.604934530860493	77777777777777777777777777777777777777777777777777777777.60493453086049345308	3	44444444444444444444444444444444444.567890123456789	-33333333333333333333333333333333333.037044407403704
Test6_BASIC_CTE	C	77777777777777777777777777777777777.604934530860493	77777777777777777777777777777777777777777777777777777777.60493453086049345308	3	88888888888888888888888888888888888.901234567890123	11111111111111111111111111111111111.296300037029630
Test6_BASIC_CTE	C	77777777777777777777777777777777777.604934530860493	77777777777777777777777777777777777777777777777777777777.60493453086049345308	3	99999999999999999999999999999999999.345678901234567	22222222222222222222222222222222221.740744370374074
-- !result
WITH category_stats AS (
    SELECT
        category,
        SUM(d50_15) as total_d50,
        MAX(d76_20) as max_d76
    FROM decimal_main_test
    GROUP BY category
),
threshold_data AS (
    SELECT
        ref_category,
        AVG(threshold_d50) as avg_threshold
    FROM decimal_secondary_test
    GROUP BY ref_category
)
SELECT
    'Test8_MULTIPLE_CTE' as test_name,
    cs.category,
    cs.total_d50,
    cs.max_d76,
    td.avg_threshold,
    CASE
        WHEN cs.total_d50 > td.avg_threshold * 3 THEN 'HIGH'
        WHEN cs.total_d50 > td.avg_threshold THEN 'MEDIUM'
        ELSE 'LOW'
    END as performance_level
FROM category_stats cs
LEFT JOIN threshold_data td ON cs.category = td.ref_category
ORDER BY cs.category;
-- result:
Test8_MULTIPLE_CTE	A	188888888788888888878888888887888887.925924802592590	98765432109876543210987654321098765432109876543210987654.45678901234567890123	50000000000000000000000000000000000.000000000000000	HIGH
Test8_MULTIPLE_CTE	B	155555555555555555555555555555555555.480259259148025	77777777777777777777777777777777777777777777777777777777.01234567890123456789	60000000000000000000000000000000000.000000000000000	MEDIUM
Test8_MULTIPLE_CTE	C	233333333333333333333333333333333332.814803592581479	99999999999999999999999999999999999999999999999999999999.34567890123456789012	70000000000000000000000000000000000.000000000000000	HIGH
-- !result