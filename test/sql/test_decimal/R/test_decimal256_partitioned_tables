-- name: test_decimal256_partitioned_tables
DROP DATABASE IF EXISTS test_decimal256_partition;
-- result:
-- !result
CREATE DATABASE test_decimal256_partition;
-- result:
-- !result
USE test_decimal256_partition;
-- result:
-- !result
CREATE TABLE decimal_range_partition (
    id BIGINT,
    transaction_date DATE,
    amount DECIMAL(50,15),
    balance DECIMAL(76,20),
    account_type VARCHAR(20)
)
DUPLICATE KEY(id, transaction_date)
PARTITION BY RANGE(transaction_date) (
    PARTITION p202401 VALUES [('2024-01-01'), ('2024-02-01')),
    PARTITION p202402 VALUES [('2024-02-01'), ('2024-03-01')),
    PARTITION p202403 VALUES [('2024-03-01'), ('2024-04-01')),
    PARTITION p202404 VALUES [('2024-04-01'), ('2024-05-01'))
)
DISTRIBUTED BY HASH(id) BUCKETS 3
PROPERTIES (
    "replication_num" = "1"
);
-- result:
-- !result
INSERT INTO decimal_range_partition VALUES
(1, '2024-01-15', 12345678901234567890123456789012345.123456789012345, 12345678901234567890123456789012345678901234567890123456.12345678901234567890, 'SAVINGS'),
(2, '2024-01-20', -55555555555555555555555555555555555.987654321098765, 55555555555555555555555555555555555555555555555555555555.13579246801357924680, 'CHECKING'),
(3, '2024-01-25', 98765432109876543210987654321098765.555555555555555, 98765432109876543210987654321098765432109876543210987654.99999999999999999999, 'INVESTMENT'),

(4, '2024-02-10', 77777777777777777777777777777777777.777777777777777, 77777777777777777777777777777777777777777777777777777777.77777777777777777777, 'SAVINGS'),
(5, '2024-02-15', -44444444444444444444444444444444444.111111111111111, 44444444444444444444444444444444444444444444444444444444.66666666666666666666, 'CHECKING'),
(6, '2024-02-28', 88888888888888888888888888888888888.999999999999999, 88888888888888888888888888888888888888888888888888888888.65432109876543210987, 'INVESTMENT'),

(7, '2024-03-05', 11111111111111111111111111111111111.250000000000000, 11111111111111111111111111111111111111111111111111111111.90400000000000000000, 'SAVINGS'),
(8, '2024-03-12', -22222222222222222222222222222222222.125000000000000, 22222222222222222222222222222222222222222222222222222222.77900000000000000000, 'CHECKING'),
(9, '2024-03-25', 99999888887777766666555554444433333.000000000000001, 99999888887777766666555554444433333222221111100009999988.77900000000000000001, 'INVESTMENT'),

(10, '2024-04-08', 33333333333333333333333333333333333.888888888888888, 33333333333333333333333333333333333333333333333333333333.66788888888888888889, 'SAVINGS'),
(11, '2024-04-15', -66666666666666666666666666666666666.333333333333333, 66666666666666666666666666666666666666666666666666666666.33455555555555555556, 'CHECKING'),
(12, '2024-04-30', 77777666665555544444333332222211111.000000000000000, 77777666665555544444333332222211111000009999988888777776.33455555555555555556, 'INVESTMENT');
-- result:
-- !result
SELECT
    'Test1_PARTITION_BASIC_QUERY' as test_name,
    DATE_FORMAT(transaction_date, '%Y-%m') as month,
    COUNT(*) as transaction_count,
    SUM(amount) as total_amount,
    AVG(balance) as avg_balance,
    MAX(amount) as max_amount,
    MIN(amount) as min_amount
FROM decimal_range_partition
GROUP BY DATE_FORMAT(transaction_date, '%Y-%m')
ORDER BY month;
-- result:
Test1_PARTITION_BASIC_QUERY	2024-01	3	55555555455555555545555555554555554.691358023469135	55555555522222222218888888888555555555522222222218888888.75308308567530830856	98765432109876543210987654321098765.555555555555555	-55555555555555555555555555555555555.987654321098765
Test1_PARTITION_BASIC_QUERY	2024-02	3	122222222222222222222222222222222222.666666666666665	70370370370370370370370370370370370370370370370370370370.36625518106995885143	88888888888888888888888888888888888.999999999999999	-44444444444444444444444444444444444.111111111111111
Test1_PARTITION_BASIC_QUERY	2024-03	3	88888777776666655555444443333322222.125000000000001	44444407407037033333296295925922222185184814811114444441.15400000000000000000	99999888887777766666555554444433333.000000000000001	-22222222222222222222222222222222222.125000000000000
Test1_PARTITION_BASIC_QUERY	2024-04	3	44444333332222211110999998888877778.555555555555555	59259222221851848148111110740737037000003333329629592592.11233333333333333334	77777666665555544444333332222211111.000000000000000	-66666666666666666666666666666666666.333333333333333
-- !result
SELECT
    'Test2_SINGLE_PARTITION_QUERY' as test_name,
    id,
    transaction_date,
    amount,
    balance,
    account_type
FROM decimal_range_partition
WHERE transaction_date >= '2024-02-01' AND transaction_date < '2024-03-01'
ORDER BY transaction_date;
-- result:
Test2_SINGLE_PARTITION_QUERY	4	2024-02-10	77777777777777777777777777777777777.777777777777777	77777777777777777777777777777777777777777777777777777777.77777777777777777777	SAVINGS
Test2_SINGLE_PARTITION_QUERY	5	2024-02-15	-44444444444444444444444444444444444.111111111111111	44444444444444444444444444444444444444444444444444444444.66666666666666666666	CHECKING
Test2_SINGLE_PARTITION_QUERY	6	2024-02-28	88888888888888888888888888888888888.999999999999999	88888888888888888888888888888888888888888888888888888888.65432109876543210987	INVESTMENT
-- !result
SELECT
    'Test3_CROSS_PARTITION_AGGREGATION' as test_name,
    account_type,
    COUNT(*) as transaction_count,
    SUM(amount) as total_amount,
    AVG(amount) as avg_amount,
    SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END) as total_deposits,
    SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END) as total_withdrawals
FROM decimal_range_partition
GROUP BY account_type
ORDER BY account_type;
-- result:
Test3_CROSS_PARTITION_AGGREGATION	CHECKING	4	-188888888888888888888888888888888888.557098765543209	-47222222222222222222222222222222222.139274691385802	0E-15	188888888888888888888888888888888888.557098765543209
Test3_CROSS_PARTITION_AGGREGATION	INVESTMENT	4	365431876552098743210765429876632098.555555555555555	91357969138024685802691357469158024.638888888888889	365431876552098743210765429876632098.555555555555555	0E-15
Test3_CROSS_PARTITION_AGGREGATION	SAVINGS	4	134567901123456790112345679011234568.040123455679010	33641975280864197528086419752808642.010030863919753	134567901123456790112345679011234568.040123455679010	0E-15
-- !result
CREATE TABLE decimal_amount_partition (
    id BIGINT,
    customer_id INT,
    amount DECIMAL(50,15),
    large_amount DECIMAL(76,0),
    category VARCHAR(20),
    amount_range STRING
)
DUPLICATE KEY(id, customer_id)
PARTITION BY LIST(amount_range) (
    PARTITION p_small VALUES IN ('SMALL'),
    PARTITION p_medium VALUES IN ('MEDIUM'),
    PARTITION p_large VALUES IN ('LARGE'),
    PARTITION p_xlarge VALUES IN ('XLARGE')
)
DISTRIBUTED BY HASH(customer_id) BUCKETS 3
PROPERTIES (
    "replication_num" = "1"
);
-- result:
-- !result
INSERT INTO decimal_amount_partition VALUES
(1, 101, 12345678901234567890123456789012345.123456789012345, 12345678901234567, 'RETAIL', 'SMALL'),
(2, 102, 98765432109876543210987654321098765.987654321098765, 98765432109876543, 'ONLINE', 'SMALL'),
(3, 103, 55555555555555555555555555555555555.999999999999999, 55555555555555555, 'RETAIL', 'SMALL'),

(4, 201, 1234567890123456789012345678901234.555555555555, 1234567890123456789012345678901234567890123456789012345678901234567890, 'WHOLESALE', 'MEDIUM'),
(5, 202, 9876543210987654321098765432109876.777777777777, 9876543210987654321098765432109876543210987654321098765432109876543210, 'ENTERPRISE', 'MEDIUM'),
(6, 203, 5555555555555555555555555555555555.888888888888, 5555555555555555555555555555555555555555555555555555555555555555555555, 'WHOLESALE', 'MEDIUM'),

(7, 301, 12345678901234567890123456789012.123456789012345, 123456789012345, 'ENTERPRISE', 'LARGE'),
(8, 302, 98765432109876543210987654321098.999999999999999, 987654321098765, 'GOVERNMENT', 'LARGE'),
(9, 303, 77777777777777777777777777777777.111111111111111, 777777777777777, 'ENTERPRISE', 'LARGE');
-- result:
-- !result
SELECT
    'Test4_LIST_PARTITION_AGGREGATION' as test_name,
    amount_range,
    category,
    COUNT(*) as count,
    SUM(amount) as total_amount,
    AVG(amount) as avg_amount,
    MIN(amount) as min_amount,
    MAX(amount) as max_amount
FROM decimal_amount_partition
GROUP BY amount_range, category
ORDER BY amount_range, category;
-- result:
Test4_LIST_PARTITION_AGGREGATION	LARGE	ENTERPRISE	2	90123456679012345667901234566789.234567900123456	45061728339506172833950617283394.617283950061728	12345678901234567890123456789012.123456789012345	77777777777777777777777777777777.111111111111111
Test4_LIST_PARTITION_AGGREGATION	LARGE	GOVERNMENT	1	98765432109876543210987654321098.999999999999999	98765432109876543210987654321098.999999999999999	98765432109876543210987654321098.999999999999999	98765432109876543210987654321098.999999999999999
Test4_LIST_PARTITION_AGGREGATION	MEDIUM	ENTERPRISE	1	9876543210987654321098765432109876.777777777777000	9876543210987654321098765432109876.777777777777000	9876543210987654321098765432109876.777777777777000	9876543210987654321098765432109876.777777777777000
Test4_LIST_PARTITION_AGGREGATION	MEDIUM	WHOLESALE	2	6790123445679012344567901234456790.444444444443000	3395061722839506172283950617228395.222222222221500	1234567890123456789012345678901234.555555555555000	5555555555555555555555555555555555.888888888888000
Test4_LIST_PARTITION_AGGREGATION	SMALL	ONLINE	1	98765432109876543210987654321098765.987654321098765	98765432109876543210987654321098765.987654321098765	98765432109876543210987654321098765.987654321098765	98765432109876543210987654321098765.987654321098765
Test4_LIST_PARTITION_AGGREGATION	SMALL	RETAIL	2	67901234456790123445679012344567901.123456789012344	33950617228395061722839506172283950.561728394506172	12345678901234567890123456789012345.123456789012345	55555555555555555555555555555555555.999999999999999
-- !result
SELECT
    'Test5_PARTITION_PRUNING_SPECIFIC' as test_name,
    id,
    customer_id,
    amount,
    large_amount,
    category
FROM decimal_amount_partition
WHERE amount_range = 'LARGE'
ORDER BY amount DESC;
-- result:
Test5_PARTITION_PRUNING_SPECIFIC	8	302	98765432109876543210987654321098.999999999999999	987654321098765	GOVERNMENT
Test5_PARTITION_PRUNING_SPECIFIC	9	303	77777777777777777777777777777777.111111111111111	777777777777777	ENTERPRISE
Test5_PARTITION_PRUNING_SPECIFIC	7	301	12345678901234567890123456789012.123456789012345	123456789012345	ENTERPRISE
-- !result
ALTER TABLE decimal_range_partition 
ADD PARTITION p202405 VALUES [('2024-05-01'), ('2024-06-01'));
-- result:
-- !result
INSERT INTO decimal_range_partition VALUES
(13, '2024-05-10', 888887777766666555554444433.123456789012345, 8888877777666665555544444333332222211111.45800234567890123456, 'SAVINGS'),
(14, '2024-05-20', -11111222223333344444555556.987654321098765, 1111122222333334444455555666667777788888.47034913469124801235, 'CHECKING'),
(15, '2024-05-31', 999999999999999999999999999.000000000000000, 9999999999999999999999999999999999999999.47034913469124801235, 'INVESTMENT');
-- result:
-- !result
SELECT
    'Test7_ALL_PARTITIONS_INCLUDING_NEW' as test_name,
    DATE_FORMAT(transaction_date, '%Y-%m') as month,
    COUNT(*) as transaction_count,
    SUM(amount) as total_amount,
    AVG(balance) as avg_balance
FROM decimal_range_partition
GROUP BY DATE_FORMAT(transaction_date, '%Y-%m')
ORDER BY month;
-- result:
Test7_ALL_PARTITIONS_INCLUDING_NEW	2024-01	3	55555555455555555545555555554555554.691358023469135	55555555522222222218888888888555555555522222222218888888.75308308567530830856
Test7_ALL_PARTITIONS_INCLUDING_NEW	2024-02	3	122222222222222222222222222222222222.666666666666665	70370370370370370370370370370370370370370370370370370370.36625518106995885143
Test7_ALL_PARTITIONS_INCLUDING_NEW	2024-03	3	88888777776666655555444443333322222.125000000000001	44444407407037033333296295925922222185184814811114444441.15400000000000000000
Test7_ALL_PARTITIONS_INCLUDING_NEW	2024-04	3	44444333332222211110999998888877778.555555555555555	59259222221851848148111110740737037000003333329629592592.11233333333333333334
Test7_ALL_PARTITIONS_INCLUDING_NEW	2024-05	3	1877776555543333211109888875.135802467913580	6666666666666666666666666666666666666666.46623353835379908642
-- !result
SELECT
    'Test8_PARTITION_WINDOW_FUNCTIONS' as test_name,
    id,
    transaction_date,
    amount,
    balance,
    account_type,
    ROW_NUMBER() OVER (PARTITION BY DATE_FORMAT(transaction_date, '%Y-%m') ORDER BY amount DESC) as rank_in_month,
    SUM(amount) OVER (PARTITION BY account_type ORDER BY transaction_date) as running_total_by_type,
    LAG(balance, 1) OVER (PARTITION BY account_type ORDER BY transaction_date) as prev_balance
FROM decimal_range_partition
ORDER BY transaction_date, account_type;
-- result:
Test8_PARTITION_WINDOW_FUNCTIONS	1	2024-01-15	12345678901234567890123456789012345.123456789012345	12345678901234567890123456789012345678901234567890123456.12345678901234567890	SAVINGS	2	12345678901234567890123456789012345.123456789012345	None
Test8_PARTITION_WINDOW_FUNCTIONS	2	2024-01-20	-55555555555555555555555555555555555.987654321098765	55555555555555555555555555555555555555555555555555555555.13579246801357924680	CHECKING	3	-55555555555555555555555555555555555.987654321098765	None
Test8_PARTITION_WINDOW_FUNCTIONS	3	2024-01-25	98765432109876543210987654321098765.555555555555555	98765432109876543210987654321098765432109876543210987654.99999999999999999999	INVESTMENT	1	98765432109876543210987654321098765.555555555555555	None
Test8_PARTITION_WINDOW_FUNCTIONS	4	2024-02-10	77777777777777777777777777777777777.777777777777777	77777777777777777777777777777777777777777777777777777777.77777777777777777777	SAVINGS	2	90123456679012345667901234566790122.901234566790122	12345678901234567890123456789012345678901234567890123456.12345678901234567890
Test8_PARTITION_WINDOW_FUNCTIONS	5	2024-02-15	-44444444444444444444444444444444444.111111111111111	44444444444444444444444444444444444444444444444444444444.66666666666666666666	CHECKING	3	-100000000000000000000000000000000000.098765432209876	55555555555555555555555555555555555555555555555555555555.13579246801357924680
Test8_PARTITION_WINDOW_FUNCTIONS	6	2024-02-28	88888888888888888888888888888888888.999999999999999	88888888888888888888888888888888888888888888888888888888.65432109876543210987	INVESTMENT	1	187654320998765432099876543209987654.555555555555554	98765432109876543210987654321098765432109876543210987654.99999999999999999999
Test8_PARTITION_WINDOW_FUNCTIONS	7	2024-03-05	11111111111111111111111111111111111.250000000000000	11111111111111111111111111111111111111111111111111111111.90400000000000000000	SAVINGS	2	101234567790123456779012345677901234.151234566790122	77777777777777777777777777777777777777777777777777777777.77777777777777777777
Test8_PARTITION_WINDOW_FUNCTIONS	8	2024-03-12	-22222222222222222222222222222222222.125000000000000	22222222222222222222222222222222222222222222222222222222.77900000000000000000	CHECKING	3	-122222222222222222222222222222222222.223765432209876	44444444444444444444444444444444444444444444444444444444.66666666666666666666
Test8_PARTITION_WINDOW_FUNCTIONS	9	2024-03-25	99999888887777766666555554444433333.000000000000001	99999888887777766666555554444433333222221111100009999988.77900000000000000001	INVESTMENT	1	287654209886543198766432097654420987.555555555555555	88888888888888888888888888888888888888888888888888888888.65432109876543210987
Test8_PARTITION_WINDOW_FUNCTIONS	10	2024-04-08	33333333333333333333333333333333333.888888888888888	33333333333333333333333333333333333333333333333333333333.66788888888888888889	SAVINGS	2	134567901123456790112345679011234568.040123455679010	11111111111111111111111111111111111111111111111111111111.90400000000000000000
Test8_PARTITION_WINDOW_FUNCTIONS	11	2024-04-15	-66666666666666666666666666666666666.333333333333333	66666666666666666666666666666666666666666666666666666666.33455555555555555556	CHECKING	3	-188888888888888888888888888888888888.557098765543209	22222222222222222222222222222222222222222222222222222222.77900000000000000000
Test8_PARTITION_WINDOW_FUNCTIONS	12	2024-04-30	77777666665555544444333332222211111.000000000000000	77777666665555544444333332222211111000009999988888777776.33455555555555555556	INVESTMENT	1	365431876552098743210765429876632098.555555555555555	99999888887777766666555554444433333222221111100009999988.77900000000000000001
Test8_PARTITION_WINDOW_FUNCTIONS	13	2024-05-10	888887777766666555554444433.123456789012345	8888877777666665555544444333332222211111.45800234567890123456	SAVINGS	2	134567902012344567879012234565679001.163580244691355	33333333333333333333333333333333333333333333333333333333.66788888888888888889
Test8_PARTITION_WINDOW_FUNCTIONS	14	2024-05-20	-11111222223333344444555556.987654321098765	1111122222333334444455555666667777788888.47034913469124801235	CHECKING	3	-188888888900000111112222233333444445.544753086641974	66666666666666666666666666666666666666666666666666666666.33455555555555555556
Test8_PARTITION_WINDOW_FUNCTIONS	15	2024-05-31	999999999999999999999999999.000000000000000	9999999999999999999999999999999999999999.47034913469124801235	INVESTMENT	1	365431877552098743210765429876632097.555555555555555	77777666665555544444333332222211111000009999988888777776.33455555555555555556
-- !result
WITH monthly_stats AS (
    SELECT
        DATE_FORMAT(transaction_date, '%Y-%m') as month,
        account_type,
        SUM(amount) as monthly_total,
        COUNT(*) as monthly_count
    FROM decimal_range_partition
    GROUP BY DATE_FORMAT(transaction_date, '%Y-%m'), account_type
)
SELECT
    'Test9_CROSS_PARTITION_JOINS' as test_name,
    dp.transaction_date,
    dp.amount,
    dp.account_type,
    ms.monthly_total,
    dp.amount / ms.monthly_total * 100 as percent_of_monthly_total
FROM decimal_range_partition dp
JOIN monthly_stats ms ON DATE_FORMAT(dp.transaction_date, '%Y-%m') = ms.month 
    AND dp.account_type = ms.account_type
WHERE ABS(dp.amount) > 1000.000000000000000
ORDER BY dp.transaction_date;
-- result:
Test9_CROSS_PARTITION_JOINS	2024-01-15	12345678901234567890123456789012345.123456789012345	SAVINGS	12345678901234567890123456789012345.123456789012345	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-01-20	-55555555555555555555555555555555555.987654321098765	CHECKING	-55555555555555555555555555555555555.987654321098765	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-01-25	98765432109876543210987654321098765.555555555555555	INVESTMENT	98765432109876543210987654321098765.555555555555555	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-02-10	77777777777777777777777777777777777.777777777777777	SAVINGS	77777777777777777777777777777777777.777777777777777	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-02-15	-44444444444444444444444444444444444.111111111111111	CHECKING	-44444444444444444444444444444444444.111111111111111	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-02-28	88888888888888888888888888888888888.999999999999999	INVESTMENT	88888888888888888888888888888888888.999999999999999	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-03-05	11111111111111111111111111111111111.250000000000000	SAVINGS	11111111111111111111111111111111111.250000000000000	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-03-12	-22222222222222222222222222222222222.125000000000000	CHECKING	-22222222222222222222222222222222222.125000000000000	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-03-25	99999888887777766666555554444433333.000000000000001	INVESTMENT	99999888887777766666555554444433333.000000000000001	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-04-08	33333333333333333333333333333333333.888888888888888	SAVINGS	33333333333333333333333333333333333.888888888888888	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-04-15	-66666666666666666666666666666666666.333333333333333	CHECKING	-66666666666666666666666666666666666.333333333333333	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-04-30	77777666665555544444333332222211111.000000000000000	INVESTMENT	77777666665555544444333332222211111.000000000000000	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-05-10	888887777766666555554444433.123456789012345	SAVINGS	888887777766666555554444433.123456789012345	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-05-20	-11111222223333344444555556.987654321098765	CHECKING	-11111222223333344444555556.987654321098765	100.000000000000000
Test9_CROSS_PARTITION_JOINS	2024-05-31	999999999999999999999999999.000000000000000	INVESTMENT	999999999999999999999999999.000000000000000	100.000000000000000
-- !result
SELECT
    'Test10_PARTITION_INFORMATION' as test_name,
    DATE_FORMAT(transaction_date, '%Y-%m') as partition_month,
    COUNT(*) as row_count,
    SUM(CASE WHEN amount > 0 THEN 1 ELSE 0 END) as positive_transactions,
    SUM(CASE WHEN amount < 0 THEN 1 ELSE 0 END) as negative_transactions,
    MIN(balance) as min_balance_in_partition,
    MAX(balance) as max_balance_in_partition
FROM decimal_range_partition
GROUP BY DATE_FORMAT(transaction_date, '%Y-%m')
ORDER BY partition_month;
-- result:
Test10_PARTITION_INFORMATION	2024-01	3	2	1	12345678901234567890123456789012345678901234567890123456.12345678901234567890	98765432109876543210987654321098765432109876543210987654.99999999999999999999
Test10_PARTITION_INFORMATION	2024-02	3	2	1	44444444444444444444444444444444444444444444444444444444.66666666666666666666	88888888888888888888888888888888888888888888888888888888.65432109876543210987
Test10_PARTITION_INFORMATION	2024-03	3	2	1	11111111111111111111111111111111111111111111111111111111.90400000000000000000	99999888887777766666555554444433333222221111100009999988.77900000000000000001
Test10_PARTITION_INFORMATION	2024-04	3	2	1	33333333333333333333333333333333333333333333333333333333.66788888888888888889	77777666665555544444333332222211111000009999988888777776.33455555555555555556
Test10_PARTITION_INFORMATION	2024-05	3	2	1	1111122222333334444455555666667777788888.47034913469124801235	9999999999999999999999999999999999999999.47034913469124801235
-- !result