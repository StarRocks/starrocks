-- name: test_decimal256_complex_types
DROP DATABASE IF EXISTS test_decimal256_complex;
-- result:
-- !result
CREATE DATABASE test_decimal256_complex;
-- result:
-- !result
USE test_decimal256_complex;
-- result:
-- !result
CREATE TABLE decimal_array_test (
    id INT,
    decimal_array_50 ARRAY<DECIMAL(50,15)>,
    decimal_array_76 ARRAY<DECIMAL(76,20)>,
    simple_decimals ARRAY<DECIMAL(40,10)>
) PROPERTIES("replication_num"="1");
-- result:
-- !result
INSERT INTO decimal_array_test VALUES
(1, [12345678901234567890123456789012345.123456789012345, 98765432109876543210987654321098765.456789012345678, 55555555555555555555555555555555555.789012345678901], 
    [12345678901234567890123456789012345678901234567890123456.12345678901234567890, 98765432109876543210987654321098765432109876543210987654.45678901234567890123, 55555555555555555555555555555555555555555555555555555555.78901234567890123456],
    [12345678901234567890123456789.1234567890, 98765432109876543210987654321.2345678901, 55555555555555555555555555555.3456789012]),
(2, [77777777777777777777777777777777777.999999999999999, -44444444444444444444444444444444444.123456789012345, 0.000000000000001],
    [77777777777777777777777777777777777777777777777777777777.99999999999999999999, -44444444444444444444444444444444444444444444444444444444.12345678901234567890, 0.00000000000000000001],
    [77777777777777777777777777777.9999999999, -44444444444444444444444444444.1234567890, 0.0000000001]),
(3, [99999888887777766666555554444433333.999999999999999],
    [99999888887777766666555554444433333222221111100009999988.99999999999999999999],
    [99999888887777766666555554444.9999999999]),
(4, [], [], []),
(5, [0.000000000000001, -0.000000000000001, 11111111111111111111111111111111111.0, -22222222222222222222222222222222222.0],
    [0.00000000000000000001, -0.00000000000000000001, 11111111111111111111111111111111111111111111111111111111.0, -22222222222222222222222222222222222222222222222222222222.0],
    [0.0000000001, -0.0000000001, 11111111111111111111111111111.0, -22222222222222222222222222222.0]);
-- result:
-- !result
SELECT
    'Test1_ARRAY_BASIC_OPERATIONS' as test_name,
    id,
    decimal_array_50,
    CARDINALITY(decimal_array_50) as array_size,
    decimal_array_50[1] as first_element,
    decimal_array_50[CARDINALITY(decimal_array_50)] as last_element
FROM decimal_array_test
ORDER BY id;
-- result:
Test1_ARRAY_BASIC_OPERATIONS	1	[12345678901234567890123456789012345.123456789012345,98765432109876543210987654321098765.456789012345678,55555555555555555555555555555555555.789012345678901]	3	12345678901234567890123456789012345.123456789012345	55555555555555555555555555555555555.789012345678901
Test1_ARRAY_BASIC_OPERATIONS	2	[77777777777777777777777777777777777.999999999999999,-44444444444444444444444444444444444.123456789012345,0.000000000000001]	3	77777777777777777777777777777777777.999999999999999	1E-15
Test1_ARRAY_BASIC_OPERATIONS	3	[99999888887777766666555554444433333.999999999999999]	1	99999888887777766666555554444433333.999999999999999	99999888887777766666555554444433333.999999999999999
Test1_ARRAY_BASIC_OPERATIONS	4	[]	0	None	None
Test1_ARRAY_BASIC_OPERATIONS	5	[0.000000000000001,-0.000000000000001,11111111111111110000000000000000000.000000000000000,-22222222222222220000000000000000000.000000000000000]	4	1E-15	-22222222222222220000000000000000000.000000000000000
-- !result
SELECT
    'Test2_ARRAY_ELEMENT_ACCESS' as test_name,
    id,
    simple_decimals,
    simple_decimals[1] as first_decimal,
    simple_decimals[2] as second_decimal,
    simple_decimals[3] as third_decimal
FROM decimal_array_test
WHERE CARDINALITY(simple_decimals) >= 2
ORDER BY id;
-- result:
Test2_ARRAY_ELEMENT_ACCESS	1	[12345678901234567890123456789.1234567890,98765432109876543210987654321.2345678901,55555555555555555555555555555.3456789012]	12345678901234567890123456789.1234567890	98765432109876543210987654321.2345678901	55555555555555555555555555555.3456789012
Test2_ARRAY_ELEMENT_ACCESS	2	[77777777777777777777777777777.9999999999,-44444444444444444444444444444.1234567890,0.0000000001]	77777777777777777777777777777.9999999999	-44444444444444444444444444444.1234567890	1E-10
Test2_ARRAY_ELEMENT_ACCESS	5	[0.0000000001,-0.0000000001,11111111111111112000000000000.0000000000,-22222222222222224000000000000.0000000000]	1E-10	-1E-10	11111111111111112000000000000.0000000000
-- !result
CREATE TABLE decimal_map_test (
    id INT,
    decimal_map_50 MAP<STRING, DECIMAL(50,15)>,
    decimal_map_76 MAP<STRING, DECIMAL(76,0)>,
    key_decimal_map MAP<DECIMAL(40,10), STRING>
) PROPERTIES("replication_num"="1");
-- result:
-- !result
INSERT INTO decimal_map_test VALUES
(1, MAP{'price': 12345678901234567890123456789012345.123456789012345, 'cost': 98765432109876543210987654321098765.456789012345678, 'profit': 55555555555555555555555555555555555.666666666666666},
    MAP{'large_num1': 1234567890123456789012345678901234567890123456789012345678901234567890123456, 'large_num2': 9876543210987654321098765432109876543210987654321098765432109876543210987654},
    MAP{12345678901234567890123456789.1234567890: 'huge_ten', 98765432109876543210987654321.2345678901: 'huge_twenty', 55555555555555555555555555555.3456789012: 'huge_thirty'}),
(2, MAP{'balance': -77777777777777777777777777777777777.999999999999999, 'limit': 88888888888888888888888888888888888.000000000000000, 'available': 44444444444444444444444444444444444.000000000000000},
    MAP{'negative': -9999988888777776666655555444443333322222111110000099999888877776666555544, 'zero': 0, 'positive': 8888877777666665555544444333332222211111000009999988888777766665555444433},
    MAP{-77777777777777777777777777777.9876543210: 'huge_negative', 0.0000000000: 'zero', 88888888888888888888888888888.1111111111: 'huge_positive'}),
(3, MAP{},
    MAP{},
    MAP{}),
(4, MAP{'small': 0.000000000000001, 'tiny': 0.000000000000000},
    MAP{'one': 1, 'max': 9999988888777776666655555444443333322222111110000099999888877776666555544},
    MAP{0.0000000001: 'very_small', 99999888887777766666555554444.9999999999: 'very_large'});
-- result:
-- !result
SELECT
    'Test4_MAP_BASIC_OPERATIONS' as test_name,
    id,
    decimal_map_50,
    MAP_SIZE(decimal_map_50) as map_size,
    decimal_map_50['price'] as price_value,
    MAP_KEYS(decimal_map_50) as all_keys,
    MAP_VALUES(decimal_map_50) as all_values
FROM decimal_map_test
ORDER BY id;
-- result:
Test4_MAP_BASIC_OPERATIONS	1	{"cost":98765432109876543210987654321098765.456789012345678,"price":12345678901234567890123456789012345.123456789012345,"profit":55555555555555555555555555555555555.666666666666666}	3	12345678901234567890123456789012345.123456789012345	["cost","price","profit"]	[98765432109876543210987654321098765.456789012345678,12345678901234567890123456789012345.123456789012345,55555555555555555555555555555555555.666666666666666]
Test4_MAP_BASIC_OPERATIONS	2	{"available":44444444444444444444444444444444444.000000000000000,"balance":-77777777777777777777777777777777777.999999999999999,"limit":88888888888888888888888888888888888.000000000000000}	3	None	["available","balance","limit"]	[44444444444444444444444444444444444.000000000000000,-77777777777777777777777777777777777.999999999999999,88888888888888888888888888888888888.000000000000000]
Test4_MAP_BASIC_OPERATIONS	3	{}	0	None	[]	[]
Test4_MAP_BASIC_OPERATIONS	4	{"small":0.000000000000001,"tiny":0.000000000000000}	2	None	["small","tiny"]	[0.000000000000001,0.000000000000000]
-- !result
SELECT
    'Test5_MAP_LARGE_DECIMALS' as test_name,
    id,
    decimal_map_76,
    MAP_SIZE(decimal_map_76) as map_size,
    decimal_map_76['large_num1'] as large_value1,
    decimal_map_76['negative'] as negative_value
FROM decimal_map_test
WHERE MAP_SIZE(decimal_map_76) > 0
ORDER BY id;
-- result:
Test5_MAP_LARGE_DECIMALS	1	{"large_num1":1234567890123456789012345678901234567890123456789012345678901234567890123456,"large_num2":9876543210987654321098765432109876543210987654321098765432109876543210987654}	2	1234567890123456789012345678901234567890123456789012345678901234567890123456	None
Test5_MAP_LARGE_DECIMALS	2	{"negative":-9999988888777776666655555444443333322222111110000099999888877776666555544,"positive":8888877777666665555544444333332222211111000009999988888777766665555444433,"zero":0}	3	None	-9999988888777776666655555444443333322222111110000099999888877776666555544
Test5_MAP_LARGE_DECIMALS	4	{"max":9999988888777776666655555444443333322222111110000099999888877776666555544,"one":1}	2	None	None
-- !result
SELECT
    'Test6_MAP_DECIMAL_KEYS' as test_name,
    id,
    key_decimal_map,
    MAP_SIZE(key_decimal_map) as map_size,
    key_decimal_map[12345678901234567890123456789.1234567890] as value_for_key,
    MAP_KEYS(key_decimal_map) as decimal_keys
FROM decimal_map_test
WHERE MAP_SIZE(key_decimal_map) > 0
ORDER BY id;
-- result:
Test6_MAP_DECIMAL_KEYS	1	{12345678901234567890123456789.1234567890:"huge_ten",55555555555555555555555555555.3456789012:"huge_thirty",98765432109876543210987654321.2345678901:"huge_twenty"}	3	huge_ten	[12345678901234567890123456789.1234567890,55555555555555555555555555555.3456789012,98765432109876543210987654321.2345678901]
Test6_MAP_DECIMAL_KEYS	2	{-77777777777777777777777777777.9876543210:"huge_negative",0.0000000000:"zero",88888888888888888888888888888.1111111111:"huge_positive"}	3	None	[-77777777777777777777777777777.9876543210,0.0000000000,88888888888888888888888888888.1111111111]
Test6_MAP_DECIMAL_KEYS	4	{0.0000000001:"very_small",99999888887777766666555554444.9999999999:"very_large"}	2	None	[0.0000000001,99999888887777766666555554444.9999999999]
-- !result
CREATE TABLE decimal_struct_test (
    id INT,
    financial_data STRUCT<
        balance DECIMAL(50,15),
        credit_limit DECIMAL(50,15),
        interest_rate DECIMAL(40,10)
    >,
    large_numbers STRUCT<
        max_value DECIMAL(76,0),
        min_value DECIMAL(76,0),
        precision_value DECIMAL(76,38)
    >,
    account_info STRUCT<
        account_id BIGINT,
        balance DECIMAL(50,15),
        metadata STRUCT<
            created_date STRING,
            last_transaction DECIMAL(40,10)
        >
    >
) PROPERTIES("replication_num"="1");
-- result:
-- !result
INSERT INTO decimal_struct_test VALUES
(1, ROW(12345678901234567890123456789012345.123456789012345, 98765432109876543210987654321098765.000000000000000, 77777777777777777777777777777.5000000000),
    ROW(9999988888777776666655555444443333322222111110000099999888877776666555544, -8888877777666665555544444333332222211111000009999988888777766665555444433, 12345678901234567890123456.45678901234567890123456789012345678901),
    ROW(12345, 77777777777777777777777777777777777.750000000000000, ROW('2024-01-01', 55555555555555555555555555555.2500000000))),
(2, ROW(-44444444444444444444444444444444444.999999999999999, 66666666666666666666666666666666666.000000000000000, 33333333333333333333333333333.9999999999),
    ROW(1234567890123456789012345678901234567890123456789012345678901234567890123456, 0, -99988877766655544433322211100.99999999999999999999999999999999999999),
    ROW(67890, -22222222222222222222222222222222222.250000000000000, ROW('2024-02-15', -11111111111111111111111111111.7500000000))),
(3, ROW(0.000000000000001, 0.000000000000000, 0.0000000001),
    ROW(1, -1, 0.00000000000000000000000000000000000001),
    ROW(11111, 0.000000000000001, ROW('2024-03-30', 0.0100000000))),
(4, NULL,
    NULL,
    ROW(99999, 88888777776666655555444443333322222.999999999999999, ROW('2024-12-31', 77777666665555544444333332222.9999999999)));
-- result:
-- !result
SELECT
    'Test7_STRUCT_FIELD_ACCESS' as test_name,
    id,
    financial_data,
    financial_data.balance as balance,
    financial_data.credit_limit as credit_limit,
    financial_data.interest_rate as interest_rate,
    financial_data.balance + financial_data.credit_limit as total_available
FROM decimal_struct_test
WHERE financial_data IS NOT NULL
ORDER BY id;
-- result:
Test7_STRUCT_FIELD_ACCESS	1	{"balance":12345678901234567890123456789012345.123456789012345,"credit_limit":98765432109876543210987654321098765.000000000000000,"interest_rate":77777777777777777777777777777.5000000000}	12345678901234567890123456789012345.123456789012345	98765432109876543210987654321098765.000000000000000	77777777777777777777777777777.5000000000	111111111011111111101111111110111110.123456789012345
Test7_STRUCT_FIELD_ACCESS	2	{"balance":-44444444444444444444444444444444444.999999999999999,"credit_limit":66666666666666666666666666666666666.000000000000000,"interest_rate":33333333333333333333333333333.9999999999}	-44444444444444444444444444444444444.999999999999999	66666666666666666666666666666666666.000000000000000	33333333333333333333333333333.9999999999	22222222222222222222222222222222221.000000000000001
Test7_STRUCT_FIELD_ACCESS	3	{"balance":0.000000000000001,"credit_limit":0.000000000000000,"interest_rate":0.0000000001}	1E-15	0E-15	1E-10	1E-15
-- !result
SELECT
    'Test8_NESTED_STRUCT_OPERATIONS' as test_name,
    id,
    account_info,
    account_info.account_id as account_id,
    account_info.balance as account_balance,
    account_info.metadata.created_date as created_date,
    account_info.metadata.last_transaction as last_transaction,
    account_info.balance - account_info.metadata.last_transaction as net_balance
FROM decimal_struct_test
WHERE account_info IS NOT NULL
ORDER BY id;
-- result:
Test8_NESTED_STRUCT_OPERATIONS	1	{"account_id":12345,"balance":77777777777777777777777777777777777.750000000000000,"metadata":{"created_date":"2024-01-01","last_transaction":55555555555555555555555555555.2500000000}}	12345	77777777777777777777777777777777777.750000000000000	2024-01-01	55555555555555555555555555555.2500000000	77777722222222222222222222222222222.500000000000000
Test8_NESTED_STRUCT_OPERATIONS	2	{"account_id":67890,"balance":-22222222222222222222222222222222222.250000000000000,"metadata":{"created_date":"2024-02-15","last_transaction":-11111111111111111111111111111.7500000000}}	67890	-22222222222222222222222222222222222.250000000000000	2024-02-15	-11111111111111111111111111111.7500000000	-22222211111111111111111111111111110.500000000000000
Test8_NESTED_STRUCT_OPERATIONS	3	{"account_id":11111,"balance":0.000000000000001,"metadata":{"created_date":"2024-03-30","last_transaction":0.0100000000}}	11111	1E-15	2024-03-30	0.0100000000	-0.009999999999999
Test8_NESTED_STRUCT_OPERATIONS	4	{"account_id":99999,"balance":88888777776666655555444443333322222.999999999999999,"metadata":{"created_date":"2024-12-31","last_transaction":77777666665555544444333332222.9999999999}}	99999	88888777776666655555444443333322222.999999999999999	2024-12-31	77777666665555544444333332222.9999999999	88888699998999989999899998999990000.000000000099999
-- !result
SELECT
    'Test9_LARGE_DECIMAL_STRUCTS' as test_name,
    id,
    large_numbers,
    large_numbers.max_value as max_val,
    large_numbers.min_value as min_val,
    large_numbers.precision_value as precision_val,
    CASE 
        WHEN large_numbers.max_value > 0 AND large_numbers.min_value < 0 THEN 'MIXED_RANGE'
        WHEN large_numbers.max_value > 0 THEN 'POSITIVE_RANGE'
        ELSE 'OTHER'
    END as range_type
FROM decimal_struct_test
WHERE large_numbers IS NOT NULL
ORDER BY id;
-- result:
Test9_LARGE_DECIMAL_STRUCTS	1	{"max_value":9999988888777776666655555444443333322222111110000099999888877776666555544,"min_value":-8888877777666665555544444333332222211111000009999988888777766665555444433,"precision_value":12345678901234567890123456.45678901234567890123456789012345678901}	9999988888777776666655555444443333322222111110000099999888877776666555544	-8888877777666665555544444333332222211111000009999988888777766665555444433	12345678901234567890123456.45678901234567890123456789012345678901	MIXED_RANGE
Test9_LARGE_DECIMAL_STRUCTS	2	{"max_value":1234567890123456789012345678901234567890123456789012345678901234567890123456,"min_value":0,"precision_value":-99988877766655544433322211100.99999999999999999999999999999999999999}	1234567890123456789012345678901234567890123456789012345678901234567890123456	0	-99988877766655544433322211100.99999999999999999999999999999999999999	POSITIVE_RANGE
Test9_LARGE_DECIMAL_STRUCTS	3	{"max_value":1,"min_value":-1,"precision_value":0.00000000000000000000000000000000000001}	1	-1	1E-38	MIXED_RANGE
-- !result
CREATE TABLE complex_nested_test (
    id INT,
    portfolio ARRAY<STRUCT<
        asset_name STRING,
        quantity DECIMAL(50,15),
        price DECIMAL(50,15),
        metadata MAP<STRING, DECIMAL(40,10)>
    >>,
    risk_metrics MAP<STRING, ARRAY<DECIMAL(76,20)>>
) PROPERTIES("replication_num"="1");
-- result:
-- !result
INSERT INTO complex_nested_test VALUES
(1, [
        ROW('STOCK_A', 12345678901234567890123456789012345.500000000000000, 98765432109876543210987654321098765.750000000000000, MAP{'daily_change': 77777777777777777777777777777.2500000000, 'volume_weight': 33333333333333333333333333333.8500000000}),
        ROW('BOND_B', 55555555555555555555555555555555555.000000000000000, 44444444444444444444444444444444444.250000000000000, MAP{'yield': 11111111111111111111111111111.7500000000, 'duration': 22222222222222222222222222222.2500000000})
    ],
    MAP{
        'volatility': [12345678901234567890123456789012345678901234567890123456.15000000000000000000, 98765432109876543210987654321098765432109876543210987654.18000000000000000000, 55555555555555555555555555555555555555555555555555555555.12000000000000000000],
        'correlation': [77777777777777777777777777777777777777777777777777777777.65000000000000000000, -44444444444444444444444444444444444444444444444444444444.25000000000000000000, 88888888888888888888888888888888888888888888888888888888.85000000000000000000]
    }),
(2, [
        ROW('CRYPTO_C', 11111111111111111111111111111111111.001500000000000, 88888888888888888888888888888888888.999999999999999, MAP{'market_cap': 99999888887777766666555554444.9999999999, 'circulating': 77777666665555544444333332222.0000000000})
    ],
    MAP{
        'beta': [66666666666666666666666666666666666666666666666666666666.25000000000000000000, 33333333333333333333333333333333333333333333333333333333.35000000000000000000],
        'sharpe': [22222222222222222222222222222222222222222222222222222222.75000000000000000000, 11111111111111111111111111111111111111111111111111111111.95000000000000000000, 99999999999999999999999999999999999999999999999999999999.15000000000000000000]
    });
-- result:
-- !result
SELECT
    'Test10_COMPLEX_NESTED_OPERATIONS' as test_name,
    id,
    CARDINALITY(portfolio) as portfolio_size,
    portfolio[1].asset_name as first_asset,
    portfolio[1].quantity as first_quantity,
    portfolio[1].price as first_price,
    portfolio[1].quantity * portfolio[1].price as first_total_value,
    portfolio[1].metadata['daily_change'] as first_daily_change
FROM complex_nested_test
ORDER BY id;
-- result:
Test10_COMPLEX_NESTED_OPERATIONS	1	2	STOCK_A	12345678901234567890123456789012345.500000000000000	98765432109876543210987654321098765.750000000000000	None	77777777777777777777777777777.2500000000
Test10_COMPLEX_NESTED_OPERATIONS	2	1	CRYPTO_C	11111111111111111111111111111111111.001500000000000	88888888888888888888888888888888888.999999999999999	None	None
-- !result
SELECT
    'Test11_RISK_METRICS_ANALYSIS' as test_name,
    id,
    MAP_SIZE(risk_metrics) as metrics_count,
    CARDINALITY(risk_metrics['volatility']) as volatility_points,
    risk_metrics['volatility'][1] as first_volatility
FROM complex_nested_test
WHERE risk_metrics['volatility'] IS NOT NULL
ORDER BY id;
-- result:
Test11_RISK_METRICS_ANALYSIS	1	2	3	12345678901234567890123456789012345678901234567890123456.15000000000000000000
-- !result
SELECT
    'Test12_ARRAY_ELEMENT_OPERATIONS' as test_name,
    id,
    portfolio[1].metadata as first_asset_metadata,
    MAP_KEYS(portfolio[1].metadata) as metadata_keys,
    MAP_VALUES(portfolio[1].metadata) as metadata_values
FROM complex_nested_test
WHERE CARDINALITY(portfolio) > 0
ORDER BY id;
-- result:
Test12_ARRAY_ELEMENT_OPERATIONS	1	{"daily_change":77777777777777777777777777777.2500000000,"volume_weight":33333333333333333333333333333.8500000000}	["daily_change","volume_weight"]	[77777777777777777777777777777.2500000000,33333333333333333333333333333.8500000000]
Test12_ARRAY_ELEMENT_OPERATIONS	2	{"circulating":77777666665555544444333332222.0000000000,"market_cap":99999888887777766666555554444.9999999999}	["circulating","market_cap"]	[77777666665555544444333332222.0000000000,99999888887777766666555554444.9999999999]
-- !result