-- name: test_read_write_decimal256 @slow

DROP DATABASE IF EXISTS test_decimal256;
CREATE DATABASE test_decimal256;
USE test_decimal256;

-- ============================================
-- Part 1: Basic decimal256 functionality tests (precision > 38)
-- ============================================

-- Case 1: precision=39 basic test
CREATE TABLE decimal_test_p39_s5 (d1 decimal(39, 5)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p39_s5 SELECT 123456789012345678901234567890123.12345;
INSERT INTO decimal_test_p39_s5 SELECT -123456789012345678901234567890123.12345;
SELECT * FROM decimal_test_p39_s5 ORDER BY d1;

-- Case 2: precision=50 medium precision test
CREATE TABLE decimal_test_p50_s10 (d1 decimal(50, 10)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p50_s10 SELECT 1234567890123456789012345678901234567890.1234567890;
INSERT INTO decimal_test_p50_s10 SELECT -1234567890123456789012345678901234567890.1234567890;
SELECT * FROM decimal_test_p50_s10 ORDER BY d1;

-- Case 3: precision=65 high precision test
CREATE TABLE decimal_test_p65_s15 (d1 decimal(65, 15)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p65_s15 SELECT 12345678901234567890123456789012345678901234567890.123456789012345;
INSERT INTO decimal_test_p65_s15 SELECT -12345678901234567890123456789012345678901234567890.123456789012345;
SELECT * FROM decimal_test_p65_s15 ORDER BY d1;

-- ============================================
-- Part 2: Boundary value tests
-- ============================================

-- Case 4: precision=39 boundary test (just within limit)
CREATE TABLE decimal_test_p39_s0 (d1 decimal(39, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p39_s0 SELECT 999999999999999999999999999999999999999;  -- 39 digits of 9
INSERT INTO decimal_test_p39_s0 SELECT -999999999999999999999999999999999999999;
SELECT * FROM decimal_test_p39_s0 ORDER BY d1;

-- Case 5: precision=76 maximum precision boundary test
CREATE TABLE decimal_test_p76_s20 (d1 decimal(76, 20)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p76_s20 SELECT 12345678901234567890123456789012345678901234567890123456.12345678901234567890;
INSERT INTO decimal_test_p76_s20 SELECT -12345678901234567890123456789012345678901234567890123456.12345678901234567890;
SELECT * FROM decimal_test_p76_s20 ORDER BY d1;

-- ============================================
-- Part 3: FE Cast Null scenario tests
-- ============================================

-- Case 6: FE cast null test - decimal(76, 40), integer part limit = 77-40 = 37 digits
CREATE TABLE decimal_test_p76_s40_fe_null (d1 decimal(76, 40)) PROPERTIES("replication_num"="1");
-- Integer part has 38 digits > 37, should be cast to null by FE
INSERT INTO decimal_test_p76_s40_fe_null SELECT 12345678901234567890123456789012345678.1234567890123456789012345678901234567890;
INSERT INTO decimal_test_p76_s40_fe_null SELECT -12345678901234567890123456789012345678.1234567890123456789012345678901234567890;
-- Integer part has 37 digits = 37, less than INT256_MAX. be throw exception. 
INSERT INTO decimal_test_p76_s40_fe_null SELECT 1234567890123456789012345678901234567.1234567890123456789012345678901234567890;
INSERT INTO decimal_test_p76_s40_fe_null SELECT -1234567890123456789012345678901234567.1234567890123456789012345678901234567890;
SELECT * FROM decimal_test_p76_s40_fe_null ORDER BY d1;

-- Case 7: FE cast null test - decimal(76, 50), integer part limit = 77-50 = 27 digits
CREATE TABLE decimal_test_p76_s50_fe_null (d1 decimal(76, 50)) PROPERTIES("replication_num"="1");
-- Integer part has 28 digits > 27, should be cast to null by FE
INSERT INTO decimal_test_p76_s50_fe_null SELECT 1234567890123456789012345678.12345678901234567890123456789012345678901234567890;
INSERT INTO decimal_test_p76_s50_fe_null SELECT -1234567890123456789012345678.12345678901234567890123456789012345678901234567890;
-- Integer part has 27 digits = 27, less than INT256_MAX. be throw exception. 
INSERT INTO decimal_test_p76_s50_fe_null SELECT 123456789012345678901234567.12345678901234567890123456789012345678901234567890;
INSERT INTO decimal_test_p76_s50_fe_null SELECT -123456789012345678901234567.12345678901234567890123456789012345678901234567890;
-- Integer part has 26 digits = 26, less than INT256_MAX.
INSERT INTO decimal_test_p76_s50_fe_null SELECT -12345678901234567890123456.12345678901234567890123456789012345678901234567890;
SELECT * FROM decimal_test_p76_s50_fe_null ORDER BY d1;

-- ============================================
-- Part 4: BE exception scenario tests (insufficient precision)
-- ============================================

-- Case 8: Scale causes total digits to exceed precision
CREATE TABLE decimal_test_p40_s35 (d1 decimal(40, 35)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p40_s35 SELECT 123456.12345678901234567890123456789012345;  -- 6+35=41 > 40, should cause BE exception
INSERT INTO decimal_test_p40_s35 SELECT 12345.12345678901234567890123456789012345;   -- 5+35=40, exactly fits
INSERT INTO decimal_test_p40_s35 SELECT 1234567.12345678901234567890123456789012345; -- 7+35=42 > 40, should cause BE exception
SELECT * FROM decimal_test_p40_s35 ORDER BY d1;

-- Case 9: Similar example as mentioned
CREATE TABLE decimal_test_p50_s45 (d1 decimal(50, 45)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p50_s45 SELECT 123456.123456789012345678901234567890123456789012345;  -- 6+45=51 > 50, should cause BE exception
INSERT INTO decimal_test_p50_s45 SELECT 12345.123456789012345678901234567890123456789012345;   -- 5+45=50, exactly fits
INSERT INTO decimal_test_p50_s45 SELECT 1234567.123456789012345678901234567890123456789012345; -- 7+45=52 > 50, should cause BE exception
SELECT * FROM decimal_test_p50_s45 ORDER BY d1;

-- Case 10: High precision scale overflow test
CREATE TABLE decimal_test_p55_s50 (d1 decimal(55, 50)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p55_s50 SELECT 123456.12345678901234567890123456789012345678901234567890; -- 6+50=56 > 55, should cause BE exception
INSERT INTO decimal_test_p55_s50 SELECT 12345.12345678901234567890123456789012345678901234567890;  -- 5+50=55, exactly fits
SELECT * FROM decimal_test_p55_s50 ORDER BY d1;

-- ============================================
-- Part 5: Maximum precision tests
-- ============================================

-- Case 11: Maximum precision all integers
CREATE TABLE decimal_test_p76_s0 (d1 decimal(76, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p76_s0 SELECT 1234567890123456789012345678901234567890123456789012345678901234567890123456;
INSERT INTO decimal_test_p76_s0 SELECT -1234567890123456789012345678901234567890123456789012345678901234567890123456;
SELECT * FROM decimal_test_p76_s0 ORDER BY d1;

-- Case 12: Maximum precision all decimals
CREATE TABLE decimal_test_p76_s76 (d1 decimal(76, 76)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p76_s76 SELECT 0.1234567890123456789012345678901234567890123456789012345678901234567890123456;
INSERT INTO decimal_test_p76_s76 SELECT -0.1234567890123456789012345678901234567890123456789012345678901234567890123456;
SELECT * FROM decimal_test_p76_s76 ORDER BY d1;

-- Case 13: Near maximum precision mixed test
CREATE TABLE decimal_test_p75_s35 (d1 decimal(75, 35)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p75_s35 SELECT 1234567890123456789012345678901234567890.12345678901234567890123456789012345;
INSERT INTO decimal_test_p75_s35 SELECT -1234567890123456789012345678901234567890.12345678901234567890123456789012345;
SELECT * FROM decimal_test_p75_s35 ORDER BY d1;

-- ============================================
-- Part 6: Special values and edge cases
-- ============================================

-- Case 14: Zero values in different precision tests
CREATE TABLE decimal_test_p60_s30 (d1 decimal(60, 30)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p60_s30 SELECT 0;
INSERT INTO decimal_test_p60_s30 SELECT 0.0;
INSERT INTO decimal_test_p60_s30 SELECT 0.000000000000000000000000000000;
SELECT * FROM decimal_test_p60_s30 ORDER BY d1;

-- Case 15: Large integers with all zeros after decimal point
CREATE TABLE decimal_test_p55_s25 (d1 decimal(55, 25)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p55_s25 SELECT 123456789012345678901234567890.0000000000000000000000000;
INSERT INTO decimal_test_p55_s25 SELECT -123456789012345678901234567890.0000000000000000000000000;
SELECT * FROM decimal_test_p55_s25 ORDER BY d1;

-- Case 16: Zero integer part with large decimal part
CREATE TABLE decimal_test_p70_s69 (d1 decimal(70, 69)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p70_s69 SELECT 0.123456789012345678901234567890123456789012345678901234567890123456789;
INSERT INTO decimal_test_p70_s69 SELECT -0.123456789012345678901234567890123456789012345678901234567890123456789;
SELECT * FROM decimal_test_p70_s69 ORDER BY d1;


-- ============================================
-- Part 7: Systematic Testing for Different Precision Ranges
-- ============================================

-- Case 17: precision=41 test
-- be throw exception
CREATE TABLE decimal_test_p41_s8 (d1 decimal(41, 8)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p41_s8 SELECT 12345678901234567890123456789012345.12345678;
INSERT INTO decimal_test_p41_s8 SELECT -12345678901234567890123456789012345.12345678;
SELECT * FROM decimal_test_p41_s8 ORDER BY d1;

-- Case 18: precision=43 test
CREATE TABLE decimal_test_p43_s12 (d1 decimal(43, 12)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p43_s12 SELECT 1234567890123456789012345678901.123456789012;
INSERT INTO decimal_test_p43_s12 SELECT -1234567890123456789012345678901.123456789012;
SELECT * FROM decimal_test_p43_s12 ORDER BY d1;

-- Case 19: precision=47 test
CREATE TABLE decimal_test_p47_s18 (d1 decimal(47, 18)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p47_s18 SELECT 12345678901234567890123456789.123456789012345678;
INSERT INTO decimal_test_p47_s18 SELECT -12345678901234567890123456789.123456789012345678;
SELECT * FROM decimal_test_p47_s18 ORDER BY d1;

-- Case 20: precision=52 test
CREATE TABLE decimal_test_p52_s25 (d1 decimal(52, 25)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p52_s25 SELECT 123456789012345678901234567.1234567890123456789012345;
INSERT INTO decimal_test_p52_s25 SELECT -123456789012345678901234567.1234567890123456789012345;
SELECT * FROM decimal_test_p52_s25 ORDER BY d1;

-- Case 21: precision=58 test
CREATE TABLE decimal_test_p58_s30 (d1 decimal(58, 30)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p58_s30 SELECT 1234567890123456789012345678.123456789012345678901234567890;
INSERT INTO decimal_test_p58_s30 SELECT -1234567890123456789012345678.123456789012345678901234567890;
SELECT * FROM decimal_test_p58_s30 ORDER BY d1;

-- Case 22: precision=62 test
CREATE TABLE decimal_test_p62_s35 (d1 decimal(62, 35)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p62_s35 SELECT 123456789012345678901234567.12345678901234567890123456789012345;
INSERT INTO decimal_test_p62_s35 SELECT -123456789012345678901234567.12345678901234567890123456789012345;
SELECT * FROM decimal_test_p62_s35 ORDER BY d1;

-- Case 23: precision=68 test
CREATE TABLE decimal_test_p68_s40 (d1 decimal(68, 40)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p68_s40 SELECT 1234567890123456789012345678.1234567890123456789012345678901234567890;
INSERT INTO decimal_test_p68_s40 SELECT -1234567890123456789012345678.1234567890123456789012345678901234567890;
SELECT * FROM decimal_test_p68_s40 ORDER BY d1;

-- Case 24: precision=72 test
CREATE TABLE decimal_test_p72_s45 (d1 decimal(72, 45)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p72_s45 SELECT 123456789012345678901234567.123456789012345678901234567890123456789012345;
INSERT INTO decimal_test_p72_s45 SELECT -123456789012345678901234567.123456789012345678901234567890123456789012345;
SELECT * FROM decimal_test_p72_s45 ORDER BY d1;

-- ============================================
-- Part 8: Different Precision Tests with Scale=0
-- ============================================

-- Case 25: precision=42, scale=0
CREATE TABLE decimal_test_p42_s0 (d1 decimal(42, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p42_s0 SELECT 123456789012345678901234567890123456789012;
INSERT INTO decimal_test_p42_s0 SELECT -123456789012345678901234567890123456789012;
SELECT * FROM decimal_test_p42_s0 ORDER BY d1;

-- Case 26: precision=48, scale=0
CREATE TABLE decimal_test_p48_s0 (d1 decimal(48, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p48_s0 SELECT 123456789012345678901234567890123456789012345678;
INSERT INTO decimal_test_p48_s0 SELECT -123456789012345678901234567890123456789012345678;
INSERT INTO decimal_test_p48_s0 SELECT -123456789012345678901234567890123456789012345678.9;
SELECT * FROM decimal_test_p48_s0 ORDER BY d1;

-- Case 27: precision=54, scale=0
CREATE TABLE decimal_test_p54_s0 (d1 decimal(54, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p54_s0 SELECT 123456789012345678901234567890123456789012345678901234;
INSERT INTO decimal_test_p54_s0 SELECT -123456789012345678901234567890123456789012345678901234;
SELECT * FROM decimal_test_p54_s0 ORDER BY d1;

-- Case 28: precision=60, scale=0
CREATE TABLE decimal_test_p60_s0 (d1 decimal(60, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p60_s0 SELECT 123456789012345678901234567890123456789012345678901234567890;
INSERT INTO decimal_test_p60_s0 SELECT -123456789012345678901234567890123456789012345678901234567890;
SELECT * FROM decimal_test_p60_s0 ORDER BY d1;

-- Case 29: precision=66, scale=0
CREATE TABLE decimal_test_p66_s0 (d1 decimal(66, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p66_s0 SELECT 123456789012345678901234567890123456789012345678901234567890123456;
INSERT INTO decimal_test_p66_s0 SELECT -123456789012345678901234567890123456789012345678901234567890123456;
SELECT * FROM decimal_test_p66_s0 ORDER BY d1;

-- Case 30: precision=70, scale=0
CREATE TABLE decimal_test_p70_s0 (d1 decimal(70, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p70_s0 SELECT 1234567890123456789012345678901234567890123456789012345678901234567890;
INSERT INTO decimal_test_p70_s0 SELECT -1234567890123456789012345678901234567890123456789012345678901234567890;
SELECT * FROM decimal_test_p70_s0 ORDER BY d1;

-- ============================================
-- Part 9: High Scale Tests with Different Precisions
-- ============================================

-- Case 31: High scale test - precision=45, scale=40
CREATE TABLE decimal_test_p45_s40 (d1 decimal(45, 40)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p45_s40 SELECT 12345.1234567890123456789012345678901234567890;
INSERT INTO decimal_test_p45_s40 SELECT -12345.1234567890123456789012345678901234567890;
SELECT * FROM decimal_test_p45_s40 ORDER BY d1;

-- Case 32: High scale test - precision=51, scale=45
CREATE TABLE decimal_test_p51_s45 (d1 decimal(51, 45)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p51_s45 SELECT 123456.123456789012345678901234567890123456789012345;
INSERT INTO decimal_test_p51_s45 SELECT -123456.123456789012345678901234567890123456789012345;
SELECT * FROM decimal_test_p51_s45 ORDER BY d1;

-- Case 33: High scale test - precision=57, scale=50
CREATE TABLE decimal_test_p57_s50 (d1 decimal(57, 50)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p57_s50 SELECT 1234567.12345678901234567890123456789012345678901234567890;
INSERT INTO decimal_test_p57_s50 SELECT -1234567.12345678901234567890123456789012345678901234567890;
SELECT * FROM decimal_test_p57_s50 ORDER BY d1;

-- Case 34: High scale test - precision=63, scale=55
CREATE TABLE decimal_test_p63_s55 (d1 decimal(63, 55)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p63_s55 SELECT 12345678.1234567890123456789012345678901234567890123456789012345;
INSERT INTO decimal_test_p63_s55 SELECT -12345678.1234567890123456789012345678901234567890123456789012345;
SELECT * FROM decimal_test_p63_s55 ORDER BY d1;

-- Case 35: High scale test - precision=69, scale=60
CREATE TABLE decimal_test_p69_s60 (d1 decimal(69, 60)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p69_s60 SELECT 123456789.123456789012345678901234567890123456789012345678901234567890;
INSERT INTO decimal_test_p69_s60 SELECT -123456789.123456789012345678901234567890123456789012345678901234567890;
SELECT * FROM decimal_test_p69_s60 ORDER BY d1;

-- ============================================
-- Part 10: FE Binary Style Overflow Tests (More Scenarios)
-- ============================================

-- Case 36: FE cast null test - decimal(70, 45), integer part limit = 77-45 = 32 digits
CREATE TABLE decimal_test_p70_s45_fe_null (d1 decimal(70, 45)) PROPERTIES("replication_num"="1");
-- Integer part has 33 digits > 32, should be cast to null by FE
INSERT INTO decimal_test_p70_s45_fe_null SELECT 123456789012345678901234567890123.123456789012345678901234567890123456789012345;
INSERT INTO decimal_test_p70_s45_fe_null SELECT -123456789012345678901234567890123.123456789012345678901234567890123456789012345;
-- Integer part has 32 digits = 32, be throw exception
INSERT INTO decimal_test_p70_s45_fe_null SELECT 12345678901234567890123456789012.123456789012345678901234567890123456789012345;
INSERT INTO decimal_test_p70_s45_fe_null SELECT -12345678901234567890123456789012.123456789012345678901234567890123456789012345;
SELECT * FROM decimal_test_p70_s45_fe_null ORDER BY d1;

-- Case 37: FE cast null test - decimal(65, 55), integer part limit = 77-55 = 22 digits
CREATE TABLE decimal_test_p65_s55_fe_null (d1 decimal(65, 55)) PROPERTIES("replication_num"="1");
-- Integer part has 23 digits > 22, should be cast to null by FE
INSERT INTO decimal_test_p65_s55_fe_null SELECT 12345678901234567890123.1234567890123456789012345678901234567890123456789012345;
INSERT INTO decimal_test_p65_s55_fe_null SELECT -12345678901234567890123.1234567890123456789012345678901234567890123456789012345;
-- Integer part has 22 digits = 22, be throw exception
INSERT INTO decimal_test_p65_s55_fe_null SELECT 1234567890123456789012.1234567890123456789012345678901234567890123456789012345;
INSERT INTO decimal_test_p65_s55_fe_null SELECT -1234567890123456789012.1234567890123456789012345678901234567890123456789012345;
SELECT * FROM decimal_test_p65_s55_fe_null ORDER BY d1;

-- Case 38: FE cast null test - decimal(60, 60), integer part limit = 77-60 = 17 digits
CREATE TABLE decimal_test_p60_s60_fe_null (d1 decimal(60, 60)) PROPERTIES("replication_num"="1");
-- Integer part has 18 digits > 17, should be cast to null by FE
INSERT INTO decimal_test_p60_s60_fe_null SELECT 123456789012345678.123456789012345678901234567890123456789012345678901234567890;
INSERT INTO decimal_test_p60_s60_fe_null SELECT -123456789012345678.123456789012345678901234567890123456789012345678901234567890;
-- Integer part has 17 digits = 17, should work
INSERT INTO decimal_test_p60_s60_fe_null SELECT 12345678901234567.123456789012345678901234567890123456789012345678901234567890;
INSERT INTO decimal_test_p60_s60_fe_null SELECT -12345678901234567.123456789012345678901234567890123456789012345678901234567890;

-- Integer part has 1 digits = 1, be also throw exception
INSERT INTO decimal_test_p60_s60_fe_null SELECT 1;
INSERT INTO decimal_test_p60_s60_fe_null SELECT -1;

-- Integer part has 0 digits = 0, should work
INSERT INTO decimal_test_p60_s60_fe_null SELECT 0.1;
INSERT INTO decimal_test_p60_s60_fe_null SELECT -0.1;

SELECT * FROM decimal_test_p60_s60_fe_null ORDER BY d1;

-- ============================================
-- Part 11: BE Overflow Exception Tests (More Scenarios)
-- ============================================

-- Case 39: precision=41, scale=38 overflow test
CREATE TABLE decimal_test_p41_s38 (d1 decimal(41, 38)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p41_s38 SELECT 1234.12345678901234567890123456789012345678; -- 4+38=42 > 41, should BE exception
INSERT INTO decimal_test_p41_s38 SELECT 123.12345678901234567890123456789012345678;  -- 3+38=41, exactly fits
INSERT INTO decimal_test_p41_s38 SELECT 12345.12345678901234567890123456789012345678; -- 5+38=43 > 41, should BE exception
SELECT * FROM decimal_test_p41_s38 ORDER BY d1;

-- Case 40: precision=46, scale=42 overflow test
CREATE TABLE decimal_test_p46_s42 (d1 decimal(46, 42)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p46_s42 SELECT 12345.123456789012345678901234567890123456789012; -- 5+42=47 > 46, should BE exception
INSERT INTO decimal_test_p46_s42 SELECT 1234.123456789012345678901234567890123456789012;  -- 4+42=46, exactly fits
INSERT INTO decimal_test_p46_s42 SELECT 123456.123456789012345678901234567890123456789012; -- 6+42=48 > 46, should BE exception
SELECT * FROM decimal_test_p46_s42 ORDER BY d1;

-- Case 41: precision=56, scale=52 overflow test
CREATE TABLE decimal_test_p56_s52 (d1 decimal(56, 52)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p56_s52 SELECT 12345.1234567890123456789012345678901234567890123456789012; -- 5+52=57 > 56, should BE exception
INSERT INTO decimal_test_p56_s52 SELECT 1234.1234567890123456789012345678901234567890123456789012;  -- 4+52=56, exactly fits
INSERT INTO decimal_test_p56_s52 SELECT 123456.1234567890123456789012345678901234567890123456789012; -- 6+52=58 > 56, should BE exception
SELECT * FROM decimal_test_p56_s52 ORDER BY d1;

-- Case 42: precision=61, scale=58 overflow test
CREATE TABLE decimal_test_p61_s58 (d1 decimal(61, 58)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p61_s58 SELECT 1234.1234567890123456789012345678901234567890123456789012345678; -- 4+58=62 > 61, should BE exception
INSERT INTO decimal_test_p61_s58 SELECT 123.1234567890123456789012345678901234567890123456789012345678;  -- 3+58=61, exactly fits
INSERT INTO decimal_test_p61_s58 SELECT 12345.1234567890123456789012345678901234567890123456789012345678; -- 5+58=63 > 61, should BE exception
SELECT * FROM decimal_test_p61_s58 ORDER BY d1;

-- Case 43: precision=67, scale=63 overflow test
CREATE TABLE decimal_test_p67_s63 (d1 decimal(67, 63)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p67_s63 SELECT 12345.123456789012345678901234567890123456789012345678901234567890123; -- 5+63=68 > 67, should BE exception
INSERT INTO decimal_test_p67_s63 SELECT 1234.123456789012345678901234567890123456789012345678901234567890123;  -- 4+63=67, exactly fits
INSERT INTO decimal_test_p67_s63 SELECT 123456.123456789012345678901234567890123456789012345678901234567890123; -- 6+63=69 > 67, should BE exception
SELECT * FROM decimal_test_p67_s63 ORDER BY d1;

-- ============================================
-- Part 12: Special Number Pattern Tests
-- ============================================

-- Case 44: All 1s digit test
CREATE TABLE decimal_test_p40_s20 (d1 decimal(40, 20)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p40_s20 SELECT 11111111111111111111.11111111111111111111;
INSERT INTO decimal_test_p40_s20 SELECT -11111111111111111111.11111111111111111111;
SELECT * FROM decimal_test_p40_s20 ORDER BY d1;

-- Case 45: All 9s digit test
CREATE TABLE decimal_test_p45_s22 (d1 decimal(45, 22)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p45_s22 SELECT 99999999999999999999999.9999999999999999999999;
INSERT INTO decimal_test_p45_s22 SELECT -99999999999999999999999.9999999999999999999999;
SELECT * FROM decimal_test_p45_s22 ORDER BY d1;

-- Case 46: Alternating digit pattern test
CREATE TABLE decimal_test_p50_s25 (d1 decimal(50, 25)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p50_s25 SELECT 1234567890123456789012345.1234567890123456789012345;
INSERT INTO decimal_test_p50_s25 SELECT 9876543210987654321098765.9876543210987654321098765;
SELECT * FROM decimal_test_p50_s25 ORDER BY d1;

-- Case 47: Repeating digit pattern test
CREATE TABLE decimal_test_p55_s27 (d1 decimal(55, 27)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p55_s27 SELECT 1212121212121212121212121212.123123123123123123123123123;
INSERT INTO decimal_test_p55_s27 SELECT 3434343434343434343434343434.456456456456456456456456456;
SELECT * FROM decimal_test_p55_s27 ORDER BY d1;

-- ============================================
-- Part 13: Precise Boundary Tests Near Limits
-- ============================================

-- Case 48: precision=39 boundary precise test
CREATE TABLE decimal_test_p39_s19 (d1 decimal(39, 19)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p39_s19 SELECT 99999999999999999999.9999999999999999999;
INSERT INTO decimal_test_p39_s19 SELECT -99999999999999999999.9999999999999999999;
SELECT * FROM decimal_test_p39_s19 ORDER BY d1;

-- Case 49: precision=76 boundary precise test
CREATE TABLE decimal_test_p76_s38 (d1 decimal(76, 38)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p76_s38 SELECT 99999999999999999999999999999999999999.99999999999999999999999999999999999999;
INSERT INTO decimal_test_p76_s38 SELECT -99999999999999999999999999999999999999.99999999999999999999999999999999999999;
SELECT * FROM decimal_test_p76_s38 ORDER BY d1;

-- Case 50: Mid-range precision boundary test
CREATE TABLE decimal_test_p58_s29 (d1 decimal(58, 29)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p58_s29 SELECT 99999999999999999999999999999.99999999999999999999999999999;
INSERT INTO decimal_test_p58_s29 SELECT -99999999999999999999999999999.99999999999999999999999999999;
SELECT * FROM decimal_test_p58_s29 ORDER BY d1;

-- ============================================
-- Part 14: Simple value tests (1, -1, 0) across different precisions
-- ============================================

-- Case 51: Simple values with precision=39
CREATE TABLE decimal_test_simple_p39_s0 (d1 decimal(39, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p39_s0 SELECT 1;
INSERT INTO decimal_test_simple_p39_s0 SELECT -1;
INSERT INTO decimal_test_simple_p39_s0 SELECT 0;
SELECT * FROM decimal_test_simple_p39_s0 ORDER BY d1;

-- Case 52: Simple values with precision=39 and scale=10
CREATE TABLE decimal_test_simple_p39_s10 (d1 decimal(39, 10)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p39_s10 SELECT 1;
INSERT INTO decimal_test_simple_p39_s10 SELECT -1;
INSERT INTO decimal_test_simple_p39_s10 SELECT 0;
INSERT INTO decimal_test_simple_p39_s10 SELECT 1.0000000000;
INSERT INTO decimal_test_simple_p39_s10 SELECT -1.0000000000;
INSERT INTO decimal_test_simple_p39_s10 SELECT 0.0000000000;
SELECT * FROM decimal_test_simple_p39_s10 ORDER BY d1;

-- Case 53: Simple values with precision=50 and scale=0
CREATE TABLE decimal_test_simple_p50_s0 (d1 decimal(50, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p50_s0 SELECT 1;
INSERT INTO decimal_test_simple_p50_s0 SELECT -1;
INSERT INTO decimal_test_simple_p50_s0 SELECT 0;
SELECT * FROM decimal_test_simple_p50_s0 ORDER BY d1;

-- Case 54: Simple values with precision=50 and scale=25
CREATE TABLE decimal_test_simple_p50_s25 (d1 decimal(50, 25)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p50_s25 SELECT 1;
INSERT INTO decimal_test_simple_p50_s25 SELECT -1;
INSERT INTO decimal_test_simple_p50_s25 SELECT 0;
INSERT INTO decimal_test_simple_p50_s25 SELECT 1.0000000000000000000000000;
INSERT INTO decimal_test_simple_p50_s25 SELECT -1.0000000000000000000000000;
INSERT INTO decimal_test_simple_p50_s25 SELECT 0.0000000000000000000000000;
SELECT * FROM decimal_test_simple_p50_s25 ORDER BY d1;

-- Case 55: Simple values with precision=65 and scale=0
CREATE TABLE decimal_test_simple_p65_s0 (d1 decimal(65, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p65_s0 SELECT 1;
INSERT INTO decimal_test_simple_p65_s0 SELECT -1;
INSERT INTO decimal_test_simple_p65_s0 SELECT 0;
SELECT * FROM decimal_test_simple_p65_s0 ORDER BY d1;

-- Case 56: Simple values with precision=65 and scale=32
CREATE TABLE decimal_test_simple_p65_s32 (d1 decimal(65, 32)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p65_s32 SELECT 1;
INSERT INTO decimal_test_simple_p65_s32 SELECT -1;
INSERT INTO decimal_test_simple_p65_s32 SELECT 0;
INSERT INTO decimal_test_simple_p65_s32 SELECT 1.00000000000000000000000000000000;
INSERT INTO decimal_test_simple_p65_s32 SELECT -1.00000000000000000000000000000000;
INSERT INTO decimal_test_simple_p65_s32 SELECT 0.00000000000000000000000000000000;
SELECT * FROM decimal_test_simple_p65_s32 ORDER BY d1;

-- Case 57: Simple values with maximum precision=76 and scale=0
CREATE TABLE decimal_test_simple_p76_s0 (d1 decimal(76, 0)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p76_s0 SELECT 1;
INSERT INTO decimal_test_simple_p76_s0 SELECT -1;
INSERT INTO decimal_test_simple_p76_s0 SELECT 0;
SELECT * FROM decimal_test_simple_p76_s0 ORDER BY d1;

-- Case 58: Simple values with maximum precision=76 and scale=38
CREATE TABLE decimal_test_simple_p76_s38 (d1 decimal(76, 38)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p76_s38 SELECT 1;
INSERT INTO decimal_test_simple_p76_s38 SELECT -1;
INSERT INTO decimal_test_simple_p76_s38 SELECT 0;
INSERT INTO decimal_test_simple_p76_s38 SELECT 1.00000000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p76_s38 SELECT -1.00000000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p76_s38 SELECT 0.00000000000000000000000000000000000000;
SELECT * FROM decimal_test_simple_p76_s38 ORDER BY d1;

-- Case 59: Simple values with maximum precision=76 and high scale=60
CREATE TABLE decimal_test_simple_p76_s60 (d1 decimal(76, 60)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p76_s60 SELECT 1;
INSERT INTO decimal_test_simple_p76_s60 SELECT -1;
INSERT INTO decimal_test_simple_p76_s60 SELECT 0;
INSERT INTO decimal_test_simple_p76_s60 SELECT 1.000000000000000000000000000000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p76_s60 SELECT -1.000000000000000000000000000000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p76_s60 SELECT 0.000000000000000000000000000000000000000000000000000000000000;
SELECT * FROM decimal_test_simple_p76_s60 ORDER BY d1;

-- Case 60: Simple values with maximum precision=76 and maximum scale=76
CREATE TABLE decimal_test_simple_p76_s76 (d1 decimal(76, 76)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p76_s76 SELECT 1;
INSERT INTO decimal_test_simple_p76_s76 SELECT -1;
INSERT INTO decimal_test_simple_p76_s76 SELECT 0;
INSERT INTO decimal_test_simple_p76_s76 SELECT 0.1000000000000000000000000000000000000000000000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p76_s76 SELECT -0.1000000000000000000000000000000000000000000000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p76_s76 SELECT 0.0000000000000000000000000000000000000000000000000000000000000000000000000000;
SELECT * FROM decimal_test_simple_p76_s76 ORDER BY d1;

-- ============================================
-- Part 15: Edge cases with simple values and high precision scales
-- ============================================

-- Case 61: Simple values with precision=40 and scale=39 (almost all decimal)
CREATE TABLE decimal_test_simple_p40_s39 (d1 decimal(40, 39)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p40_s39 SELECT 1;
INSERT INTO decimal_test_simple_p40_s39 SELECT -1;
INSERT INTO decimal_test_simple_p40_s39 SELECT 0;
INSERT INTO decimal_test_simple_p40_s39 SELECT 0.100000000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p40_s39 SELECT -0.100000000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p40_s39 SELECT 0.000000000000000000000000000000000000000;
SELECT * FROM decimal_test_simple_p40_s39 ORDER BY d1;

-- Case 62: Simple values with precision=45 and scale=44 (almost all decimal)
CREATE TABLE decimal_test_simple_p45_s44 (d1 decimal(45, 44)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p45_s44 SELECT 1;
INSERT INTO decimal_test_simple_p45_s44 SELECT -1;
INSERT INTO decimal_test_simple_p45_s44 SELECT 0;
INSERT INTO decimal_test_simple_p45_s44 SELECT 0.10000000000000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p45_s44 SELECT -0.10000000000000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p45_s44 SELECT 0.00000000000000000000000000000000000000000000;
SELECT * FROM decimal_test_simple_p45_s44 ORDER BY d1;

-- Case 63: Simple values with precision=55 and scale=1 (mostly integer)
CREATE TABLE decimal_test_simple_p55_s1 (d1 decimal(55, 1)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p55_s1 SELECT 1;
INSERT INTO decimal_test_simple_p55_s1 SELECT -1;
INSERT INTO decimal_test_simple_p55_s1 SELECT 0;
INSERT INTO decimal_test_simple_p55_s1 SELECT 1.0;
INSERT INTO decimal_test_simple_p55_s1 SELECT -1.0;
INSERT INTO decimal_test_simple_p55_s1 SELECT 0.0;
INSERT INTO decimal_test_simple_p55_s1 SELECT 1.1;
INSERT INTO decimal_test_simple_p55_s1 SELECT -1.1;
INSERT INTO decimal_test_simple_p55_s1 SELECT 0.1;
SELECT * FROM decimal_test_simple_p55_s1 ORDER BY d1;

-- Case 64: Simple values with precision=70 and scale=35 (half and half)
CREATE TABLE decimal_test_simple_p70_s35 (d1 decimal(70, 35)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_p70_s35 SELECT 1;
INSERT INTO decimal_test_simple_p70_s35 SELECT -1;
INSERT INTO decimal_test_simple_p70_s35 SELECT 0;
INSERT INTO decimal_test_simple_p70_s35 SELECT 1.00000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p70_s35 SELECT -1.00000000000000000000000000000000000;
INSERT INTO decimal_test_simple_p70_s35 SELECT 0.00000000000000000000000000000000000;
SELECT * FROM decimal_test_simple_p70_s35 ORDER BY d1;

-- Case 65: Mixed simple values with various decimal representations
CREATE TABLE decimal_test_simple_mixed_p60_s20 (d1 decimal(60, 20)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT 1;
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT -1;
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT 0;
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT 1.0;
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT -1.0;
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT 0.0;
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT 1.00000000000000000000;
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT -1.00000000000000000000;
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT 0.00000000000000000000;
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT 1.10000000000000000000;
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT -1.10000000000000000000;
INSERT INTO decimal_test_simple_mixed_p60_s20 SELECT 0.10000000000000000000;
SELECT * FROM decimal_test_simple_mixed_p60_s20 ORDER BY d1;

-- Case 66: FE cast null boundary test - decimal(76, 76), integer part limit = 77-76 = 1 digit
CREATE TABLE decimal_test_p76_s76_fe_null (d1 decimal(76, 76)) PROPERTIES("replication_num"="1");
-- Integer part has 2 digits > 1, should be cast to null by FE
INSERT INTO decimal_test_p76_s76_fe_null SELECT 12.1234567890123456789012345678901234567890123456789012345678901234567890123456;
INSERT INTO decimal_test_p76_s76_fe_null SELECT -12.1234567890123456789012345678901234567890123456789012345678901234567890123456;
-- Integer part has 1 digit = 1, be throw exception
INSERT INTO decimal_test_p76_s76_fe_null SELECT 1.1234567890123456789012345678901234567890123456789012345678901234567890123456;
INSERT INTO decimal_test_p76_s76_fe_null SELECT -1.1234567890123456789012345678901234567890123456789012345678901234567890123456;
-- Integer part has 0 digits (pure decimal), should work
INSERT INTO decimal_test_p76_s76_fe_null SELECT 0.1234567890123456789012345678901234567890123456789012345678901234567890123456;
INSERT INTO decimal_test_p76_s76_fe_null SELECT -0.1234567890123456789012345678901234567890123456789012345678901234567890123456;
SELECT * FROM decimal_test_p76_s76_fe_null ORDER BY d1;

-- Case 67: FE cast null test - decimal(50, 30), integer part limit = 77-30 = 47 digits
CREATE TABLE decimal_test_p50_s30_fe_null (d1 decimal(50, 30)) PROPERTIES("replication_num"="1");
-- Integer part has 48 digits > 47, should be cast to null by FE
INSERT INTO decimal_test_p50_s30_fe_null SELECT 123456789012345678901234567890123456789012345678.123456789012345678901234567890;
INSERT INTO decimal_test_p50_s30_fe_null SELECT -123456789012345678901234567890123456789012345678.123456789012345678901234567890;
-- be throw exception
INSERT INTO decimal_test_p50_s30_fe_null SELECT -12345678901234567890123456789012345678901234567.123456789012345678901234567890;
SELECT * FROM decimal_test_p50_s30_fe_null ORDER BY d1;

-- Case 68: FE cast null test - decimal(40, 35), integer part limit = 77-35 = 42 digits
CREATE TABLE decimal_test_p40_s35_fe_null (d1 decimal(40, 35)) PROPERTIES("replication_num"="1");
-- Integer part has 43 digits > 42, should be cast to null by FE
INSERT INTO decimal_test_p40_s35_fe_null SELECT 1234567890123456789012345678901234567890123.12345678901234567890123456789012345;
INSERT INTO decimal_test_p40_s35_fe_null SELECT -1234567890123456789012345678901234567890123.12345678901234567890123456789012345;
-- Integer part has 42 digits = 42, be throw exception
INSERT INTO decimal_test_p40_s35_fe_null SELECT 123456789012345678901234567890123456789012.12345678901234567890123456789012345;
INSERT INTO decimal_test_p40_s35_fe_null SELECT -123456789012345678901234567890123456789012.12345678901234567890123456789012345;
SELECT * FROM decimal_test_p40_s35_fe_null ORDER BY d1;

-- Case 69: Edge case - decimal(76, 10), integer part limit = 77-10 = 67 digits
CREATE TABLE decimal_test_p76_s10_fe_null (d1 decimal(76, 10)) PROPERTIES("replication_num"="1");
-- Integer part has 68 digits > 67, should be cast to null by FE
INSERT INTO decimal_test_p76_s10_fe_null SELECT 12345678901234567890123456789012345678901234567890123456789012345678.1234567890;
INSERT INTO decimal_test_p76_s10_fe_null SELECT -12345678901234567890123456789012345678901234567890123456789012345678.1234567890;
SELECT * FROM decimal_test_p76_s10_fe_null ORDER BY d1;

-- Case 70: Edge case - decimal(76, 5), integer part limit = 77-5 = 72 digits
CREATE TABLE decimal_test_p76_s5_fe_null (d1 decimal(76, 5)) PROPERTIES("replication_num"="1");
-- Integer part has 73 digits > 72, should be cast to null by FE
INSERT INTO decimal_test_p76_s5_fe_null SELECT 1234567890123456789012345678901234567890123456789012345678901234567890123.12345;
INSERT INTO decimal_test_p76_s5_fe_null SELECT -1234567890123456789012345678901234567890123456789012345678901234567890123.12345;

SELECT * FROM decimal_test_p76_s5_fe_null ORDER BY d1;

-- ============================================
-- Part 16: Default Scale Behavior Tests (BE Exception Cases)
-- ============================================

-- Case 71: decimal(60, 58) - inserting integer will auto-pad 58 zeros, causing BE exception
CREATE TABLE decimal_test_p60_s58_default_scale (d1 decimal(60, 58)) PROPERTIES("replication_num"="1");
-- Insert 555 -> becomes 555.0000....(58 zeros) = 3+58=61 digits > 60, should cause BE exception
INSERT INTO decimal_test_p60_s58_default_scale SELECT 555;
INSERT INTO decimal_test_p60_s58_default_scale SELECT -555;
-- Insert 55 -> becomes 55.0000....(58 zeros) = 2+58=60 digits = 60, should work
INSERT INTO decimal_test_p60_s58_default_scale SELECT 55;
INSERT INTO decimal_test_p60_s58_default_scale SELECT -55;
-- Insert 5555 -> becomes 5555.0000....(58 zeros) = 4+58=62 digits > 60, should cause BE exception
INSERT INTO decimal_test_p60_s58_default_scale SELECT 5555;
SELECT * FROM decimal_test_p60_s58_default_scale ORDER BY d1;

-- Case 72: decimal(50, 48) - inserting integer will auto-pad 48 zeros
CREATE TABLE decimal_test_p50_s48_default_scale (d1 decimal(50, 48)) PROPERTIES("replication_num"="1");
-- Insert 123 -> becomes 123.000....(48 zeros) = 3+48=51 digits > 50, should cause BE exception
INSERT INTO decimal_test_p50_s48_default_scale SELECT 123;
INSERT INTO decimal_test_p50_s48_default_scale SELECT -123;
-- Insert 12 -> becomes 12.000....(48 zeros) = 2+48=50 digits = 50, should work
INSERT INTO decimal_test_p50_s48_default_scale SELECT 12;
INSERT INTO decimal_test_p50_s48_default_scale SELECT -12;
-- Insert 1234 -> becomes 1234.000....(48 zeros) = 4+48=52 digits > 50, should cause BE exception
INSERT INTO decimal_test_p50_s48_default_scale SELECT 1234;
SELECT * FROM decimal_test_p50_s48_default_scale ORDER BY d1;

-- Case 73: decimal(45, 43) - inserting integer will auto-pad 43 zeros
CREATE TABLE decimal_test_p45_s43_default_scale (d1 decimal(45, 43)) PROPERTIES("replication_num"="1");
-- Insert 789 -> becomes 789.000....(43 zeros) = 3+43=46 digits > 45, should cause BE exception
INSERT INTO decimal_test_p45_s43_default_scale SELECT 789;
INSERT INTO decimal_test_p45_s43_default_scale SELECT -789;
-- Insert 78 -> becomes 78.000....(43 zeros) = 2+43=45 digits = 45, should work
INSERT INTO decimal_test_p45_s43_default_scale SELECT 78;
INSERT INTO decimal_test_p45_s43_default_scale SELECT -78;
-- Insert 7890 -> becomes 7890.000....(43 zeros) = 4+43=47 digits > 45, should cause BE exception
INSERT INTO decimal_test_p45_s43_default_scale SELECT 7890;
SELECT * FROM decimal_test_p45_s43_default_scale ORDER BY d1;

-- Case 74: decimal(40, 38) - inserting integer will auto-pad 38 zeros
CREATE TABLE decimal_test_p40_s38_default_scale (d1 decimal(40, 38)) PROPERTIES("replication_num"="1");
-- Insert 999 -> becomes 999.000....(38 zeros) = 3+38=41 digits > 40, should cause BE exception
INSERT INTO decimal_test_p40_s38_default_scale SELECT 999;
INSERT INTO decimal_test_p40_s38_default_scale SELECT -999;
-- Insert 99 -> becomes 99.000....(38 zeros) = 2+38=40 digits = 40, should work
INSERT INTO decimal_test_p40_s38_default_scale SELECT 99;
INSERT INTO decimal_test_p40_s38_default_scale SELECT -99;
-- Insert 9999 -> becomes 9999.000....(38 zeros) = 4+38=42 digits > 40, should cause BE exception
INSERT INTO decimal_test_p40_s38_default_scale SELECT 9999;
SELECT * FROM decimal_test_p40_s38_default_scale ORDER BY d1;

-- Case 75: decimal(35, 33) - inserting integer will auto-pad 33 zeros
CREATE TABLE decimal_test_p35_s33_default_scale (d1 decimal(35, 33)) PROPERTIES("replication_num"="1");
-- Insert 111 -> becomes 111.000....(33 zeros) = 3+33=36 digits > 35, should cause BE exception
INSERT INTO decimal_test_p35_s33_default_scale SELECT 111;
INSERT INTO decimal_test_p35_s33_default_scale SELECT -111;
-- Insert 11 -> becomes 11.000....(33 zeros) = 2+33=35 digits = 35, should work
INSERT INTO decimal_test_p35_s33_default_scale SELECT 11;
INSERT INTO decimal_test_p35_s33_default_scale SELECT -11;
-- Insert 1111 -> becomes 1111.000....(33 zeros) = 4+33=37 digits > 35, should cause BE exception
INSERT INTO decimal_test_p35_s33_default_scale SELECT 1111;
SELECT * FROM decimal_test_p35_s33_default_scale ORDER BY d1;

-- Case 76: decimal(76, 75) - maximum precision with high scale
CREATE TABLE decimal_test_p76_s75_default_scale (d1 decimal(76, 75)) PROPERTIES("replication_num"="1");
-- Insert 12 -> becomes 12.000....(75 zeros) = 2+75=77 digits > 76, should cause BE exception
INSERT INTO decimal_test_p76_s75_default_scale SELECT 12;
INSERT INTO decimal_test_p76_s75_default_scale SELECT -12;
-- Insert 1 -> becomes 1.000....(75 zeros) = 1+75=76 digits = 76, should work
INSERT INTO decimal_test_p76_s75_default_scale SELECT 1;
INSERT INTO decimal_test_p76_s75_default_scale SELECT -1;
-- Insert 123 -> becomes 123.000....(75 zeros) = 3+75=78 digits > 76, should fe cast to null
INSERT INTO decimal_test_p76_s75_default_scale SELECT 123;
SELECT * FROM decimal_test_p76_s75_default_scale ORDER BY d1;

-- Case 77: decimal(70, 68) - inserting integer will auto-pad 68 zeros
CREATE TABLE decimal_test_p70_s68_default_scale (d1 decimal(70, 68)) PROPERTIES("replication_num"="1");
-- Insert 333 -> becomes 333.000....(68 zeros) = 3+68=71 digits > 70, should cause BE exception
INSERT INTO decimal_test_p70_s68_default_scale SELECT 333;
INSERT INTO decimal_test_p70_s68_default_scale SELECT -333;
-- Insert 33 -> becomes 33.000....(68 zeros) = 2+68=70 digits = 70, should work
INSERT INTO decimal_test_p70_s68_default_scale SELECT 33;
INSERT INTO decimal_test_p70_s68_default_scale SELECT -33;
-- Insert 3333 -> becomes 3333.000....(68 zeros) = 4+68=72 digits > 70, should cause BE exception
INSERT INTO decimal_test_p70_s68_default_scale SELECT 3333;
SELECT * FROM decimal_test_p70_s68_default_scale ORDER BY d1;

-- Case 78: decimal(55, 53) - inserting integer will auto-pad 53 zeros
CREATE TABLE decimal_test_p55_s53_default_scale (d1 decimal(55, 53)) PROPERTIES("replication_num"="1");
-- Insert 777 -> becomes 777.000....(53 zeros) = 3+53=56 digits > 55, should cause BE exception
INSERT INTO decimal_test_p55_s53_default_scale SELECT 777;
INSERT INTO decimal_test_p55_s53_default_scale SELECT -777;
-- Insert 77 -> becomes 77.000....(53 zeros) = 2+53=55 digits = 55, should work
INSERT INTO decimal_test_p55_s53_default_scale SELECT 77;
INSERT INTO decimal_test_p55_s53_default_scale SELECT -77;
-- Insert 7777 -> becomes 7777.000....(53 zeros) = 4+53=57 digits > 55, should cause BE exception
INSERT INTO decimal_test_p55_s53_default_scale SELECT 7777;
SELECT * FROM decimal_test_p55_s53_default_scale ORDER BY d1;

-- ============================================
-- Part 17: Zero and Single Digit Default Scale Tests
-- ============================================

-- Case 79: decimal(76, 76) - all decimal places, inserting 0
CREATE TABLE decimal_test_p76_s76_zero_default (d1 decimal(76, 76)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p76_s76_zero_default SELECT 0;
SELECT * FROM decimal_test_p76_s76_zero_default ORDER BY d1;

-- Case 80: decimal(65, 64) - inserting single digits
CREATE TABLE decimal_test_p65_s64_single_digit (d1 decimal(65, 64)) PROPERTIES("replication_num"="1");
-- Insert 2 -> becomes 2.000....(64 zeros) = 1+64=65 digits = 65, should work
INSERT INTO decimal_test_p65_s64_single_digit SELECT 2;
INSERT INTO decimal_test_p65_s64_single_digit SELECT -2;
-- Insert 22 -> becomes 22.000....(64 zeros) = 2+64=66 digits > 65, should cause BE exception
INSERT INTO decimal_test_p65_s64_single_digit SELECT 22;
INSERT INTO decimal_test_p65_s64_single_digit SELECT -22;
SELECT * FROM decimal_test_p65_s64_single_digit ORDER BY d1;

-- Case 81: decimal(42, 40) - boundary test with default scale
CREATE TABLE decimal_test_p42_s40_boundary_default (d1 decimal(42, 40)) PROPERTIES("replication_num"="1");
-- Insert 123 -> becomes 123.000....(40 zeros) = 3+40=43 digits > 42, should cause BE exception
INSERT INTO decimal_test_p42_s40_boundary_default SELECT 123;
INSERT INTO decimal_test_p42_s40_boundary_default SELECT -123;
-- Insert 12 -> becomes 12.000....(40 zeros) = 2+40=42 digits = 42, should work
INSERT INTO decimal_test_p42_s40_boundary_default SELECT 12;
INSERT INTO decimal_test_p42_s40_boundary_default SELECT -12;
-- Insert 1234 -> becomes 1234.000....(40 zeros) = 4+40=44 digits > 42, should cause BE exception
INSERT INTO decimal_test_p42_s40_boundary_default SELECT 1234;
SELECT * FROM decimal_test_p42_s40_boundary_default ORDER BY d1;


-- ============================================
-- Part 18: Decimal Rounding and Overflow Tests
-- ============================================

-- Case 82: decimal(50, 10) - Decimal part exceeds scale, requires rounding
CREATE TABLE decimal_test_p50_s10_rounding (d1 decimal(50, 10)) PROPERTIES("replication_num"="1");
-- Integer part: 40 digits < 50-10=40 digit limit, Decimal part: 15 digits > 10 digits, requires rounding
INSERT INTO decimal_test_p50_s10_rounding SELECT 1234567890123456789012345678901234567890.123456789012345;
INSERT INTO decimal_test_p50_s10_rounding SELECT -1234567890123456789012345678901234567890.123456789012345;
-- Test rounding up: 11th decimal digit is 6, should round up
INSERT INTO decimal_test_p50_s10_rounding SELECT 123.12345678906789;
INSERT INTO decimal_test_p50_s10_rounding SELECT -123.12345678906789;
-- Test rounding down: 11th decimal digit is 4, should round down
INSERT INTO decimal_test_p50_s10_rounding SELECT 123.12345678904321;
INSERT INTO decimal_test_p50_s10_rounding SELECT -123.12345678904321;
-- Test rounding up: 11th decimal digit is 5, should round up
INSERT INTO decimal_test_p50_s10_rounding SELECT 123.12345678905000;
INSERT INTO decimal_test_p50_s10_rounding SELECT -123.12345678905000;
SELECT * FROM decimal_test_p50_s10_rounding ORDER BY d1;

-- Case 83: decimal(50, 10) - Integer part exceeds precision limit
CREATE TABLE decimal_test_p50_s10_overflow (d1 decimal(50, 10)) PROPERTIES("replication_num"="1");
-- Integer part: 41 digits > 50-10=40 digit limit, Decimal part: 5 digits < 10 digits, should cause BE error
INSERT INTO decimal_test_p50_s10_overflow SELECT 12345678901234567890123456789012345678901.12345;
INSERT INTO decimal_test_p50_s10_overflow SELECT -12345678901234567890123456789012345678901.12345;

-- Total digits exceed 50 digits case
INSERT INTO decimal_test_p50_s10_overflow SELECT 123456789012345678901234567890123456789012345678901.12345;
SELECT * FROM decimal_test_p50_s10_overflow ORDER BY d1;

-- Case 84: decimal(50, 10) - Both integer and decimal parts exceed limits
CREATE TABLE decimal_test_p50_s10_both_overflow (d1 decimal(50, 10)) PROPERTIES("replication_num"="1");
INSERT INTO decimal_test_p50_s10_both_overflow SELECT 1234567890123456789012345678.12345678954;
INSERT INTO decimal_test_p50_s10_both_overflow SELECT 1234567890123456789012345678.12345678955;
INSERT INTO decimal_test_p50_s10_both_overflow SELECT -1234567890123456789012345678.12345678955;
SELECT * FROM decimal_test_p50_s10_both_overflow ORDER BY d1;

