-- name: test_decimal256_window_functions
DROP DATABASE IF EXISTS test_decimal256_window;
CREATE DATABASE test_decimal256_window;
USE test_decimal256_window;

-- Create test table with decimal256 types
CREATE TABLE decimal_window_test (
    id INT,
    category VARCHAR(10),
    d50_15 DECIMAL(50,15),    -- 35 integer digits + 15 decimal digits
    d76_20 DECIMAL(76,20),    -- 56 integer digits + 20 decimal digits
    d76_0 DECIMAL(76,0)       -- 76 integer digits + 0 decimal digits
) PROPERTIES("replication_num"="1");

-- Insert test data - using values beyond decimal128 range (>38 digits)
-- Each category has multiple rows for proper window function testing
INSERT INTO decimal_window_test VALUES
-- Category A (4 rows)
(1, 'A', 12345678901234567890123456789012345.123456789012345, 12345678901234567890123456789012345678901234567890123456.12345678901234567890, 1234567890123456789012345678901234567890123456789012345678901234567890123456),
(2, 'A', 98765432109876543210987654321098765.456789012345678, 98765432109876543210987654321098765432109876543210987654.45678901234567890123, 9876543210987654321098765432109876543210987654321098765432109876543210987654),
(3, 'A', 55555555555555555555555555555555555.789012345678901, 55555555555555555555555555555555555555555555555555555555.78901234567890123456, 5555555555555555555555555555555555555555555555555555555555555555555555555555),
(4, 'A', 66666666666666666666666666666666666.111111111111111, 66666666666666666666666666666666666666666666666666666666.11111111111111111111, 6666666666666666666666666666666666666666666666666666666666666666666666666666),

-- Category B (4 rows)
(5, 'B', 77777777777777777777777777777777777.012345678901234, 77777777777777777777777777777777777777777777777777777777.01234567890123456789, 7777777777777777777777777777777777777777777777777777777777777777777777777777),
(6, 'B', 44444444444444444444444444444444444.567890123456789, 44444444444444444444444444444444444444444444444444444444.56789012345678901234, 4444444444444444444444444444444444444444444444444444444444444444444444444444),
(7, 'B', 88888888888888888888888888888888888.901234567890123, 88888888888888888888888888888888888888888888888888888888.90123456789012345678, 8888888888888888888888888888888888888888888888888888888888888888888888888888),
(8, 'B', 33333333333333333333333333333333333.222222222222222, 33333333333333333333333333333333333333333333333333333333.22222222222222222222, 3333333333333333333333333333333333333333333333333333333333333333333333333333),

-- Category C (4 rows)
(9, 'C', 11111111111111111111111111111111111.234567890123456, 11111111111111111111111111111111111111111111111111111111.23456789012345678901, 1111111111111111111111111111111111111111111111111111111111111111111111111111),
(10, 'C', 22222222222222222222222222222222222.678901234567890, 22222222222222222222222222222222222222222222222222222222.67890123456789012345, 2222222222222222222222222222222222222222222222222222222222222222222222222222),
(11, 'C', 99999888887777766666555554444433333.345678901234567, 99999888887777766666555554444433333222221111100009999988.34567890123456789012, 9999988888777776666655555444443333322222111110000099999888877776666555544),
(12, 'C', 77777666665555544444333332222211111.777777777777777, 77777666665555544444333332222211111000009999988888777776.77777777777777777777, 7777766666555554444433333222221111100000999998888877777666655554444333322);

-- Test 1: Basic ranking functions
SELECT
    'Test1_RANKING_FUNCTIONS' as test_name,
    id,
    category,
    d50_15,
    ROW_NUMBER() OVER (ORDER BY d50_15) as row_num,
    RANK() OVER (ORDER BY d50_15) as rank_val,
    DENSE_RANK() OVER (ORDER BY d50_15) as dense_rank_val
FROM decimal_window_test
ORDER BY d50_15;

-- Test 2: Partition by category ranking
SELECT
    'Test2_PARTITION_RANKING' as test_name,
    id,
    category,
    d76_20,
    ROW_NUMBER() OVER (PARTITION BY category ORDER BY d76_20) as row_num_by_cat,
    RANK() OVER (PARTITION BY category ORDER BY d76_20) as rank_by_cat
FROM decimal_window_test
ORDER BY category, d76_20;

-- Test 3: Window aggregate functions
SELECT
    'Test3_WINDOW_AGGREGATES' as test_name,
    id,
    category,
    d50_15,
    SUM(d50_15) OVER (ORDER BY id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) as moving_sum,
    AVG(d50_15) OVER (PARTITION BY category ORDER BY id) as running_avg_by_cat,
    COUNT(*) OVER (PARTITION BY category) as count_by_cat,
    MAX(d76_0) OVER (PARTITION BY category ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as running_max
FROM decimal_window_test
ORDER BY id;

-- Test 4: LEAD and LAG functions
SELECT
    'Test4_LEAD_LAG' as test_name,
    id,
    category,
    d76_20,
    LAG(d76_20, 1) OVER (ORDER BY d76_20) as prev_val,
    LEAD(d76_20, 1) OVER (ORDER BY d76_20) as next_val,
    LAG(d76_20, 1, 0.0) OVER (PARTITION BY category ORDER BY d76_20) as prev_val_by_cat,
    LEAD(d76_20, 1, 0.0) OVER (PARTITION BY category ORDER BY d76_20) as next_val_by_cat
FROM decimal_window_test
ORDER BY d76_20;

-- Test 5: FIRST_VALUE and LAST_VALUE
SELECT
    'Test5_FIRST_LAST_VALUE' as test_name,
    id,
    category,
    d76_0,
    FIRST_VALUE(d76_0) OVER (PARTITION BY category ORDER BY d76_0) as first_val_by_cat,
    LAST_VALUE(d76_0) OVER (PARTITION BY category ORDER BY d76_0 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_val_by_cat,
    FIRST_VALUE(d50_15) OVER (ORDER BY id ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) as first_val_window
FROM decimal_window_test
ORDER BY category, d76_0;

-- Test 6: Complex window expressions
SELECT
    'Test6_COMPLEX_WINDOW' as test_name,
    id,
    category,
    d50_15,
    d76_20,
    SUM(d50_15 * d76_20) OVER (PARTITION BY category ORDER BY id) as running_product_sum,
    AVG(d50_15 + d76_20) OVER (ORDER BY id ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) as moving_sum_avg
FROM decimal_window_test
ORDER BY id;
