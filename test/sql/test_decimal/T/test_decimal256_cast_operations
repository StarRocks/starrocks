-- name: test_decimal256_cast_operations
DROP DATABASE IF EXISTS test_decimal256_cast;
CREATE DATABASE test_decimal256_cast;
USE test_decimal256_cast;

-- Create test table with various data types
CREATE TABLE cast_test_source (
    id int,
    bool_val boolean,
    tinyint_val tinyint,
    smallint_val smallint,
    int_val int,
    bigint_val bigint,
    largeint_val largeint,
    float_val float,
    double_val double,
    varchar_val varchar(100),
    -- decimal256 columns for testing (precision > 38, <= 76)
    decimal256_50_15 decimal(50,15),  -- 50 digits total, 15 after decimal
    decimal256_76_20 decimal(76,20),  -- 76 digits total, 20 after decimal
    decimal256_76_0 decimal(76,0),    -- 76 digits total, 0 after decimal
    -- regular decimal columns for comparison (precision <= 38)
    decimal_38_10 decimal(38,10),     -- 38 digits total, 10 after decimal
    decimal_20_5 decimal(20,5)        -- 20 digits total, 5 after decimal
) ENGINE=OLAP
DUPLICATE KEY(id)
DISTRIBUTED BY HASH(id) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);

-- Insert comprehensive test data with correct digit limits
INSERT INTO cast_test_source VALUES
-- Basic values - decimal256 (50,15): max 35 digits before decimal, 15 after
-- decimal256 (76,20): max 56 digits before decimal, 20 after
-- decimal256 (76,0): max 76 digits before decimal, 0 after
(1, true, 127, 32767, 2147483647, 9223372036854775807, 170141183460469231731687303715884105727,
 3.14159, 2.718281828459045, '12345678901234567890123456789012345.123456789012345',
 12345678901234567890123456789012345.123456789012345,  -- 35+15=50 digits
 12345678901234567890123456789012345678901234567890123456.12345678901234567890,  -- 56+20=76 digits
 1234567890123456789012345678901234567890123456789012345678901234567890123456,  -- 76 digits
 1234567890123456789012345678.1234567890,  -- 28+10=38 digits
 123456789012345.12345),  -- 15+5=20 digits

-- Zero values
(2, false, 0, 0, 0, 0, 0, 0.0, 0.0, '0',
 0.000000000000000,
 0.00000000000000000000,
 0,
 0.0000000000,
 0.00000),

-- Negative values
(3, false, -128, -32768, -2147483648, -9223372036854775808, -170141183460469231731687303715884105728,
 -3.14159, -2.718281828459045, '-87654321098765432109876543210987654.987654321098765',
 -87654321098765432109876543210987654.987654321098765,  -- 35+15=50 digits
 -87654321098765432109876543210987654321098765432109876543.98765432109876543210,  -- 56+20=76 digits
 -8765432109876543210987654321098765432109876543210987654321098765432109876543,  -- 76 digits
 -8765432109876543210987654321.9876543210,  -- 28+10=38 digits
 -876543210987654.98765),  -- 15+5=20 digits

-- Maximum positive values within limits
(4, true, 127, 32767, 2147483647, 9223372036854775807, 170141183460469231731687303715884105727,
 1.7976931348623157e+308, 1.7976931348623157e+308, '99999999999999999999999999999999999.999999999999999',
 99999999999999999999999999999999999.999999999999999,  -- 35+15=50 digits
 99999999999999999999999999999999999999999999999999999999.99999999999999999999,  -- 56+20=76 digits
 9999999999999999999999999999999999999999999999999999999999999999999999999999,  -- 76 digits
 9999999999999999999999999999.9999999999,  -- 28+10=38 digits
 999999999999999.99999),  -- 15+5=20 digits

-- Minimum values (most negative) within limits
(5, false, -128, -32768, -2147483648, -9223372036854775808, -170141183460469231731687303715884105728,
 -1.7976931348623157e+308, -1.7976931348623157e+308, '-99999999999999999999999999999999999.999999999999999',
 -99999999999999999999999999999999999.999999999999999,  -- 35+15=50 digits
 -99999999999999999999999999999999999999999999999999999999.99999999999999999999,  -- 56+20=76 digits
 -9999999999999999999999999999999999999999999999999999999999999999999999999999,  -- 76 digits
 -9999999999999999999999999999.9999999999,  -- 28+10=38 digits
 -999999999999999.99999),  -- 15+5=20 digits

-- Small fractional values
(6, true, 1, 1, 1, 1, 1, 0.000001, 0.000000000000001, '0.000000000000001',
 0.000000000000001,
 0.00000000000000000001,
 1,
 0.0000000001,
 0.00001),

-- Mid-range values
(7, false, 42, 1234, 567890, 123456789012345, 987654321098765432109876543210,
 123.456789, 987.654321123456789, '555555555555555555555555555555555.555555555555555',
 55555555555555555555555555555555555.555555555555555,  -- 35+15=50 digits
 55555555555555555555555555555555555555555555555555555555.55555555555555555555,  -- 56+20=76 digits
 5555555555555555555555555555555555555555555555555555555555555555555555555555,  -- 76 digits
 5555555555555555555555555555.5555555555,  -- 28+10=38 digits
 555555555555555.55555),  -- 15+5=20 digits

-- Edge case: very small positive numbers
(8, true, 1, 10, 100, 1000, 10000,
 1e-10, 1e-15, '0.000000000000001',
 0.000000000000001,
 0.00000000000000000001,
 1,
 0.0000000001,
 0.00001),

-- Edge case: numbers with many digits but within limits
(9, false, 99, 9999, 999999999, 999999999999999999, 99999999999999999999999999999999999999,
 999999.999999, 999999999.999999999999, '77777777777777777777777777777777777.777777777777777',
 77777777777777777777777777777777777.777777777777777,  -- 35+15=50 digits
 77777777777777777777777777777777777777777777777777777777.77777777777777777777,  -- 56+20=76 digits
 7777777777777777777777777777777777777777777777777777777777777777777777777777,  -- 76 digits
 7777777777777777777777777777.7777777777,  -- 28+10=38 digits
 777777777777777.77777),  -- 15+5=20 digits

-- NULL values for testing
(10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

-- Test 1: CAST from boolean to decimal256
SELECT
    id,
    bool_val,
    CAST(bool_val AS decimal(50,15)) as bool_to_decimal256_50_15,
    CAST(bool_val AS decimal(76,20)) as bool_to_decimal256_76_20,
    CAST(bool_val AS decimal(76,0)) as bool_to_decimal256_76_0,
    CAST(bool_val AS decimal(38,10)) as bool_to_decimal_38_10
FROM cast_test_source
ORDER BY id;

-- Test 2: CAST from integer types to decimal256
SELECT
    id,
    tinyint_val,
    CAST(tinyint_val AS decimal(50,15)) as tinyint_to_decimal256,
    smallint_val,
    CAST(smallint_val AS decimal(50,15)) as smallint_to_decimal256,
    int_val,
    CAST(int_val AS decimal(50,15)) as int_to_decimal256
FROM cast_test_source
ORDER BY id;

SELECT
    id,
    bigint_val,
    CAST(bigint_val AS decimal(76,20)) as bigint_to_decimal256,
    largeint_val,
    CAST(largeint_val AS decimal(76,0)) as largeint_to_decimal256
FROM cast_test_source
ORDER BY id;

-- Test 3: CAST from floating point types to decimal256
SELECT
    id,
    float_val,
    CAST(float_val AS decimal(50,15)) as float_to_decimal256_50_15,
    CAST(float_val AS decimal(76,20)) as float_to_decimal256_76_20,
    double_val,
    CAST(double_val AS decimal(50,15)) as double_to_decimal256_50_15,
    CAST(double_val AS decimal(76,20)) as double_to_decimal256_76_20
FROM cast_test_source
ORDER BY id;

-- Test 4: CAST from varchar to decimal256
SELECT
    id,
    varchar_val,
    CAST(varchar_val AS decimal(50,15)) as varchar_to_decimal256_50_15,
    CAST(varchar_val AS decimal(76,20)) as varchar_to_decimal256_76_20,
    CAST(varchar_val AS decimal(76,0)) as varchar_to_decimal256_76_0
FROM cast_test_source
WHERE varchar_val IS NOT NULL
ORDER BY id;

-- Test 5: CAST from decimal256 to other types
SELECT
    id,
    decimal256_50_15,
    CAST(decimal256_50_15 AS boolean) as decimal256_to_bool,
    CAST(decimal256_50_15 AS tinyint) as decimal256_to_tinyint,
    CAST(decimal256_50_15 AS smallint) as decimal256_to_smallint,
    CAST(decimal256_50_15 AS int) as decimal256_to_int,
    CAST(decimal256_50_15 AS bigint) as decimal256_to_bigint,
    CAST(decimal256_50_15 AS largeint) as decimal256_to_largeint
FROM cast_test_source
WHERE decimal256_50_15 IS NOT NULL
ORDER BY id;

SELECT
    id,
    decimal256_76_20,
    CAST(decimal256_76_20 AS float) as decimal256_to_float,
    CAST(decimal256_76_20 AS double) as decimal256_to_double,
    CAST(decimal256_76_20 AS varchar(100)) as decimal256_to_varchar
FROM cast_test_source
WHERE decimal256_76_20 IS NOT NULL
ORDER BY id;

-- Test 6: CAST between different decimal precisions
SELECT
    id,
    decimal256_50_15,
    CAST(decimal256_50_15 AS decimal(76,20)) as decimal256_50_15_to_76_20,
    CAST(decimal256_50_15 AS decimal(76,0)) as decimal256_50_15_to_76_0,
    CAST(decimal256_50_15 AS decimal(38,10)) as decimal256_50_15_to_38_10,
    decimal256_76_20,
    CAST(decimal256_76_20 AS decimal(50,15)) as decimal256_76_20_to_50_15,
    CAST(decimal256_76_20 AS decimal(76,0)) as decimal256_76_20_to_76_0
FROM cast_test_source
WHERE decimal256_50_15 IS NOT NULL AND decimal256_76_20 IS NOT NULL
ORDER BY id;

-- Test 7: CAST between decimal256 and regular decimal
SELECT
    id,
    decimal_38_10,
    CAST(decimal_38_10 AS decimal(50,15)) as decimal_38_10_to_decimal256_50_15,
    CAST(decimal_38_10 AS decimal(76,20)) as decimal_38_10_to_decimal256_76_20,
    decimal256_50_15,
    CAST(decimal256_50_15 AS decimal(38,10)) as decimal256_50_15_to_decimal_38_10,
    CAST(decimal256_50_15 AS decimal(20,5)) as decimal256_50_15_to_decimal_20_5
FROM cast_test_source
WHERE decimal_38_10 IS NOT NULL AND decimal256_50_15 IS NOT NULL
ORDER BY id;

-- Test 8: Arithmetic operations with automatic casting
-- Addition with different types
SELECT
    id,
    decimal256_50_15 + tinyint_val as decimal256_plus_tinyint,
    decimal256_50_15 + smallint_val as decimal256_plus_smallint,
    decimal256_50_15 + int_val as decimal256_plus_int,
    decimal256_50_15 + bigint_val as decimal256_plus_bigint,
    decimal256_50_15 + largeint_val as decimal256_plus_largeint
FROM cast_test_source
WHERE decimal256_50_15 IS NOT NULL AND tinyint_val IS NOT NULL
ORDER BY id;

SELECT
    id,
    decimal256_76_20 + float_val as decimal256_plus_float,
    decimal256_76_20 + double_val as decimal256_plus_double,
    decimal256_50_15 + decimal_38_10 as decimal256_plus_decimal38
FROM cast_test_source
WHERE decimal256_76_20 IS NOT NULL AND float_val IS NOT NULL AND decimal256_50_15 IS NOT NULL AND decimal_38_10 IS NOT NULL
ORDER BY id;

-- Subtraction with different types
SELECT
    id,
    decimal256_50_15 - tinyint_val as decimal256_minus_tinyint,
    decimal256_50_15 - smallint_val as decimal256_minus_smallint,
    decimal256_50_15 - int_val as decimal256_minus_int,
    decimal256_50_15 - bigint_val as decimal256_minus_bigint,
    decimal256_76_20 - decimal_38_10 as decimal256_minus_decimal38
FROM cast_test_source
WHERE decimal256_50_15 IS NOT NULL AND tinyint_val IS NOT NULL AND decimal256_76_20 IS NOT NULL AND decimal_38_10 IS NOT NULL
ORDER BY id;

-- Multiplication with different types
SELECT
    id,
    decimal256_50_15 * tinyint_val as decimal256_multiply_tinyint,
    decimal256_50_15 * smallint_val as decimal256_multiply_smallint,
    decimal256_76_20 * float_val as decimal256_multiply_float,
    decimal256_76_20 * double_val as decimal256_multiply_double,
    decimal256_50_15 * decimal_20_5 as decimal256_multiply_decimal20
FROM cast_test_source
WHERE decimal256_50_15 IS NOT NULL AND decimal256_76_20 IS NOT NULL AND tinyint_val IS NOT NULL
    AND float_val IS NOT NULL AND decimal_20_5 IS NOT NULL
ORDER BY id;

-- Division with different types
SELECT
    id,
    decimal256_50_15 / tinyint_val as decimal256_divide_tinyint,
    decimal256_50_15 / smallint_val as decimal256_divide_smallint,
    decimal256_76_20 / float_val as decimal256_divide_float,
    decimal256_76_20 / double_val as decimal256_divide_double,
    decimal256_50_15 / decimal_20_5 as decimal256_divide_decimal20
FROM cast_test_source
WHERE decimal256_50_15 IS NOT NULL AND decimal256_76_20 IS NOT NULL
    AND tinyint_val IS NOT NULL AND tinyint_val != 0 AND smallint_val != 0
    AND float_val IS NOT NULL AND float_val != 0 AND double_val IS NOT NULL AND double_val != 0
    AND decimal_20_5 IS NOT NULL AND decimal_20_5 != 0
ORDER BY id;

-- Test 9: Mixed arithmetic operations between decimal256 columns
SELECT
    id,
    decimal256_50_15 + decimal256_76_20 as decimal256_addition,
    decimal256_50_15 - decimal256_76_20 as decimal256_subtraction,
    decimal256_50_15 * decimal256_76_0 as decimal256_multiplication,
    decimal256_76_20 / decimal256_76_0 as decimal256_division
FROM cast_test_source
WHERE decimal256_50_15 IS NOT NULL AND decimal256_76_20 IS NOT NULL
    AND decimal256_76_0 IS NOT NULL AND decimal256_76_0 != 0
ORDER BY id;

-- Test 10: Complex arithmetic expressions with casting
SELECT
    id,
    (decimal256_50_15 + CAST(int_val AS decimal(50,15))) * CAST(float_val AS decimal(50,15)) as complex_expr1,
    (decimal256_76_20 - CAST(bigint_val AS decimal(76,20))) / CAST(double_val AS decimal(76,20)) as complex_expr2,
    CAST(tinyint_val AS decimal(76,0)) + decimal256_76_0 - CAST(smallint_val AS decimal(76,0)) as complex_expr3,
    (decimal256_50_15 + decimal_38_10) * CAST(decimal_20_5 AS decimal(50,15)) as complex_expr4
FROM cast_test_source
WHERE decimal256_50_15 IS NOT NULL AND decimal256_76_20 IS NOT NULL AND decimal256_76_0 IS NOT NULL
    AND int_val IS NOT NULL AND float_val IS NOT NULL AND float_val != 0
    AND bigint_val IS NOT NULL AND double_val IS NOT NULL AND double_val != 0
    AND tinyint_val IS NOT NULL AND smallint_val IS NOT NULL
    AND decimal_38_10 IS NOT NULL AND decimal_20_5 IS NOT NULL
ORDER BY id;

-- Test 11: Aggregation functions with casting
SELECT
    SUM(CAST(tinyint_val AS decimal(76,20))) as sum_tinyint_as_decimal256,
    AVG(CAST(int_val AS decimal(76,20))) as avg_int_as_decimal256,
    MIN(CAST(bigint_val AS decimal(76,20))) as min_bigint_as_decimal256,
    MAX(CAST(largeint_val AS decimal(76,0))) as max_largeint_as_decimal256
FROM cast_test_source
WHERE tinyint_val IS NOT NULL;

SELECT
    SUM(decimal256_50_15) as sum_decimal256_50_15,
    AVG(decimal256_76_20) as avg_decimal256_76_20,
    MIN(decimal256_76_0) as min_decimal256_76_0,
    MAX(decimal256_76_0) as max_decimal256_76_0,
    SUM(decimal_38_10) as sum_decimal_38_10,
    AVG(decimal_20_5) as avg_decimal_20_5
FROM cast_test_source
WHERE decimal256_50_15 IS NOT NULL;

-- Test 12: CASE expressions with casting
SELECT
    id,
    CASE
        WHEN tinyint_val > 0 THEN CAST(tinyint_val AS decimal(50,15))
        WHEN tinyint_val < 0 THEN CAST(ABS(tinyint_val) AS decimal(50,15))
        ELSE 0.000000000000000
    END as case_tinyint_to_decimal256,
    CASE
        WHEN decimal256_50_15 > 0 THEN CAST(decimal256_50_15 AS varchar(100))
        WHEN decimal256_50_15 < 0 THEN CONCAT('negative: ', CAST(ABS(decimal256_50_15) AS varchar(100)))
        ELSE 'zero'
    END as case_decimal256_to_varchar,
    CASE
        WHEN decimal_38_10 > decimal256_50_15 THEN 'decimal38_larger'
        WHEN decimal_38_10 < decimal256_50_15 THEN 'decimal256_larger'
        ELSE 'equal'
    END as case_decimal_comparison
FROM cast_test_source
WHERE decimal256_50_15 IS NOT NULL AND decimal_38_10 IS NOT NULL
ORDER BY id;

-- Test 13: Comparison operations with automatic casting
SELECT
    id,
    decimal256_50_15 > CAST(int_val AS decimal(50,15)) as decimal256_gt_int,
    decimal256_76_20 = CAST(float_val AS decimal(76,20)) as decimal256_eq_float,
    decimal256_76_0 < CAST(largeint_val AS decimal(76,0)) as decimal256_lt_largeint,
    CAST(bigint_val AS decimal(76,20)) BETWEEN decimal256_76_20 - 1000 AND decimal256_76_20 + 1000 as bigint_between_decimal256,
    decimal256_50_15 > decimal_38_10 as decimal256_gt_decimal38,
    decimal_20_5 = CAST(decimal256_50_15 AS decimal(20,5)) as decimal20_eq_decimal256_cast
FROM cast_test_source
WHERE decimal256_50_15 IS NOT NULL AND decimal256_76_20 IS NOT NULL AND decimal256_76_0 IS NOT NULL
    AND int_val IS NOT NULL AND float_val IS NOT NULL AND largeint_val IS NOT NULL AND bigint_val IS NOT NULL
    AND decimal_38_10 IS NOT NULL AND decimal_20_5 IS NOT NULL
ORDER BY id;

-- Test 14: UNION operations with casting
SELECT id, CAST(tinyint_val AS decimal(76,20)) as unified_decimal256, 'tinyint' as source_type FROM cast_test_source WHERE tinyint_val IS NOT NULL
UNION ALL
SELECT id, CAST(int_val AS decimal(76,20)) as unified_decimal256, 'int' as source_type FROM cast_test_source WHERE int_val IS NOT NULL
UNION ALL
SELECT id, decimal256_76_20 as unified_decimal256, 'decimal256_76_20' as source_type FROM cast_test_source WHERE decimal256_76_20 IS NOT NULL
UNION ALL
SELECT id, CAST(decimal_38_10 AS decimal(76,20)) as unified_decimal256, 'decimal_38_10' as source_type FROM cast_test_source WHERE decimal_38_10 IS NOT NULL
ORDER BY id, unified_decimal256;

-- Test 15
CREATE TABLE cast_test_target (
    id int,
    target_decimal256 decimal(76,20),
    target_decimal38 decimal(38,10),
    target_int bigint
) ENGINE=OLAP
DUPLICATE KEY(id)
DISTRIBUTED BY HASH(id) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);

INSERT INTO cast_test_target VALUES
(1, 12345678901234567890123456789012345678901234567890123456.12345678901234567890, 1234567890123456789012345678.1234567890, 9223372036854775807),
(2, 0.00000000000000000000, 0.0000000000, 0),
(3, -87654321098765432109876543210987654321098765432109876543.98765432109876543210, -8765432109876543210987654321.9876543210, -9223372036854775808),
(4, 99999999999999999999999999999999999999999999999999999999.99999999999999999999, 9999999999999999999999999999.9999999999, 9223372036854775807),
(5, -99999999999999999999999999999999999999999999999999999999.99999999999999999999, -9999999999999999999999999999.9999999999, -9223372036854775808);


-- Test 16: Error handling and boundary tests
SELECT
    id,
    CAST('9999999999999999999999999999999999999999999999999999999999999999999999999999' AS decimal(76,0)) as max_decimal256_76_0,
    CAST('99999999999999999999999999999999999999999999999999999999.99999999999999999999' AS decimal(76,20)) as max_decimal256_76_20,
    CAST('99999999999999999999999999999999999.999999999999999' AS decimal(50,15)) as max_decimal256_50_15
FROM cast_test_source
WHERE id = 1;

-- Test casting very small numbers
SELECT
    id,
    CAST('0.00000000000000000001' AS decimal(76,20)) as min_decimal256_76_20,
    CAST('0.000000000000001' AS decimal(50,15)) as min_decimal256_50_15,
    CAST('0.0000000001' AS decimal(38,10)) as min_decimal_38_10
FROM cast_test_source
WHERE id = 1;

-- Test casting with precision loss
SELECT
    id,
    decimal256_76_20,
    CAST(decimal256_76_20 AS decimal(50,10)) as decimal256_with_precision_loss,
    CAST(decimal256_50_15 AS decimal(38,5)) as decimal256_with_scale_loss,
    CAST(decimal_38_10 AS decimal(20,5)) as decimal38_with_precision_loss
FROM cast_test_source
WHERE decimal256_76_20 IS NOT NULL AND decimal256_50_15 IS NOT NULL AND decimal_38_10 IS NOT NULL
ORDER BY id;

-- Test 17: NULL handling in casting
SELECT
    id,
    CAST(NULL AS decimal(76,20)) as null_to_decimal256,
    CAST(decimal256_50_15 AS varchar(100)) as decimal256_to_varchar_with_null,
    COALESCE(CAST(tinyint_val AS decimal(50,15)), 0.000000000000000) as coalesce_cast_tinyint,
    COALESCE(CAST(decimal_38_10 AS decimal(76,20)), 0.00000000000000000000) as coalesce_cast_decimal38
FROM cast_test_source
ORDER BY id;
