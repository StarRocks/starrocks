-- name: test_decimal256_predicate
DROP DATABASE IF EXISTS test_decimal256_predicate;
CREATE DATABASE test_decimal256_predicate;
USE test_decimal256_predicate;

-- Create decimal256 test table with only precision > 38 columns
CREATE TABLE decimal_test (
    id int,
    big_decimal decimal(50,15),    -- decimal256: max 35 integer digits + 15 decimal digits
    huge_decimal decimal(76,20),   -- decimal256: max 56 integer digits + 20 decimal digits
    max_decimal decimal(76,0)      -- decimal256: max 76 integer digits + 0 decimal digits
) ENGINE=OLAP
DUPLICATE KEY(id)
DISTRIBUTED BY HASH(id) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);

-- Insert test data with strict precision limits
INSERT INTO decimal_test VALUES
-- id=1: normal values
(1, 12345678901234567890123456789012345.123456789012345,
    12345678901234567890123456789012345678901234567890123456.12345678901234567890,
    1234567890123456789012345678901234567890123456789012345678901234567890123456),

-- id=2: another set of values
(2, 87654321098765432109876543210987654.987654321098765,
    87654321098765432109876543210987654321098765432109876543.98765432109876543210,
    8765432109876543210987654321098765432109876543210987654321098765432109876543),

-- id=3: repeating digits
(3, 55555555555555555555555555555555555.555555555555555,
    55555555555555555555555555555555555555555555555555555555.55555555555555555555,
    5555555555555555555555555555555555555555555555555555555555555555555555555555),

-- id=4: all ones
(4, 11111111111111111111111111111111111.111111111111111,
    11111111111111111111111111111111111111111111111111111111.11111111111111111111,
    1111111111111111111111111111111111111111111111111111111111111111111111111111),

-- id=5: near maximum values
(5, 99999999999999999999999999999999999.999999999999999,
    99999999999999999999999999999999999999999999999999999999.99999999999999999999,
    9999999999999999999999999999999999999999999999999999999999999999999999999999),

-- id=6: minimum positive numbers
(6, 0.000000000000001,
    0.00000000000000000001,
    1),

-- id=7: negative numbers
(7, -12345678901234567890123456789012345.123456789012345,
    -12345678901234567890123456789012345678901234567890123456.12345678901234567890,
    -1234567890123456789012345678901234567890123456789012345678901234567890123456),

-- id=8: large negative numbers
(8, -99999999999999999999999999999999999.999999999999999,
    -99999999999999999999999999999999999999999999999999999999.99999999999999999999,
    -9999999999999999999999999999999999999999999999999999999999999999999999999999),

-- id=9: NULL values
(9, NULL, NULL, NULL),

-- id=10: sevens pattern
(10, 77777777777777777777777777777777777.777777777777777,
     77777777777777777777777777777777777777777777777777777777.77777777777777777777,
     7777777777777777777777777777777777777777777777777777777777777777777777777777);

-- Insert boundary test values for each column
INSERT INTO decimal_test VALUES
-- id=11: maximum positive values for each column
(11, 99999999999999999999999999999999999.999999999999999,
     99999999999999999999999999999999999999999999999999999999.99999999999999999999,
     9999999999999999999999999999999999999999999999999999999999999999999999999999),

-- id=12: maximum negative values for each column
(12, -99999999999999999999999999999999999.999999999999999,
     -99999999999999999999999999999999999999999999999999999999.99999999999999999999,
     -9999999999999999999999999999999999999999999999999999999999999999999999999999),

-- id=13: zero values
(13, 0.000000000000000,
     0.00000000000000000000,
     0),

-- id=14: minimum precision positive values
(14, 0.000000000000001,
     0.00000000000000000001,
     1),

-- id=15: minimum precision negative values
(15, -0.000000000000001,
     -0.00000000000000000001,
     -1);

-- Use CAST to ensure correct precision
INSERT INTO decimal_test VALUES
(16, CAST('12345678901234567890123456789012345.123456789012345' AS decimal(50,15)), -- 35+15=50 digits
     CAST('12345678901234567890123456789012345678901234567890123456.12345678901234567890' AS decimal(76,20)), -- 56+20=76 digits
     CAST('1234567890123456789012345678901234567890123456789012345678901234567890123456' AS decimal(76,0))); -- 76+0=76 digits

-- Verify data insertion
SELECT
    id,
    big_decimal,
    huge_decimal,
    max_decimal
FROM decimal_test
ORDER BY id;

-- Check data types and precision
SELECT
    id,
    TYPEOF(big_decimal) as big_decimal_type,
    TYPEOF(huge_decimal) as huge_decimal_type,
    TYPEOF(max_decimal) as max_decimal_type
FROM decimal_test
WHERE id = 1
ORDER BY id;

-- Equality tests
SELECT * FROM decimal_test WHERE big_decimal = 12345678901234567890123456789012345.123456789012345 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal = 12345678901234567890123456789012345678901234567890123456.12345678901234567890 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal = 1234567890123456789012345678901234567890123456789012345678901234567890123456 ORDER BY id;

-- Greater than tests
SELECT * FROM decimal_test WHERE big_decimal > 50000000000000000000000000000000000.000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal > 50000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal > 5000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Less than tests
SELECT * FROM decimal_test WHERE big_decimal < 50000000000000000000000000000000000.000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal < 50000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal < 5000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- IN tests
SELECT * FROM decimal_test WHERE big_decimal IN (
    12345678901234567890123456789012345.123456789012345,
    87654321098765432109876543210987654.987654321098765
) ORDER BY id;

SELECT * FROM decimal_test WHERE huge_decimal IN (
    12345678901234567890123456789012345678901234567890123456.12345678901234567890,
    87654321098765432109876543210987654321098765432109876543.98765432109876543210
) ORDER BY id;

SELECT * FROM decimal_test WHERE max_decimal IN (
    1234567890123456789012345678901234567890123456789012345678901234567890123456,
    8765432109876543210987654321098765432109876543210987654321098765432109876543
) ORDER BY id;

-- NOT IN tests
SELECT * FROM decimal_test WHERE big_decimal NOT IN (
    12345678901234567890123456789012345.123456789012345,
    87654321098765432109876543210987654.987654321098765
) ORDER BY id;

SELECT * FROM decimal_test WHERE huge_decimal NOT IN (
    12345678901234567890123456789012345678901234567890123456.12345678901234567890,
    87654321098765432109876543210987654321098765432109876543.98765432109876543210
) ORDER BY id;

SELECT * FROM decimal_test WHERE max_decimal NOT IN (
    1234567890123456789012345678901234567890123456789012345678901234567890123456,
    8765432109876543210987654321098765432109876543210987654321098765432109876543
) ORDER BY id;

-- BETWEEN tests
SELECT * FROM decimal_test WHERE big_decimal BETWEEN
    10000000000000000000000000000000000.000000000000000 AND
    90000000000000000000000000000000000.000000000000000 ORDER BY id;

SELECT * FROM decimal_test WHERE huge_decimal BETWEEN
    10000000000000000000000000000000000000000000000000000000.00000000000000000000 AND
    90000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;

SELECT * FROM decimal_test WHERE max_decimal BETWEEN
    1000000000000000000000000000000000000000000000000000000000000000000000000000 AND
    9000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- NOT BETWEEN tests
SELECT * FROM decimal_test WHERE big_decimal NOT BETWEEN
    10000000000000000000000000000000000.000000000000000 AND
    90000000000000000000000000000000000.000000000000000 ORDER BY id;

SELECT * FROM decimal_test WHERE huge_decimal NOT BETWEEN
    10000000000000000000000000000000000000000000000000000000.00000000000000000000 AND
    90000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;

SELECT * FROM decimal_test WHERE max_decimal NOT BETWEEN
    1000000000000000000000000000000000000000000000000000000000000000000000000000 AND
    9000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Greater than or equal (>=) tests
SELECT * FROM decimal_test WHERE big_decimal >= 12345678901234567890123456789012345.123456789012345 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal >= 12345678901234567890123456789012345678901234567890123456.12345678901234567890 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal >= 1234567890123456789012345678901234567890123456789012345678901234567890123456 ORDER BY id;

-- Boundary value >= tests
SELECT * FROM decimal_test WHERE big_decimal >= 99999999999999999999999999999999999.999999999999999 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal >= 99999999999999999999999999999999999999999999999999999999.99999999999999999999 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal >= 9999999999999999999999999999999999999999999999999999999999999999999999999999 ORDER BY id;

-- Zero value >= tests
SELECT * FROM decimal_test WHERE big_decimal >= 0.000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal >= 0.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal >= 0 ORDER BY id;

-- Negative number >= tests
SELECT * FROM decimal_test WHERE big_decimal >= -50000000000000000000000000000000000.000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal >= -50000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal >= -5000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Small value >= tests
SELECT * FROM decimal_test WHERE big_decimal >= 0.000000000000001 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal >= 0.00000000000000000001 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal >= 1 ORDER BY id;

-- Less than or equal (<=) tests
SELECT * FROM decimal_test WHERE big_decimal <= 87654321098765432109876543210987654.987654321098765 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal <= 87654321098765432109876543210987654321098765432109876543.98765432109876543210 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal <= 8765432109876543210987654321098765432109876543210987654321098765432109876543 ORDER BY id;

-- Maximum value <= tests
SELECT * FROM decimal_test WHERE big_decimal <= 99999999999999999999999999999999999.999999999999999 ORDER BY id;

-- Zero value <= tests
SELECT * FROM decimal_test WHERE big_decimal <= 0.000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal <= 0.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal <= 0 ORDER BY id;

-- Negative number <= tests
SELECT * FROM decimal_test WHERE big_decimal <= -10000000000000000000000000000000000.000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal <= -10000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal <= -1000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Middle value <= tests
SELECT * FROM decimal_test WHERE big_decimal <= 50000000000000000000000000000000000.000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal <= 50000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal <= 5000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Two-condition AND tests
SELECT * FROM decimal_test WHERE big_decimal >= 10000000000000000000000000000000000.000000000000000
    AND big_decimal <= 90000000000000000000000000000000000.000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal >= 10000000000000000000000000000000000000000000000000000000.00000000000000000000
    AND huge_decimal <= 90000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal >= 1000000000000000000000000000000000000000000000000000000000000000000000000000
    AND max_decimal <= 9000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Cross-column AND tests
SELECT * FROM decimal_test WHERE big_decimal >= 10000000000000000000000000000000000.000000000000000 AND huge_decimal <= 90000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal >= 10000000000000000000000000000000000000000000000000000000.00000000000000000000 AND max_decimal <= 9000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE big_decimal >= 0.000000000000000 AND max_decimal >= 0 ORDER BY id;

-- Three-condition AND tests
SELECT * FROM decimal_test WHERE
    big_decimal >= 10000000000000000000000000000000000.000000000000000 AND
    huge_decimal >= 10000000000000000000000000000000000000000000000000000000.00000000000000000000 AND
    max_decimal >= 1000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Mixed comparison AND tests
SELECT * FROM decimal_test WHERE big_decimal > 10000000000000000000000000000000000.000000000000000 AND huge_decimal <= 90000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal >= 10000000000000000000000000000000000000000000000000000000.00000000000000000000 AND max_decimal < 9000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE big_decimal < 90000000000000000000000000000000000.000000000000000 AND max_decimal >= 1000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- NULL handling AND tests
SELECT * FROM decimal_test WHERE big_decimal IS NOT NULL AND huge_decimal IS NOT NULL AND max_decimal IS NOT NULL ORDER BY id;

-- Two-condition OR tests
SELECT * FROM decimal_test WHERE big_decimal <= 10000000000000000000000000000000000.000000000000000
    OR big_decimal >= 90000000000000000000000000000000000.000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal <= 10000000000000000000000000000000000000000000000000000000.00000000000000000000
    OR huge_decimal >= 90000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal <= 1000000000000000000000000000000000000000000000000000000000000000000000000000
    OR max_decimal >= 9000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Cross-column OR tests
SELECT * FROM decimal_test WHERE big_decimal >= 90000000000000000000000000000000000.000000000000000 OR huge_decimal <= 10000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal <= 10000000000000000000000000000000000000000000000000000000.00000000000000000000 OR max_decimal >= 9000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE big_decimal <= 0.000000000000000 OR max_decimal >= 9000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Three-condition OR tests
SELECT * FROM decimal_test WHERE
    big_decimal <= 10000000000000000000000000000000000.000000000000000 OR
    huge_decimal <= 10000000000000000000000000000000000000000000000000000000.00000000000000000000 OR
    max_decimal <= 1000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Mixed comparison OR tests
SELECT * FROM decimal_test WHERE big_decimal < 10000000000000000000000000000000000.000000000000000 OR huge_decimal >= 90000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal <= 10000000000000000000000000000000000000000000000000000000.00000000000000000000 OR max_decimal > 9000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE big_decimal > 90000000000000000000000000000000000.000000000000000 OR max_decimal < 1000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Extreme value OR tests
SELECT * FROM decimal_test WHERE
    big_decimal = 99999999999999999999999999999999999.999999999999999 OR
    big_decimal = -99999999999999999999999999999999999.999999999999999 OR
    big_decimal = 0.000000000000000 ORDER BY id;

SELECT * FROM decimal_test WHERE
    huge_decimal = 99999999999999999999999999999999999999999999999999999999.99999999999999999999 OR
    huge_decimal = -99999999999999999999999999999999999999999999999999999999.99999999999999999999 OR
    huge_decimal = 0.00000000000000000000 ORDER BY id;

SELECT * FROM decimal_test WHERE
    max_decimal = 9999999999999999999999999999999999999999999999999999999999999999999999999999 OR
    max_decimal = -9999999999999999999999999999999999999999999999999999999999999999999999999999 OR
    max_decimal = 0 ORDER BY id;

-- NULL handling OR tests
SELECT * FROM decimal_test WHERE big_decimal IS NULL OR huge_decimal IS NULL OR max_decimal IS NULL ORDER BY id;

-- AND and OR mixed tests
SELECT * FROM decimal_test WHERE
    (big_decimal >= 10000000000000000000000000000000000.000000000000000 OR huge_decimal <= 10000000000000000000000000000000000000000000000000000000.00000000000000000000) AND
    max_decimal >= 1000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Complex nested conditions
SELECT * FROM decimal_test WHERE
    ((big_decimal >= 50000000000000000000000000000000000.000000000000000 OR big_decimal <= 10000000000000000000000000000000000.000000000000000) AND
     (huge_decimal >= 50000000000000000000000000000000000000000000000000000000.00000000000000000000)) OR
    max_decimal = 0 ORDER BY id;

-- Multi-level nested AND OR tests
SELECT * FROM decimal_test WHERE
    (big_decimal BETWEEN 10000000000000000000000000000000000.000000000000000 AND 90000000000000000000000000000000000.000000000000000 AND
     (huge_decimal >= 50000000000000000000000000000000000000000000000000000000.00000000000000000000 OR huge_decimal <= 10000000000000000000000000000000000000000000000000000000.00000000000000000000)) OR
    (max_decimal >= 8000000000000000000000000000000000000000000000000000000000000000000000000000 AND
     big_decimal BETWEEN 10000000000000000000000000000000000.000000000000000 AND 90000000000000000000000000000000000.000000000000000) ORDER BY id;

-- Positive and negative mixed conditions
SELECT * FROM decimal_test WHERE
    (big_decimal >= 0.000000000000000 AND huge_decimal >= 0.00000000000000000000 AND max_decimal >= 0) OR
    (big_decimal <= 0.000000000000000 AND huge_decimal <= 0.00000000000000000000 AND max_decimal <= 0) ORDER BY id;

SELECT * FROM decimal_test WHERE
    (big_decimal >= 0.000000000000000 OR huge_decimal >= 0.00000000000000000000) AND
    (max_decimal >= 0 OR max_decimal <= -1000000000000000000000000000000000000000000000000000000000000000000000000000) ORDER BY id;

-- Range query performance tests
SELECT COUNT(*) FROM decimal_test WHERE
    big_decimal >= 10000000000000000000000000000000000.000000000000000 OR
    huge_decimal >= 10000000000000000000000000000000000000000000000000000000.00000000000000000000 OR
    max_decimal >= 1000000000000000000000000000000000000000000000000000000000000000000000000000;

-- Single column IS NULL tests
SELECT * FROM decimal_test WHERE big_decimal IS NULL ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal IS NULL ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal IS NULL ORDER BY id;

-- Count NULL values for each column
SELECT COUNT(*) as null_big_decimal_count FROM decimal_test WHERE big_decimal IS NULL;
SELECT COUNT(*) as null_huge_decimal_count FROM decimal_test WHERE huge_decimal IS NULL;
SELECT COUNT(*) as null_max_decimal_count FROM decimal_test WHERE max_decimal IS NULL;

-- Use aggregate functions to count NULL values for all columns
SELECT
    SUM(CASE WHEN big_decimal IS NULL THEN 1 ELSE 0 END) as big_decimal_nulls,
    SUM(CASE WHEN huge_decimal IS NULL THEN 1 ELSE 0 END) as huge_decimal_nulls,
    SUM(CASE WHEN max_decimal IS NULL THEN 1 ELSE 0 END) as max_decimal_nulls
FROM decimal_test;

-- Single column IS NOT NULL tests
SELECT * FROM decimal_test WHERE big_decimal IS NOT NULL ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal IS NOT NULL ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal IS NOT NULL ORDER BY id;

-- Count non-NULL values for each column
SELECT COUNT(*) as not_null_big_decimal_count FROM decimal_test WHERE big_decimal IS NOT NULL;
SELECT COUNT(*) as not_null_huge_decimal_count FROM decimal_test WHERE huge_decimal IS NOT NULL;
SELECT COUNT(*) as not_null_max_decimal_count FROM decimal_test WHERE max_decimal IS NOT NULL;

-- Use aggregate functions to count non-NULL values for all columns
SELECT
    SUM(CASE WHEN big_decimal IS NOT NULL THEN 1 ELSE 0 END) as big_decimal_not_nulls,
    SUM(CASE WHEN huge_decimal IS NOT NULL THEN 1 ELSE 0 END) as huge_decimal_not_nulls,
    SUM(CASE WHEN max_decimal IS NOT NULL THEN 1 ELSE 0 END) as max_decimal_not_nulls
FROM decimal_test;

-- Insert various NULL combination test data
INSERT INTO decimal_test VALUES
-- id=17: only big_decimal is NULL
(17, NULL,
     12345678901234567890123456789012345678901234567890123456.12345678901234567890,
     1234567890123456789012345678901234567890123456789012345678901234567890123456),

-- id=18: only huge_decimal is NULL
(18, 12345678901234567890123456789012345.123456789012345,
     NULL,
     1234567890123456789012345678901234567890123456789012345678901234567890123456),

-- id=19: only max_decimal is NULL
(19, 12345678901234567890123456789012345.123456789012345,
     12345678901234567890123456789012345678901234567890123456.12345678901234567890,
     NULL),

-- id=20: big_decimal and huge_decimal are NULL
(20, NULL, NULL,
     1234567890123456789012345678901234567890123456789012345678901234567890123456),

-- id=21: big_decimal and max_decimal are NULL
(21, NULL,
     12345678901234567890123456789012345678901234567890123456.12345678901234567890,
     NULL),

-- id=22: huge_decimal and max_decimal are NULL
(22, 12345678901234567890123456789012345.123456789012345,
     NULL, NULL),

-- id=23: alternating NULL (columns 1 and 3)
(23, NULL,
     12345678901234567890123456789012345678901234567890123456.12345678901234567890,
     NULL),

-- id=24: alternating NULL (column 2)
(24, 12345678901234567890123456789012345.123456789012345,
     NULL,
     1234567890123456789012345678901234567890123456789012345678901234567890123456),

-- id=25: all columns NULL except id
(25, NULL, NULL, NULL);

-- Two columns both NULL AND tests
SELECT * FROM decimal_test WHERE big_decimal IS NULL AND huge_decimal IS NULL ORDER BY id;
SELECT * FROM decimal_test WHERE big_decimal IS NULL AND max_decimal IS NULL ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal IS NULL AND max_decimal IS NULL ORDER BY id;

-- Two columns both NULL OR tests
SELECT * FROM decimal_test WHERE big_decimal IS NULL OR huge_decimal IS NULL ORDER BY id;
SELECT * FROM decimal_test WHERE big_decimal IS NULL OR max_decimal IS NULL ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal IS NULL OR max_decimal IS NULL ORDER BY id;

-- All three columns NULL test
SELECT * FROM decimal_test WHERE big_decimal IS NULL AND huge_decimal IS NULL AND max_decimal IS NULL ORDER BY id;

-- Any of three columns NULL test
SELECT * FROM decimal_test WHERE big_decimal IS NULL OR huge_decimal IS NULL OR max_decimal IS NULL ORDER BY id;

-- All columns NULL test
SELECT * FROM decimal_test WHERE
    big_decimal IS NULL AND
    huge_decimal IS NULL AND
    max_decimal IS NULL ORDER BY id;

-- Any column NULL test
SELECT * FROM decimal_test WHERE
    big_decimal IS NULL OR
    huge_decimal IS NULL OR
    max_decimal IS NULL ORDER BY id;

-- Two columns both NOT NULL AND tests
SELECT * FROM decimal_test WHERE big_decimal IS NOT NULL AND huge_decimal IS NOT NULL ORDER BY id;
SELECT * FROM decimal_test WHERE big_decimal IS NOT NULL AND max_decimal IS NOT NULL ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal IS NOT NULL AND max_decimal IS NOT NULL ORDER BY id;

-- Two columns both NOT NULL OR tests
SELECT * FROM decimal_test WHERE big_decimal IS NOT NULL OR huge_decimal IS NOT NULL ORDER BY id;
SELECT * FROM decimal_test WHERE big_decimal IS NOT NULL OR max_decimal IS NOT NULL ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal IS NOT NULL OR max_decimal IS NOT NULL ORDER BY id;

-- All three columns NOT NULL test
SELECT * FROM decimal_test WHERE big_decimal IS NOT NULL AND huge_decimal IS NOT NULL AND max_decimal IS NOT NULL ORDER BY id;

-- Any of three columns NOT NULL test
SELECT * FROM decimal_test WHERE big_decimal IS NOT NULL OR huge_decimal IS NOT NULL OR max_decimal IS NOT NULL ORDER BY id;

-- Complex mixed conditions
SELECT * FROM decimal_test WHERE
    (big_decimal IS NULL AND huge_decimal IS NOT NULL) OR
    (max_decimal IS NOT NULL AND big_decimal IS NULL) ORDER BY id;

SELECT * FROM decimal_test WHERE
    (huge_decimal IS NULL OR max_decimal IS NULL) AND
    (big_decimal IS NOT NULL) ORDER BY id;

-- Alternating NULL and NOT NULL patterns
SELECT * FROM decimal_test WHERE
    big_decimal IS NULL AND
    huge_decimal IS NOT NULL AND
    max_decimal IS NULL ORDER BY id;

SELECT * FROM decimal_test WHERE
    big_decimal IS NOT NULL AND
    huge_decimal IS NULL AND
    max_decimal IS NOT NULL ORDER BY id;

-- NULL with equality condition combinations
SELECT * FROM decimal_test WHERE big_decimal IS NULL OR big_decimal = 12345678901234567890123456789012345.123456789012345 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal IS NULL OR huge_decimal = 12345678901234567890123456789012345678901234567890123456.12345678901234567890 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal IS NULL OR max_decimal = 1234567890123456789012345678901234567890123456789012345678901234567890123456 ORDER BY id;

-- NULL with range condition combinations
SELECT * FROM decimal_test WHERE big_decimal IS NULL OR (big_decimal >= 10000000000000000000000000000000000.000000000000000 AND big_decimal <= 90000000000000000000000000000000000.000000000000000) ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal IS NULL OR (huge_decimal >= 10000000000000000000000000000000000000000000000000000000.00000000000000000000 AND huge_decimal <= 90000000000000000000000000000000000000000000000000000000.00000000000000000000) ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal IS NULL OR max_decimal >= 5000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- NOT NULL with numeric condition combinations
SELECT * FROM decimal_test WHERE big_decimal IS NOT NULL AND big_decimal >= 50000000000000000000000000000000000.000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE huge_decimal IS NOT NULL AND huge_decimal <= 50000000000000000000000000000000000000000000000000000000.00000000000000000000 ORDER BY id;
SELECT * FROM decimal_test WHERE max_decimal IS NOT NULL AND max_decimal BETWEEN 1000000000000000000000000000000000000000000000000000000000000000000000000000 AND 9000000000000000000000000000000000000000000000000000000000000000000000000000 ORDER BY id;

-- Complex NULL with numeric condition combinations
SELECT * FROM decimal_test WHERE
    (big_decimal IS NULL OR big_decimal >= 50000000000000000000000000000000000.000000000000000) AND
    (huge_decimal IS NOT NULL AND huge_decimal <= 50000000000000000000000000000000000000000000000000000000.00000000000000000000) ORDER BY id;

SELECT * FROM decimal_test WHERE
    (max_decimal IS NULL OR max_decimal >= 5000000000000000000000000000000000000000000000000000000000000000000000000000) AND
    (big_decimal IS NOT NULL OR huge_decimal IS NULL) ORDER BY id;

-- NULL with IN condition combinations
SELECT * FROM decimal_test WHERE
    big_decimal IS NULL OR
    big_decimal IN (
        12345678901234567890123456789012345.123456789012345,
        87654321098765432109876543210987654.987654321098765
    ) ORDER BY id;

SELECT * FROM decimal_test WHERE
    huge_decimal IS NULL OR
    huge_decimal IN (
        12345678901234567890123456789012345678901234567890123456.12345678901234567890,
        87654321098765432109876543210987654321098765432109876543.98765432109876543210
    ) ORDER BY id;

SELECT * FROM decimal_test WHERE
    max_decimal IS NULL OR
    max_decimal IN (
        1234567890123456789012345678901234567890123456789012345678901234567890123456,
        8765432109876543210987654321098765432109876543210987654321098765432109876543
    ) ORDER BY id;

-- COUNT with NULL
SELECT COUNT(*) as total_rows FROM decimal_test;
SELECT COUNT(big_decimal) as non_null_big_decimal FROM decimal_test;
SELECT COUNT(huge_decimal) as non_null_huge_decimal FROM decimal_test;
SELECT COUNT(max_decimal) as non_null_max_decimal FROM decimal_test;

-- SUM with NULL (NULL values are ignored)
SELECT SUM(big_decimal) as sum_big_decimal FROM decimal_test;
SELECT SUM(huge_decimal) as sum_huge_decimal FROM decimal_test;
SELECT SUM(max_decimal) as sum_max_decimal FROM decimal_test;

-- AVG with NULL (NULL values are ignored)
SELECT AVG(big_decimal) as avg_big_decimal FROM decimal_test;
SELECT AVG(huge_decimal) as avg_huge_decimal FROM decimal_test;
SELECT AVG(max_decimal) as avg_max_decimal FROM decimal_test;

-- MIN/MAX with NULL (NULL values are ignored)
SELECT
    MIN(big_decimal) as min_big_decimal, MAX(big_decimal) as max_big_decimal,
    MIN(huge_decimal) as min_huge_decimal, MAX(huge_decimal) as max_huge_decimal,
    MIN(max_decimal) as min_max_decimal, MAX(max_decimal) as max_max_decimal
FROM decimal_test;

-- Group by NULL status
SELECT
    CASE WHEN big_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as big_decimal_status,
    COUNT(*) as count
FROM decimal_test
GROUP BY CASE WHEN big_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END
ORDER BY big_decimal_status;

SELECT
    CASE WHEN huge_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as huge_decimal_status,
    COUNT(*) as count
FROM decimal_test
GROUP BY CASE WHEN huge_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END
ORDER BY huge_decimal_status;

SELECT
    CASE WHEN max_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as max_decimal_status,
    COUNT(*) as count
FROM decimal_test
GROUP BY CASE WHEN max_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END
ORDER BY max_decimal_status;

-- Multi-column NULL status combination grouping
SELECT
    CASE WHEN big_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as big_decimal_status,
    CASE WHEN huge_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as huge_decimal_status,
    COUNT(*) as count
FROM decimal_test
GROUP BY
    CASE WHEN big_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END,
    CASE WHEN huge_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END
ORDER BY big_decimal_status, huge_decimal_status;

SELECT
    CASE WHEN big_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as big_decimal_status,
    CASE WHEN max_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as max_decimal_status,
    COUNT(*) as count
FROM decimal_test
GROUP BY
    CASE WHEN big_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END,
    CASE WHEN max_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END
ORDER BY big_decimal_status, max_decimal_status;

-- Three-column NULL status combination grouping
SELECT
    CASE WHEN big_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as big_decimal_status,
    CASE WHEN huge_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as huge_decimal_status,
    CASE WHEN max_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as max_decimal_status,
    COUNT(*) as count
FROM decimal_test
GROUP BY
    CASE WHEN big_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END,
    CASE WHEN huge_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END,
    CASE WHEN max_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END
ORDER BY big_decimal_status, huge_decimal_status, max_decimal_status;

-- HAVING with NULL conditions
SELECT
    CASE WHEN big_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as big_decimal_status,
    COUNT(*) as count
FROM decimal_test
GROUP BY CASE WHEN big_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END
HAVING COUNT(*) > 1
ORDER BY big_decimal_status;

SELECT
    CASE WHEN huge_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END as huge_decimal_status,
    COUNT(*) as count
FROM decimal_test
GROUP BY CASE WHEN huge_decimal IS NULL THEN 'NULL' ELSE 'NOT NULL' END
HAVING COUNT(*) > 2
ORDER BY huge_decimal_status;

-- NULL behavior in sorting (NULL values usually sort first or last)
SELECT * FROM decimal_test ORDER BY big_decimal;
SELECT * FROM decimal_test ORDER BY big_decimal DESC;
SELECT * FROM decimal_test ORDER BY huge_decimal;
SELECT * FROM decimal_test ORDER BY huge_decimal DESC;
SELECT * FROM decimal_test ORDER BY max_decimal;
SELECT * FROM decimal_test ORDER BY max_decimal DESC;

-- Multi-column sorting with NULL handling
SELECT * FROM decimal_test ORDER BY big_decimal, huge_decimal;
SELECT * FROM decimal_test ORDER BY big_decimal DESC, huge_decimal DESC;
SELECT * FROM decimal_test ORDER BY huge_decimal, max_decimal;
SELECT * FROM decimal_test ORDER BY huge_decimal DESC, max_decimal DESC;
SELECT * FROM decimal_test ORDER BY big_decimal, huge_decimal, max_decimal;
SELECT * FROM decimal_test ORDER BY big_decimal DESC, huge_decimal DESC, max_decimal DESC;

-- Using NULLS FIRST/LAST
SELECT * FROM decimal_test ORDER BY big_decimal NULLS FIRST;
SELECT * FROM decimal_test ORDER BY big_decimal NULLS LAST;
SELECT * FROM decimal_test ORDER BY huge_decimal NULLS FIRST;
SELECT * FROM decimal_test ORDER BY huge_decimal NULLS LAST;
SELECT * FROM decimal_test ORDER BY max_decimal NULLS FIRST;
SELECT * FROM decimal_test ORDER BY max_decimal NULLS LAST;

-- Multi-column sorting with NULLS FIRST/LAST combinations
SELECT * FROM decimal_test ORDER BY big_decimal NULLS FIRST, huge_decimal NULLS LAST;
SELECT * FROM decimal_test ORDER BY big_decimal NULLS LAST, huge_decimal NULLS FIRST;
SELECT * FROM decimal_test ORDER BY big_decimal DESC NULLS FIRST, huge_decimal ASC NULLS LAST;


