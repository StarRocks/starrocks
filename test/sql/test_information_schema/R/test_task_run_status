-- name: test_task_run_status @sequential
create database db_${uuid0};
-- result:
-- !result
use db_${uuid0};
-- result:
-- !result
CREATE TABLE ss( event_day DATE, pv BIGINT) DUPLICATE KEY(event_day) DISTRIBUTED BY HASH(event_day) BUCKETS 8 PROPERTIES("replication_num" = "1");
-- result:
-- !result
insert into ss values('2020-01-14', 1), ('2020-01-14', 3), ('2020-01-15', 2);
-- result:
-- !result
CREATE MATERIALIZED VIEW mv1 DISTRIBUTED BY hash(event_day) 
REFRESH DEFERRED MANUAL
AS SELECT event_day, sum(pv) as sum_pv FROM ss GROUP BY event_day;
-- result:
-- !result
[UC]REFRESH MATERIALIZED VIEW mv1 with sync mode ;
SELECT * FROM mv1 ORDER BY event_day;
-- result:
2020-01-14	4
2020-01-15	2
-- !result
SELECT TABLE_NAME, REFRESH_TYPE, IS_ACTIVE, INACTIVE_REASON FROM information_schema.materialized_views WHERE table_name = 'mv1' and TABLE_SCHEMA='db_${uuid0}';
-- result:
mv1	MANUAL	true	
-- !result
SELECT TABLE_NAME, REFRESH_TYPE, IS_ACTIVE, INACTIVE_REASON FROM information_schema.materialized_views WHERE TABLE_NAME = 'mv1' and TABLE_SCHEMA='db_${uuid0}';
-- result:
mv1	MANUAL	true	
-- !result
SELECT TABLE_NAME, REFRESH_TYPE, IS_ACTIVE, INACTIVE_REASON FROM information_schema.materialized_views WHERE TABLE_SCHEMA = 'db_${uuid0}';
-- result:
mv1	MANUAL	true	
-- !result
SELECT count(1) FROM information_schema.materialized_views WHERE TABLE_SCHEMA = 'db_${uuid0}';
-- result:
1
-- !result
[UC]task_name=SELECT TASK_NAME FROM information_schema.materialized_views WHERE TABLE_SCHEMA = 'db_${uuid0}' AND TABLE_NAME='mv1';
-- result:
mv-10385348
-- !result
SELECT count(1) FROM information_schema.task_runs WHERE TASK_NAME = '${task_name}';
-- result:
1
-- !result
SELECT count(1) FROM information_schema.task_runs WHERE task_name = '${task_name}';
-- result:
1
-- !result
admin set frontend config('enable_task_run_fe_evaluation'='false');
-- result:
-- !result
[UC]query_id=SELECT `QUERY_ID` FROM information_schema.task_runs WHERE task_name = '${task_name}' limit 1;
-- result:
8a6eba59-3073-11f0-8bba-cec5eca5cdd9
-- !result
SELECT count(1) FROM information_schema.task_runs WHERE QUERY_ID = '${query_id}';
-- result:
1
-- !result
SELECT count(1) FROM information_schema.task_runs WHERE query_id= '${query_id}';
-- result:
1
-- !result
[UC]state=SELECT `STATE` FROM information_schema.task_runs WHERE QUERY_ID = '${query_id}';
-- result:
SUCCESS
-- !result
SELECT count(1) FROM information_schema.task_runs WHERE `STATE` = '${state}' and task_name = '${task_name}' and QUERY_ID = '${query_id}';
-- result:
1
-- !result
INSERT INTO _statistics_.task_run_history 
    (task_id, task_run_id, create_time, task_name, task_state, finish_time, expire_time, history_content_json)
    SELECT 1, 'fake-query-id' || generate_series, now(), 'fake-name', 'FAILED', now(), now(), 
        '{"dbName": "default_cluster:sys"}'
    FROM table(generate_series(1, 10000));
-- result:
-- !result
SELECT (SELECT count(*) FROM information_schema.task_runs) 
    >= (SELECT count(*) FROM _statistics_.task_run_history);
-- result:
1
-- !result
SELECT (SELECT count(*) FROM (SELECT * FROM information_schema.task_runs LIMIT 1) r) 
    >= (SELECT count(*) FROM (SELECT * FROM _statistics_.task_run_history LIMIT 1) r);
-- result:
1
-- !result
SELECT (SELECT count(*) FROM (SELECT * FROM information_schema.task_runs LIMIT 4096) r) 
    >= (SELECT count(*) FROM (SELECT * FROM _statistics_.task_run_history LIMIT 4096) r);
-- result:
1
-- !result
SELECT (SELECT count(*) FROM (SELECT * FROM information_schema.task_runs LIMIT 5000) r) 
    >= (SELECT count(*) FROM (SELECT * FROM _statistics_.task_run_history LIMIT 5000) r);
-- result:
1
-- !result
DELETE FROM _statistics_.task_run_history WHERE task_run_id like 'fake-query-id%';
-- result:
-- !result
drop database db_${uuid0};
-- result:
-- !result