-- name: test_agg_feedback
CREATE TABLE `pre_agg_case` (
  `c0` int(11) NULL COMMENT "",
  `c1` char(50) NULL COMMENT "",
  `c2` int(11) NULL COMMENT "",
  `c3` int(11) NULL COMMENT ""
) ENGINE=OLAP
DUPLICATE KEY(`c0`)
COMMENT "OLAP"
DISTRIBUTED BY HASH(`c0`) BUCKETS 5
PROPERTIES (
"compression" = "LZ4",
"fast_schema_evolution" = "true",
"replicated_storage" = "true",
"replication_num" = "1"
);
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
insert into pre_agg_case select generate_series, generate_series, generate_series, generate_series from TABLE(generate_series(1, 50));
-- result:
-- !result
analyze full table pre_agg_case with sync mode;
-- result:
[REGEX].*pre_agg_case	analyze	status	OK
-- !result
set enable_plan_advisor=true;
-- result:
-- !result
set enable_plan_analyzer=true;
-- result:
-- !result
set enable_global_runtime_filter = false;
-- result:
-- !result
function: assert_explain_not_contains("select count(*) from pre_agg_case group by c3", "StreamingAggTuningGuide")
-- result:
None
-- !result
alter plan advisor add select count(*) from pre_agg_case group by c3;
-- result:
[REGEX]Add query into plan advisor in FE
-- !result
function: assert_explain_not_contains("select count(*) from pre_agg_case group by c3", "StreamingAggTuningGuide")
-- result:
None
-- !result
truncate plan advisor;
-- result:
[REGEX]Clear all plan advisor in FE
-- !result
CREATE TABLE __row_util_base (
  k1 bigint NULL
) ENGINE=OLAP
DUPLICATE KEY(`k1`)
DISTRIBUTED BY HASH(`k1`) BUCKETS 32
PROPERTIES (
    "replication_num" = "1"
);
-- result:
-- !result
insert into __row_util_base select generate_series from TABLE(generate_series(0, 10000 - 1));
-- result:
-- !result
insert into __row_util_base select * from __row_util_base; -- 20000
insert into __row_util_base select * from __row_util_base; -- 40000
insert into __row_util_base select * from __row_util_base; -- 80000
insert into __row_util_base select * from __row_util_base; -- 160000
insert into __row_util_base select * from __row_util_base; -- 320000
insert into __row_util_base select * from __row_util_base; -- 640000
insert into __row_util_base select * from __row_util_base; -- 1280000

insert into __row_util_base select * from __row_util_base; 
insert into __row_util_base select * from __row_util_base; 
insert into __row_util_base select * from __row_util_base; 
insert into __row_util_base select * from __row_util_base; 


CREATE TABLE __row_util (
  idx bigint NULL
) ENGINE=OLAP
DUPLICATE KEY(`idx`)
DISTRIBUTED BY HASH(`idx`) BUCKETS 32
PROPERTIES (
    "replication_num" = "1"
);
-- result:
-- !result
insert into __row_util select row_number() over() as idx from __row_util_base;
-- result:
-- !result
CREATE TABLE t1 (
  k1 bigint NULL,
  c1 bigint NULL,
  c2 int NULL
) ENGINE=OLAP
DUPLICATE KEY(`k1`)
DISTRIBUTED BY HASH(`k1`) BUCKETS 16
PROPERTIES (
    "replication_num" = "1"
);
-- result:
-- !result
insert into t1 select idx, idx % (20480000 / 26), idx from __row_util;
-- result:
-- !result
analyze full table t1 with sync mode;
-- result:
[REGEX].*t1	analyze	status	OK
-- !result
select count(1) as cnt from t1 group by c1 order by cnt limit 10;
-- result:
9
25
26
26
26
26
26
26
26
26
-- !result
alter plan advisor add select count(1) as cnt from t1 group by c1 order by cnt limit 10;
-- result:
[REGEX]Add query into plan advisor in FE
-- !result
function: assert_explain_contains("select count(1) as cnt from t1 group by c1 order by cnt limit 10", "StreamingAggTuningGuide")
-- result:
None
-- !result
select count(1) as cnt from t1 group by c1 order by cnt limit 10;
-- result:
9
25
26
26
26
26
26
26
26
26
-- !result