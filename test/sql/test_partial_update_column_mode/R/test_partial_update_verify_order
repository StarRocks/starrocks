-- name: test_partial_update_verify_order
show backends;
create database test_partial_update_verify_order;
-- result:
-- !result
use test_partial_update_verify_order;
-- result:
-- !result
DROP TABLE IF EXISTS tab1;
-- result:
-- !result
CREATE table IF NOT EXISTS tab1 (
          k1 INTEGER,
          k2 INTEGER,
          k3 INTEGER,
          v1 INTEGER,
          v2 INTEGER,
          v3 INTEGER,
          v4 INTEGER
    )
    ENGINE=OLAP
    PRIMARY KEY(`k1`, `k2`)
    DISTRIBUTED BY HASH(`k1`) BUCKETS 1
    PROPERTIES (
        "replication_num" = "1"
    );
-- result:
-- !result
INSERT INTO `tab1` (`k1`, `k2`, `k3`, `v1`, `v2`, `v3`, `v4`) VALUES (1, 1, 1, 1, 1, 1, 1), (2, 2, 2, 2, 2, 2, 2), (3, 3, 3, 3, 3, 3, 3), (4, 4, 4, 4, 4, 4, 4), (5, 5, 5, 5, 5, 5, 5), (6, 6, 6, 6, 6, 6, 6), (7, 7, 7, 7, 7, 7, 7), (8, 8, 8, 8, 8, 8, 8), (9, 9, 9, 9, 9, 9, 9), (10, 10, 10, 10, 10, 10, 10);
-- result:
-- !result
select * from tab1 order by k1;
-- result:
1	1	1	1	1	1	1
2	2	2	2	2	2	2
3	3	3	3	3	3	3
4	4	4	4	4	4	4
5	5	5	5	5	5	5
6	6	6	6	6	6	6
7	7	7	7	7	7	7
8	8	8	8	8	8	8
9	9	9	9	9	9	9
10	10	10	10	10	10	10
-- !result
shell: curl --location-trusted -u root: -T ${root_path}/lib/../common/data/stream_load/sr_partial_update_6.csv -XPUT -H partial_update:true -H partial_update_mode:column -H label:test_partial_update_upsert1 -H column_separator:, -H columns:k1,k2,v3 ${url}/api/test_partial_update_verify_order/tab1/_stream_load
-- result:
0
{
    "Status": "Success",
    "Message": "OK"
}
-- !result
sync;
-- result:
-- !result
select * from tab1 order by k1;
-- result:
1	1	1	1	1	1111	1
2	2	2	2	2	2222	2
3	3	3	3	3	3333	3
4	4	4	4	4	4444	4
5	5	5	5	5	5555	5
6	6	6	6	6	6666	6
7	7	7	7	7	7777	7
8	8	8	8	8	8888	8
9	9	9	9	9	9999	9
10	10	10	10	10	10101010	10
-- !result
CREATE table IF NOT EXISTS tab2 (
          k1 INTEGER,
          k2 INTEGER,
          k3 INTEGER,
          v1 INTEGER,
          v2 INTEGER,
          v3 INTEGER,
          v4 INTEGER
    )
    ENGINE=OLAP
    PRIMARY KEY(`k1`, `k2`)
    DISTRIBUTED BY HASH(`k1`) BUCKETS 1
    order by(`k2`, `k1`)
    PROPERTIES (
        "replication_num" = "1"
    );
-- result:
-- !result
INSERT INTO `tab2` (`k1`, `k2`, `k3`, `v1`, `v2`, `v3`, `v4`) VALUES (1, 10, 1, 1, 1, 1, 1), (2, 9, 2, 2, 2, 2, 2), (3, 8, 3, 3, 3, 3, 3), (4, 7, 4, 4, 4, 4, 4), (5, 6, 5, 5, 5, 5, 5), (6, 5, 6, 6, 6, 6, 6), (7, 4, 7, 7, 7, 7, 7), (8, 3, 8, 8, 8, 8, 8), (9, 2, 9, 9, 9, 9, 9), (10, 1, 10, 10, 10, 10, 10);
-- result:
-- !result
select * from tab2 order by k1;
-- result:
1	10	1	1	1	1	1
2	9	2	2	2	2	2
3	8	3	3	3	3	3
4	7	4	4	4	4	4
5	6	5	5	5	5	5
6	5	6	6	6	6	6
7	4	7	7	7	7	7
8	3	8	8	8	8	8
9	2	9	9	9	9	9
10	1	10	10	10	10	10
-- !result
shell: curl --location-trusted -u root: -T ${root_path}/lib/../common/data/stream_load/sr_partial_update_7.csv -XPUT -H partial_update:true -H partial_update_mode:column -H label:test_partial_update_upsert2 -H column_separator:, -H columns:k1,k2,v3 ${url}/api/test_partial_update_verify_order/tab2/_stream_load
-- result:
0
{
    "Status": "Success",
    "Message": "OK"
}
-- !result
sync;
-- result:
-- !result
select * from tab2 order by k1;
-- result:
1	10	1	1	1	1111	1
2	9	2	2	2	2222	2
3	8	3	3	3	3333	3
4	7	4	4	4	4444	4
5	6	5	5	5	5555	5
6	5	6	6	6	6666	6
7	4	7	7	7	7777	7
8	3	8	8	8	8888	8
9	2	9	9	9	9999	9
10	1	10	10	10	10101010	10
-- !result