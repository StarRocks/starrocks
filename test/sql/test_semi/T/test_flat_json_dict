-- name: test_normal_flat_json_dict @sequential

update information_schema.be_configs set value = 'true' where name = 'enable_json_flat';
set enable_profile = true;
set enable_async_profile = false;
set cbo_json_v2_rewrite = true;
set cbo_json_v2_dict_opt = true;

create view profile_decode as
select trim(unnest) 
from table(unnest(split(get_query_profile(last_query_id()), '\n')))
where unnest like '%DICT_DECODE%'
order by unnest;

CREATE TABLE js2 (
    v1 BIGINT NULL,
    c1 JSON NULL
)
DUPLICATE KEY (v1)
DISTRIBUTED BY HASH(`v1`) BUCKETS 1
PROPERTIES ( "replication_num" = "1" );


insert into js2 
select 
    generate_series, 
    json_object(
        'f1', concat('a', generate_series % 10),
        'f2', concat('a', generate_series % 100),
        'f3', concat('a', generate_series % 200),
        'f4', concat('a', generate_series % 500)
        )
from (table(generate_series(1, 1000)));

-- Test dict_merge function
select dict_merge(get_json_string(c1, 'f1'), 255) from js2 [_META_];
select dict_merge(get_json_string(c1, 'f2'), 255) from js2 [_META_];
select dict_merge(get_json_string(c1, 'f3'), 255) from js2 [_META_];
select dict_merge(get_json_string(c1, 'f4'), 255) from js2 [_META_];
select dict_merge(get_json_string(c1, 'f5'), 255) from js2 [_META_];

insert into js2 
select 
    generate_series, 
    json_object(
        'f1', generate_series % 10,                                 -- integer
        'f2', cast((generate_series % 20) * 1.5 as double),         -- float
        'f3', if(generate_series % 2 = 0, true, false),             -- boolean
        'f4', null,                                                 -- null
        'f5', json_array(generate_series % 5, 'arr', 1.23)          -- array
        )
from (table(generate_series(1, 100)));
select dict_merge(get_json_string(c1, 'f1'), 255) from js2 [_META_];
select dict_merge(get_json_string(c1, 'f2'), 255) from js2 [_META_];
select dict_merge(get_json_string(c1, 'f3'), 255) from js2 [_META_];
select dict_merge(get_json_string(c1, 'f4'), 255) from js2 [_META_];
select dict_merge(get_json_string(c1, 'f5'), 255) from js2 [_META_];


-- Test the dict

truncate table js2;
insert into js2 
select 
    generate_series, 
    json_object(
        'f1', concat('a', generate_series % 10),
        'f2', concat('a', generate_series % 100),
        'f3', concat('a', generate_series % 200),
        'f4', concat('a', generate_series % 500)
        )
from (table(generate_series(1, 1000)));


-- inspect the dict itself
select get_json_string(inspect_global_dict('js2', 'c1'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f1'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f2'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f3'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f4'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f5'), 'dict');

-- test some simple queries
select min(get_json_string(c1, 'f1')) from js2;
select * from profile_decode;
select min(get_json_string(c1, 'f2')) from js2;
select * from profile_decode;
select min(get_json_string(c1, 'f3')) from js2;
select * from profile_decode;
select min(get_json_string(c1, 'f4')) from js2;
select * from profile_decode;
select min(get_json_string(c1, 'f5')) from js2;
select * from profile_decode;
select get_json_string(c1, 'f1') k1, count(*) from js2 group by k1 order by k1 limit 3;
select * from profile_decode;
select get_json_string(c1, 'f2') k1, count(*) from js2 group by k1 order by k1 limit 3;
select * from profile_decode;
select get_json_string(c1, 'f3') k1, count(*) from js2 group by k1 order by k1 limit 3;
select * from profile_decode;
select get_json_string(c1, 'f4') k1, count(*) from js2 group by k1 order by k1 limit 3;
select * from profile_decode;
select get_json_string(c1, 'f5') k1, count(*) from js2 group by k1 order by k1 limit 3;
select * from profile_decode;

-- dict update, invalidate some of dicts
-- f1: valid, cardinality: 10
-- f2: invalid, cardinality: 300
-- f3: invalid, cardinality: 500
-- f4: invalid, cardinality: 500
insert into js2 
select 
    generate_series, 
    json_object(
        'f1', concat('a', generate_series % 10),
        'f2', concat('a', generate_series % 300),
        'f3', concat('a', generate_series % 500),
        'f4', concat('a', generate_series % 500)
        )
from (table(generate_series(1, 1000)));

select get_json_string((inspect_global_dict('js2', 'c1.f1')), 'dict');
select get_json_string((inspect_global_dict('js2', 'c1.f2')), 'dict');
select get_json_string((inspect_global_dict('js2', 'c1.f3')), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f4'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f5'), 'dict');


-- dict update: invalidate all dicts
insert into js2 
select 
    generate_series, 
    json_object(
        'f1', concat('a', generate_series % 1000),
        'f2', concat('a', generate_series % 1000),
        'f3', concat('a', generate_series % 1000),
        'f4', concat('a', generate_series % 1000)
        )
from (table(generate_series(1, 1000)));

select get_json_string(inspect_global_dict('js2', 'c1.f1'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f2'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f3'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f4'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f5'), 'dict');


-- dict update: truncate table
truncate table js2;
select get_json_string(inspect_global_dict('js2', 'c1.f1'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f2'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f3'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f4'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f5'), 'dict');

-- dict update: activate all dicts
insert into js2 
select 
    generate_series, 
    json_object(
        'f1', concat('a', generate_series % 10),
        'f2', concat('a', generate_series % 20),
        'f3', concat('a', generate_series % 30),
        'f4', concat('a', generate_series % 40),
        'f5', concat('a', generate_series % 50)
        )
from (table(generate_series(1, 1000)));

select get_json_string(inspect_global_dict('js2', 'c1.f1'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f2'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f3'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f4'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f5'), 'dict');

-- Test mixed data types with string
insert into js2 
select 
    generate_series, 
    json_object(
        'f1', generate_series % 10,                                 -- integer
        'f2', cast((generate_series % 20) * 1.5 as double),         -- float
        'f3', if(generate_series % 2 = 0, true, false),             -- boolean
        'f4', null,                                                 -- null
        'f5', json_array(generate_series % 5, 'arr', 1.23)          -- array
        )
from (table(generate_series(1, 1000)));

select get_json_string(inspect_global_dict('js2', 'c1.f1'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f2'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f3'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f4'), 'dict');
select get_json_string(inspect_global_dict('js2', 'c1.f5'), 'dict');



-- Test with various JSON data types (not just string):
-- int, float, bool, null, array, object, and nested structures
CREATE TABLE js3 (
    v1 BIGINT NULL,
    c1 JSON NULL
)
DUPLICATE KEY (v1)
DISTRIBUTED BY HASH(`v1`) BUCKETS 1
PROPERTIES ( "replication_num" = "1" );

insert into js3
select 
    generate_series, 
    json_object(
        'str_field', concat('str_', generate_series % 10),
        'int_field', generate_series % 100,
        'float_field', (generate_series % 100) * 1.23,
        'bool_field', if(generate_series % 2 = 0, true, false),
        'null_field', null,
        'array_field', json_array(
            generate_series % 5, 
            concat('arr_', generate_series % 3), 
            (generate_series % 10) * 0.5
        ),
        'object_field', json_object(
            'nested_str', concat('nested_', generate_series % 7),
            'nested_int', generate_series % 7,
            'nested_bool', if(generate_series % 3 = 0, true, false)
        ),
        'deep_nested', json_object(
            'level1', json_object(
                'level2', json_array(
                    json_object(
                        'leaf_str', concat('leaf_', generate_series % 2),
                        'leaf_num', generate_series % 2
                    ),
                    generate_series % 2
                )
            )
        )
    )
from (table(generate_series(1, 1000)));

select dict_merge(get_json_string(c1, 'str_field'), 255) from js3 [_META_];

select get_json_string(inspect_global_dict('js3', 'c1.str_field'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.int_field'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.float_field'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.bool_field'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.null_field'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.array_field'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.object_field'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.object_field.nested_str'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.object_field.nested_int'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.object_field.nested_bool'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.deep_nested'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.deep_nested.level1'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.deep_nested.level1.level2'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.deep_nested.level1.level2.leaf_str'), 'dict');
select get_json_string(inspect_global_dict('js3', 'c1.deep_nested.level1.level2.leaf_num'), 'dict');
