-- name: test_json_contains
CREATE DATABASE test_json_contains;
-- result:
-- !result
USE test_json_contains;
-- result:
-- !result
SELECT json_contains(parse_json('"hello"'), parse_json('"hello"')) as scalar_equal;
-- result:
1
-- !result
SELECT json_contains(parse_json('"hello"'), parse_json('"world"')) as scalar_not_equal;
-- result:
0
-- !result
SELECT json_contains(parse_json('123'), parse_json('123')) as number_equal;
-- result:
1
-- !result
SELECT json_contains(parse_json('123'), parse_json('456')) as number_not_equal;
-- result:
0
-- !result
SELECT json_contains(parse_json('true'), parse_json('true')) as boolean_equal;
-- result:
1
-- !result
SELECT json_contains(parse_json('true'), parse_json('false')) as boolean_not_equal;
-- result:
0
-- !result
SELECT json_contains(parse_json('null'), parse_json('null')) as null_equal;
-- result:
1
-- !result
SELECT json_contains(parse_json('{"a": 1, "b": 2}'), parse_json('{"a": 1}')) as object_contains_subset;
-- result:
1
-- !result
SELECT json_contains(parse_json('{"a": 1, "b": 2}'), parse_json('{"b": 2}')) as object_contains_subset2;
-- result:
1
-- !result
SELECT json_contains(parse_json('{"a": 1, "b": 2}'), parse_json('{"a": 1, "b": 2}')) as object_contains_exact;
-- result:
1
-- !result
SELECT json_contains(parse_json('{"a": 1, "b": 2}'), parse_json('{"c": 3}')) as object_not_contains;
-- result:
0
-- !result
SELECT json_contains(parse_json('{"a": 1, "b": 2}'), parse_json('{"a": 2}')) as object_wrong_value;
-- result:
0
-- !result
SELECT json_contains(parse_json('[1, 2, 3]'), parse_json('[1, 2]')) as array_contains_subset;
-- result:
1
-- !result
SELECT json_contains(parse_json('[1, 2, 3]'), parse_json('[2, 3]')) as array_contains_subset2;
-- result:
1
-- !result
SELECT json_contains(parse_json('[1, 2, 3]'), parse_json('[1, 2, 3]')) as array_contains_exact;
-- result:
1
-- !result
SELECT json_contains(parse_json('[1, 2, 3]'), parse_json('[4, 5]')) as array_not_contains;
-- result:
0
-- !result
SELECT json_contains(parse_json('[1, 2, 3]'), parse_json('2')) as array_contains_scalar;
-- result:
0
-- !result
SELECT json_contains(parse_json('[1, 2, 3]'), parse_json('4')) as array_not_contains_scalar;
-- result:
0
-- !result
SELECT json_contains(parse_json('{"a": [1, 2], "b": {"c": 3}}'), parse_json('{"b": {"c": 3}}')) as nested_object_contains;
-- result:
1
-- !result
SELECT json_contains(parse_json('{"a": [1, 2], "b": {"c": 3}}'), parse_json('{"a": [1, 2]}')) as nested_array_contains;
-- result:
1
-- !result
SELECT json_contains(parse_json('[{"a": 1}, {"b": 2}]'), parse_json('[{"a": 1}]')) as array_of_objects_contains;
-- result:
1
-- !result
SELECT json_contains(parse_json('[{"a": 1}, {"b": 2}]'), parse_json('{"a": 1}')) as array_contains_object;
-- result:
1
-- !result
SELECT json_contains(parse_json('[{"a": 1}, {"b": 2}]'), parse_json('{"a": 1, "b": 2}')) as array_contains_distributed_object;
-- result:
1
-- !result
SELECT json_contains(parse_json('{}'), parse_json('{}')) as empty_object_contains_empty;
-- result:
1
-- !result
SELECT json_contains(parse_json('[]'), parse_json('[]')) as empty_array_contains_empty;
-- result:
1
-- !result
SELECT json_contains(parse_json('{"a": 1}'), parse_json('{}')) as object_contains_empty;
-- result:
1
-- !result
SELECT json_contains(parse_json('[1, 2]'), parse_json('[]')) as array_contains_empty;
-- result:
1
-- !result
CREATE TABLE json_test_data (
  id int,
  target_json json,
  candidate_json json
);
-- result:
-- !result
INSERT INTO json_test_data VALUES
(1, parse_json('{"name": "John", "age": 30, "city": "New York"}'), parse_json('{"name": "John"}')),
(2, parse_json('{"products": ["apple", "banana", "orange"]}'), parse_json('["apple", "banana"]')),
(3, parse_json('[1, 2, 3, 4, 5]'), parse_json('3')),
(4, parse_json('{"users": [{"id": 1, "active": true}, {"id": 2, "active": false}]}'), parse_json('{"users": [{"id": 1}]}')),
(5, parse_json('null'), parse_json('null'));
-- result:
-- !result
SELECT id, json_contains(target_json, candidate_json) as contains_result FROM json_test_data ORDER BY id;
-- result:
1	1
2	0
3	0
4	0
5	1
-- !result
SELECT json_contains(NULL, parse_json('{"a": 1}')) as null_target;
-- result:
None
-- !result
SELECT json_contains(parse_json('{"a": 1}'), NULL) as null_candidate;
-- result:
None
-- !result
SELECT json_contains(NULL, NULL) as both_null;
-- result:
None
-- !result
SELECT json_contains(
  parse_json('{"company": {"employees": [{"name": "Alice", "dept": "Engineering"}, {"name": "Bob", "dept": "Sales"}], "location": "San Francisco"}}'),
  parse_json('{"company": {"location": "San Francisco"}}')
) as complex_nested_contains;
-- result:
0
-- !result
SELECT json_contains(
  parse_json('[{"type": "fruit", "items": ["apple", "banana"]}, {"type": "vegetable", "items": ["carrot", "broccoli"]}]'),
  parse_json('[{"type": "fruit"}]')
) as complex_array_contains;
-- result:
1
-- !result
DROP TABLE json_test_data;
-- result:
-- !result
DROP DATABASE test_json_contains;
-- result:
-- !result