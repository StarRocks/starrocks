-- name: test_cume_window_function
DROP TABLE IF EXISTS `cume_test`;
CREATE TABLE IF NOT EXISTS `cume_test` (
  k1 INT,
  k2 INT,
  v1 INT SUM,
  v2 DOUBLE MAX,
  v3 DATE MIN,
  v4 VARCHAR(20) REPLACE
)
ENGINE = olap
AGGREGATE KEY(k1, k2)
DISTRIBUTED BY HASH(`k1`)
PROPERTIES(
  "replication_num" = "1"
);

INSERT INTO `cume_test` (k1, k2, v1, v2, v3, v4)
VALUES (1, 10, 15, 2.5, '2023-01-01', 'apple'),
       (1, 2, 15, 2.5, '2023-01-02', 'banana'),
       (1, 8, 15, 3.5, '2023-01-03', 'cherry'),
       (1, 7, 20, 3.5, '2023-01-04', 'date'),
       (2, 6, 20, 3.5, '2023-01-05', 'fig'),
       (2, 5, 20, 4.5, '2023-01-06', 'grape'),
       (2, 4, 20, 5.5, '2023-01-07', 'honeydew'),
       (3, 3, 20, 5.5, '2023-01-08', 'kiwi'),
       (3, 2, 20, 5.5, '2023-01-09', 'lemon'),
       (4, 2, 25, 5.5, '2023-01-10', 'mango'),
       (4, 10, 30, 5.5, '2023-01-11', 'nectarine'),
       (4, 9, 30, 5.5, '2023-01-12', 'orange'),
       (4, 8, 35, 6.5, '2023-01-13', 'papaya'),
       (4, 7, 35, 6.5, '2023-01-14', 'pineapple'),
       (4, 6, 35, 7.5, '2023-01-15', 'quince'),
       (4, 5, 35, 7.5, '2023-01-16', 'raspberry'),
       (5, 4, 35, 8.5, '2023-01-17', 'strawberry'),
       (5, 3, 40, 8.5, '2023-01-18', 'tangerine'),
       (5, 2, 40, 8.5, '2023-01-19', 'ugli fruit'),
       (5, 1, 40, 8.5, '2023-01-20', 'vanilla'),
       (5, 10, 45, 9.5, '2023-01-21', 'watermelon'),
       (6, 9, 45, 10.5, '2023-01-22', 'xigua'),
       (6, 8, 50, 11.5, '2023-01-23', 'yumberry'),
       (6, 7, 50, 12.5, '2023-01-24', 'zucchini'),
       (6, 6, 55, 13.5, '2023-01-25', 'acerola'),
       (6, 5, 60, 13.5, '2023-01-26', 'bilberry'),
       (7, 4, 60, 13.5, '2023-01-27', 'cloudberry'),
       (7, 3, 60, 14.5, '2023-01-28', 'dewberry'),
       (8, 2, null, 2.5, '2023-01-29', null),
       (8, 8, 15, 3.5, '2023-01-30', null),
       (8, 7, null, 3.5, '2023-01-31', 'date'),
       (8, 6, null, null, '2023-02-01', 'fig'),
       (9, 5, 20, 4.5, '2023-02-02', 'grape'),
       (9, 4, 20, 5.5, '2023-02-07', null),
       (10, 3, 20, null, null, 'kiwi'),
       (10, 2, 20, 5.5, '2023-02-09', 'lemon'),
       (10, 2, 25, 5.5, '2023-02-10', null),
       (11, 10, null, 5.5, null, null),
       (11, 9, 30, 5.5, '2023-02-12', 'orange'),
       (12, 8, 35, 6.5, '2023-02-13', null),
       (13, 7, 35, 6.5, '2023-02-14', 'pineapple'),
       (13, 6, null, 7.5, '2023-02-15', 'quince'),
       (13, 5, 35, 7.5, '2023-02-16', null),
       (13, 4, 35, 8.5, null, null),
       (13, 3, 40, 8.5, '2023-02-18', 'tangerine'),
       (14, 2, 40, null, '2023-02-19', 'ugli fruit'),
       (14, 1, 40, null, '2023-02-20', 'vanilla'),
       (14, 10, 45, 9.5, '2023-02-21', 'watermelon'),
       (15, 9, 45, 10.5, null, 'xigua'),
       (16, 8, 50, 11.5, null, null),
       (16, 7, 50, 12.5, '2023-02-24', null),
       (16, 6, 55, 13.5, '2023-02-25', 'acerola'),
       (16, 5, null, 13.5, '2023-02-26', 'bilberry'),
       (17, 4, 60, 13.5, null, 'cloudberry'),
       (17, 3, 60, 14.5, '2023-02-28', 'dewberry');

SELECT *, CUME_DIST() OVER (ORDER BY v1) AS cume_dist_v1 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v2 DESC) AS cume_dist_v2 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v3) AS cume_dist_v3 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v4) AS cume_dist_v4 FROM cume_test;

SELECT *, PERCENT_RANK() OVER (ORDER BY v1) AS percent_rank_v1 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY v2) AS percent_rank_v2 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY v3 DESC) AS percent_rank_v3 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY v4) AS percent_rank_v4 FROM cume_test;

SELECT *, CUME_DIST() OVER (ORDER BY v1 DESC) AS cume_dist_v1 FROM cume_test WHERE v1 IS NOT NULL;
SELECT *, CUME_DIST() OVER (ORDER BY v2) AS cume_dist_v2 FROM cume_test WHERE v2 IS NOT NULL;
SELECT *, CUME_DIST() OVER (ORDER BY v3) AS cume_dist_v3 FROM cume_test WHERE v3 IS NOT NULL;
SELECT *, CUME_DIST() OVER (ORDER BY v4) AS cume_dist_v4 FROM cume_test WHERE v4 IS NOT NULL;

SELECT *, PERCENT_RANK() OVER (ORDER BY v1) AS percent_rank_v1 FROM cume_test WHERE v1 IS NOT NULL;
SELECT *, PERCENT_RANK() OVER (ORDER BY v2) AS percent_rank_v2 FROM cume_test WHERE v2 IS NOT NULL;
SELECT *, PERCENT_RANK() OVER (ORDER BY v3) AS percent_rank_v3 FROM cume_test WHERE v3 IS NOT NULL;
SELECT *, PERCENT_RANK() OVER (ORDER BY v4 DESC) AS percent_rank_v4 FROM cume_test WHERE v4 IS NOT NULL;

SELECT *, CUME_DIST() OVER (ORDER BY k1, k2) AS cume_dist_k1_k2 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY k1 ASC, k2 DESC) AS cume_dist_k1_asc_k2_desc FROM cume_test;

SELECT *, PERCENT_RANK() OVER (ORDER BY k1, k2) AS percent_rank_k1_k2 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY k1 DESC, k2 ASC) AS percent_rank_k1_desc_k2_asc FROM cume_test;

SELECT *, CUME_DIST() OVER (PARTITION BY v1 ORDER BY v2) AS cume_dist_v1_partition_v2 FROM cume_test;
SELECT *, CUME_DIST() OVER (PARTITION BY v3 ORDER BY v4) AS cume_dist_v3_partition_v4 FROM cume_test;
SELECT *, CUME_DIST() OVER (PARTITION BY k1 ORDER BY k2) AS cume_dist_k1_partition_k2 FROM cume_test ORDER BY v1;
SELECT *, CUME_DIST() OVER (PARTITION BY v4 ORDER BY v3) AS cume_dist_v4_partition_v3 FROM cume_test ORDER BY v2 DESC;

SELECT *, PERCENT_RANK() OVER (PARTITION BY v1 ORDER BY v3) AS percent_rank_v1_partition_v3 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (PARTITION BY v2 ORDER BY v4) AS percent_rank_v2_partition_v4 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (PARTITION BY k2 ORDER BY k1) AS percent_rank_k2_partition_k1 FROM cume_test ORDER BY v1;
SELECT *, PERCENT_RANK() OVER (PARTITION BY v4 ORDER BY v2) AS percent_rank_v4_partition_v2 FROM cume_test ORDER BY v2 DESC;

SELECT *, CUME_DIST() OVER (ORDER BY v1) AS cume_dist_v1, ROW_NUMBER() OVER (ORDER BY v1, v3) AS row_number_v1_v3 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v2) AS cume_dist_v2, RANK() OVER (ORDER BY v1) AS rank_v1 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v3) AS cume_dist_v3, DENSE_RANK() OVER (ORDER BY v1) AS dense_rank_v1 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v4) AS cume_dist_v4, NTILE(5) OVER (ORDER BY v1, v3) AS ntile_v1 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v1) AS cume_dist_v1, LAG(v2) OVER (ORDER BY v1, v3) AS lag_v2 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v2) AS cume_dist_v2, LEAD(v2) OVER (ORDER BY v1, v3) AS lead_v2 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v3) AS cume_dist_v3, FIRST_VALUE(v2) OVER (ORDER BY v1, v3) AS first_value_v2 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v4) AS cume_dist_v4, LAST_VALUE(v2) OVER (ORDER BY v1, v3 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_value_v2 FROM cume_test;

SELECT *, PERCENT_RANK() OVER (ORDER BY v1) AS percent_rank_v1, ROW_NUMBER() OVER (ORDER BY v1, v3) AS row_number_v1_v3 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY v2) AS percent_rank_v2, RANK() OVER (ORDER BY v1) AS rank_v1 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY v3) AS percent_rank_v3, DENSE_RANK() OVER (ORDER BY v1) AS dense_rank_v1 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY v4) AS percent_rank_v4, NTILE(5) OVER (ORDER BY v1, v3) AS ntile_v1 FROM cume_test ;
SELECT *, PERCENT_RANK() OVER (ORDER BY v1) AS percent_rank_v1, LAG(v2) OVER (ORDER BY v1, v3) AS lag_v2 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY v2) AS percent_rank_v2, LEAD(v2) OVER (ORDER BY v1, v3) AS lead_v2 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY v3) AS percent_rank_v3, FIRST_VALUE(v2) OVER (ORDER BY v1, v3) AS first_value_v2 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY v4) AS percent_rank_v4, LAST_VALUE(v2) OVER (ORDER BY v1, v3 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_value_v2 FROM cume_test;

SELECT *, CUME_DIST() OVER (ORDER BY v1) AS cume_dist_v1, PERCENT_RANK() OVER (ORDER BY v3) AS percent_rank_v3 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v2) AS cume_dist_v2, PERCENT_RANK() OVER (ORDER BY v2) AS percent_rank_v2 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v3) AS cume_dist_v3, PERCENT_RANK() OVER (ORDER BY v3) AS percent_rank_v3 FROM cume_test WHERE v3 IS NOT NULL;
SELECT *, CUME_DIST() OVER (ORDER BY v4 DESC) AS cume_dist_v4, PERCENT_RANK() OVER (ORDER BY v1 DESC) AS percent_rank_v1 FROM cume_test;
SELECT *, CUME_DIST() OVER (PARTITION BY k1 ORDER BY k2) AS percent_rank_k1_partition_k2, PERCENT_RANK() OVER (ORDER BY v1) AS percent_rank_v1 FROM cume_test;
SELECT *, CUME_DIST() OVER (PARTITION BY v3 ORDER BY v4) AS percent_rank_v3_partition_v4, PERCENT_RANK() OVER (PARTITION BY v4 ORDER BY v3) AS percent_rank_v4_partition_v3 FROM cume_test;

SELECT *, CUME_DIST() OVER (ORDER BY v1) AS cume_dist_v1, AVG(v2) OVER (ORDER BY v1, v3 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS avg_v2 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v2) AS cume_dist_v2, SUM(v2) OVER (ORDER BY v1, v3 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS sum_v2 FROM cume_test;
SELECT *, CUME_DIST() OVER (ORDER BY v1) AS cume_dist_v1, MIN(v2) OVER (ORDER BY v1, v3 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS min_v2 FROM cume_test;

SELECT *, PERCENT_RANK() OVER (ORDER BY v1) AS percent_rank_v1, AVG(v2) OVER (ORDER BY v1, v3 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS avg_v2 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY v2) AS percent_rank_v2, SUM(v2) OVER (ORDER BY v1, v3 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS sum_v2 FROM cume_test;
SELECT *, PERCENT_RANK() OVER (ORDER BY v1) AS percent_rank_v1, MIN(v2) OVER (ORDER BY v1, v3 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS min_v2 FROM cume_test;

DROP TABLE IF EXISTS `cume_test`;
