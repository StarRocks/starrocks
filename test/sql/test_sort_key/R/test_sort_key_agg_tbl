-- name: test_sort_key_agg_tbl;
show backends;
create database sort_key_test_agg;
-- result:
-- !result
use sort_key_test_agg;
-- result:
-- !result
CREATE TABLE `agg_test` (
    `k1` int(11) NOT NULL COMMENT "",
    `k2` int(11) NOT NULL COMMENT "",
    `v1` bigint REPLACE NULL COMMENT "",
    `v2` bigint REPLACE NULL COMMENT "",
    `v3` bigint REPLACE NULL COMMENT ""
)
AGGREGATE KEY(k1, k2)
COMMENT "OLAP"
DISTRIBUTED BY HASH(`k1`, `k2`) BUCKETS 1
ORDER BY (k2)
PROPERTIES (
    "replication_num" = "1",
    "storage_format" = "DEFAULT",
    "enable_persistent_index" = "false"
);
-- result:
E: (1064, 'Getting analyzing error. Detail message: The sort columns of AGGREGATE KEY table must be same with key columns.')
-- !result
CREATE TABLE `agg_test` (
    `k1` int(11) NOT NULL COMMENT "",
    `k2` int(11) NOT NULL COMMENT "",
    `v1` bigint REPLACE NULL COMMENT "",
    `v2` bigint REPLACE NULL COMMENT "",
    `v3` bigint REPLACE NULL COMMENT ""
)
AGGREGATE KEY(k1, k2)
COMMENT "OLAP"
DISTRIBUTED BY HASH(`k1`, `k2`) BUCKETS 1
ORDER BY (k2,v2)
PROPERTIES (
    "replication_num" = "1",
    "storage_format" = "DEFAULT",
    "enable_persistent_index" = "false"
);
-- result:
E: (1064, 'Getting analyzing error. Detail message: The sort columns of AGGREGATE KEY table must be same with key columns.')
-- !result
CREATE TABLE `agg_test` (
    `k1` int(11) NOT NULL COMMENT "",
    `k2` int(11) NOT NULL COMMENT "",
    `v1` bigint REPLACE NULL COMMENT "",
    `v2` bigint REPLACE NULL COMMENT "",
    `v3` bigint REPLACE NULL COMMENT ""
)
AGGREGATE KEY(k1, k2)
COMMENT "OLAP"
DISTRIBUTED BY HASH(`k1`, `k2`) BUCKETS 1
ORDER BY (k2,k1)
PROPERTIES (
    "replication_num" = "1",
    "storage_format" = "DEFAULT",
    "enable_persistent_index" = "false"
);
-- result:
-- !result
insert into agg_test values (1,3,2,10,9),(2,2,2,9,7),(3,1,2,8,8);
-- result:
-- !result
select * from agg_test;
-- result:
3	1	2	8	8
2	2	2	9	7
1	3	2	10	9
-- !result
insert into agg_test values (1,2,2,10,9),(2,3,2,9,7),(2,1,2,8,8);
-- result:
-- !result
select * from agg_test;
-- result:
2	1	2	8	8
1	2	2	10	9
2	3	2	9	7
3	1	2	8	8
2	2	2	9	7
1	3	2	10	9
-- !result
function: manual_compact("sort_key_test_agg", "agg_test")
-- result:
None
-- !result
select * from agg_test;
-- result:
2	1	2	8	8
3	1	2	8	8
1	2	2	10	9
2	2	2	9	7
1	3	2	10	9
2	3	2	9	7
-- !result
alter table agg_test order by (k2,v1);
-- result:
E: (1064, 'The sort columns of AGGREGATE KEY table must be same with key columns')
-- !result
alter table agg_test order by (k2);
-- result:
E: (1064, 'The sort columns of AGGREGATE KEY table must be same with key columns')
-- !result
alter table agg_test order by (k1,k2);
-- result:
-- !result
function: wait_alter_table_finish()
-- result:
None
-- !result
show create table agg_test;
-- result:
agg_test	CREATE TABLE `agg_test` (
  `k1` int(11) NOT NULL COMMENT "",
  `k2` int(11) NOT NULL COMMENT "",
  `v1` bigint(20) REPLACE NULL COMMENT "",
  `v2` bigint(20) REPLACE NULL COMMENT "",
  `v3` bigint(20) REPLACE NULL COMMENT ""
) ENGINE=OLAP 
AGGREGATE KEY(`k1`, `k2`)
COMMENT "OLAP"
DISTRIBUTED BY HASH(`k1`, `k2`) BUCKETS 1 
ORDER BY(`k1`, `k2`)
PROPERTIES (
"compression" = "LZ4",
"fast_schema_evolution" = "true",
"replicated_storage" = "true",
"replication_num" = "1"
);
-- !result
select * from agg_test;
-- result:
1	2	2	10	9
1	3	2	10	9
2	1	2	8	8
2	2	2	9	7
2	3	2	9	7
3	1	2	8	8
-- !result
alter table agg_test order by (k2,k1,v2,v1,v3);
-- result:
-- !result
function: wait_alter_table_finish()
-- result:
None
-- !result
show create table agg_test;
-- result:
agg_test	CREATE TABLE `agg_test` (
  `k2` int(11) NOT NULL COMMENT "",
  `k1` int(11) NOT NULL COMMENT "",
  `v2` bigint(20) REPLACE NULL COMMENT "",
  `v1` bigint(20) REPLACE NULL COMMENT "",
  `v3` bigint(20) REPLACE NULL COMMENT ""
) ENGINE=OLAP 
AGGREGATE KEY(`k2`, `k1`)
COMMENT "OLAP"
DISTRIBUTED BY HASH(`k1`, `k2`) BUCKETS 1 
ORDER BY(`k1`, `k2`)
PROPERTIES (
"compression" = "LZ4",
"fast_schema_evolution" = "true",
"replicated_storage" = "true",
"replication_num" = "1"
);
-- !result
select * from agg_test;
-- result:
1	2	8	2	8
1	3	8	2	8
2	1	10	2	9
2	2	9	2	7
3	1	10	2	9
3	2	9	2	7
-- !result
drop table agg_test;
-- result:
-- !result
drop database sort_key_test_agg;
-- result:
-- !result
-- name: test_sort_key_agg_tbl_with_rollup;
create database sort_key_test_agg_with_rollup;
-- result:
-- !result
use sort_key_test_agg_with_rollup;
-- result:
-- !result
CREATE TABLE `agg_test` (
    `k1` int(11) NOT NULL COMMENT "",
    `k2` int(11) NOT NULL COMMENT "",
    `v1` bigint REPLACE NULL COMMENT "",
    `v2` bigint REPLACE NULL COMMENT "",
    `v3` bigint REPLACE NULL COMMENT ""
)
AGGREGATE KEY(k1, k2)
COMMENT "OLAP"
DISTRIBUTED BY HASH(`k1`, `k2`) BUCKETS 1
ORDER BY (k2,k1)
PROPERTIES (
    "replication_num" = "1",
    "storage_format" = "DEFAULT",
    "enable_persistent_index" = "false"
);
-- result:
-- !result
insert into agg_test values (1,3,2,10,9),(2,2,2,9,7),(3,1,2,8,8);
-- result:
-- !result
select * from agg_test;
-- result:
3	1	2	8	8
2	2	2	9	7
1	3	2	10	9
-- !result
insert into agg_test values (1,2,2,10,9),(2,3,2,9,7),(2,1,2,8,8);
-- result:
-- !result
select * from agg_test;
-- result:
2	1	2	8	8
1	2	2	10	9
2	3	2	9	7
3	1	2	8	8
2	2	2	9	7
1	3	2	10	9
-- !result
alter table agg_test add rollup r1 (k1,k2,v3,v1);
-- result:
-- !result
function: wait_alter_table_finish("rollup", 8)
-- result:
None
-- !result
function: manual_compact("sort_key_test_agg_with_rollup", "agg_test")
-- result:
None
-- !result
select * from agg_test;
-- result:
2	1	2	8	8
3	1	2	8	8
1	2	2	10	9
2	2	2	9	7
1	3	2	10	9
2	3	2	9	7
-- !result
alter table agg_test order by (k1,k2);
-- result:
-- !result
function: wait_alter_table_finish()
-- result:
None
-- !result
show create table agg_test;
-- result:
agg_test	CREATE TABLE `agg_test` (
  `k1` int(11) NOT NULL COMMENT "",
  `k2` int(11) NOT NULL COMMENT "",
  `v1` bigint(20) REPLACE NULL COMMENT "",
  `v2` bigint(20) REPLACE NULL COMMENT "",
  `v3` bigint(20) REPLACE NULL COMMENT ""
) ENGINE=OLAP 
AGGREGATE KEY(`k1`, `k2`)
COMMENT "OLAP"
DISTRIBUTED BY HASH(`k1`, `k2`) BUCKETS 1 
ORDER BY(`k1`, `k2`)
PROPERTIES (
"compression" = "LZ4",
"fast_schema_evolution" = "true",
"replicated_storage" = "true",
"replication_num" = "1"
);
-- !result
select * from agg_test;
-- result:
1	2	2	10	9
1	3	2	10	9
2	1	2	8	8
2	2	2	9	7
2	3	2	9	7
3	1	2	8	8
-- !result
alter table agg_test order by (k2,k1,v2,v1,v3);
-- result:
-- !result
function: wait_alter_table_finish()
-- result:
None
-- !result
show create table agg_test;
-- result:
agg_test	CREATE TABLE `agg_test` (
  `k2` int(11) NOT NULL COMMENT "",
  `k1` int(11) NOT NULL COMMENT "",
  `v2` bigint(20) REPLACE NULL COMMENT "",
  `v1` bigint(20) REPLACE NULL COMMENT "",
  `v3` bigint(20) REPLACE NULL COMMENT ""
) ENGINE=OLAP 
AGGREGATE KEY(`k2`, `k1`)
COMMENT "OLAP"
DISTRIBUTED BY HASH(`k1`, `k2`) BUCKETS 1 
ORDER BY(`k1`, `k2`)
PROPERTIES (
"compression" = "LZ4",
"fast_schema_evolution" = "true",
"replicated_storage" = "true",
"replication_num" = "1"
);
-- !result
select * from agg_test;
-- result:
1	2	8	2	8
1	3	8	2	8
2	1	10	2	9
2	2	9	2	7
3	1	10	2	9
3	2	9	2	7
-- !result
drop table agg_test;
-- result:
-- !result
drop database sort_key_test_agg_with_rollup;
-- result:
-- !result
