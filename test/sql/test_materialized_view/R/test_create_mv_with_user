-- name: test_create_mv_with_user
drop database if exists test_create_mv_with_user;
-- result:
-- !result
create database test_create_mv_with_user;
-- result:
-- !result
use test_create_mv_with_user;
-- result:
-- !result
[UC]shell: ip=hostname -I | awk '{print $1}';
-- result:
0
172.26.92.227
-- !result
DROP USER IF EXISTS mv_creator@'${ip[1]}';
-- result:
-- !result
CREATE USER mv_creator@'${ip[1]}';
-- result:
-- !result
GRANT DELETE, DROP, INSERT, SELECT, ALTER, UPDATE ON ALL TABLES IN DATABASE test_create_mv_with_user
    TO USER mv_creator@'${ip[1]}';
-- result:
-- !result
GRANT CREATE TABLE, CREATE MATERIALIZED VIEW ON DATABASE test_create_mv_with_user
    TO USER mv_creator@'${ip[1]}';
-- result:
-- !result
GRANT SELECT, DROP, ALTER, REFRESH ON ALL MATERIALIZED VIEWS IN DATABASE test_create_mv_with_user
    TO USER mv_creator@'${ip[1]}';
-- result:
-- !result
GRANT IMPERSONATE ON USER root TO mv_creator@'${ip[1]}';
-- result:
-- !result
EXECUTE AS mv_creator@'${ip[1]}' with no revert;
-- result:
-- !result
create table t1(c1 int, c2 int);
-- result:
-- !result
insert into t1 values(1,1);
-- result:
-- !result
create materialized view mv1 REFRESH MANUAL as select * from t1;
-- result:
-- !result
refresh materialized view mv1;
alter materialized view mv1 refresh manual;
-- result:
-- !result
refresh materialized view mv1;
select * from mv1;
-- result:
-- !result
drop materialized view mv1;
-- result:
-- !result
execute as root with no revert;
-- result:
-- !result
drop user mv_creator@'${ip[1]}';
-- result:
-- !result
DROP USER IF EXISTS mv_multi_role_user@'${ip[1]}';
-- result:
-- !result
DROP ROLE IF EXISTS role_with_refresh;
-- result:
-- !result
DROP ROLE IF EXISTS role_without_refresh;
-- result:
-- !result
CREATE ROLE role_with_refresh;
-- result:
-- !result
GRANT SELECT, DROP, ALTER, REFRESH ON ALL MATERIALIZED VIEWS IN DATABASE test_create_mv_with_user TO ROLE role_with_refresh;
-- result:
-- !result
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN DATABASE test_create_mv_with_user TO ROLE role_with_refresh;
-- result:
-- !result
GRANT CREATE TABLE, CREATE MATERIALIZED VIEW ON DATABASE test_create_mv_with_user TO ROLE role_with_refresh;
-- result:
-- !result
CREATE ROLE role_without_refresh;
-- result:
-- !result
GRANT SELECT, DROP ON ALL MATERIALIZED VIEWS IN DATABASE test_create_mv_with_user TO ROLE role_without_refresh;
-- result:
-- !result
GRANT SELECT  ON ALL TABLES IN DATABASE test_create_mv_with_user TO ROLE role_without_refresh;
-- result:
-- !result
GRANT CREATE TABLE, CREATE MATERIALIZED VIEW ON DATABASE test_create_mv_with_user TO ROLE role_without_refresh;
-- result:
-- !result
CREATE USER mv_multi_role_user@'${ip[1]}';
-- result:
-- !result
GRANT role_with_refresh, role_without_refresh TO USER mv_multi_role_user@'${ip[1]}';
-- result:
-- !result
GRANT IMPERSONATE ON USER root TO mv_multi_role_user@'${ip[1]}';
-- result:
-- !result
SET DEFAULT ROLE NONE TO mv_multi_role_user@'${ip[1]}';
-- result:
-- !result
EXECUTE AS mv_multi_role_user@'${ip[1]}' with no revert;
-- result:
-- !result
SET ROLE role_with_refresh;
-- result:
-- !result
CREATE TABLE test_mv_table(id int, name varchar(20), value int);
-- result:
-- !result
INSERT INTO test_mv_table VALUES (1, 'test1', 100), (2, 'test2', 200);
-- result:
-- !result
CREATE MATERIALIZED VIEW test_mv_async REFRESH MANUAL AS 
SELECT id, name, SUM(value) as total_value 
FROM test_mv_table 
GROUP BY id, name;
-- result:
-- !result
SET ROLE role_with_refresh;
-- result:
-- !result
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async')
-- result:
True
-- !result
SET ROLE role_without_refresh;
-- result:
-- !result
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async')
-- result:
(5203, 'Access denied; you need (at least one of) the REFRESH privilege(s) on MATERIALIZED VIEW test_mv_async for this operation. Please ask the admin to grant permission(s) or try activating existing roles using <set [default] role>. Current role(s): [role_without_refresh]. Inactivated role(s): [role_with_refresh].')
-- !result
SET DEFAULT ROLE role_with_refresh TO mv_multi_role_user@'${ip[1]}';
-- result:
-- !result
SET ROLE role_with_refresh;
-- result:
-- !result
CREATE TABLE test_mv_table2(id int, name varchar(20), value int);
-- result:
-- !result
INSERT INTO test_mv_table2 VALUES (1, 'test1', 100), (2, 'test2', 200);
-- result:
-- !result
CREATE MATERIALIZED VIEW test_mv_async2 REFRESH MANUAL AS 
SELECT id, name, SUM(value) as total_value 
FROM test_mv_table2 
GROUP BY id, name;
-- result:
-- !result
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async2')
-- result:
True
-- !result
SET ROLE role_without_refresh;
-- result:
-- !result
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async2')
-- result:
(5203, 'Access denied; you need (at least one of) the REFRESH privilege(s) on MATERIALIZED VIEW test_mv_async2 for this operation. Please ask the admin to grant permission(s) or try activating existing roles using <set [default] role>. Current role(s): [role_without_refresh]. Inactivated role(s): [role_with_refresh].')
-- !result
SET DEFAULT ROLE role_without_refresh TO mv_multi_role_user@'${ip[1]}';
-- result:
-- !result
SET ROLE role_with_refresh;
-- result:
-- !result
CREATE TABLE test_mv_table3(id int, name varchar(20), value int);
-- result:
-- !result
INSERT INTO test_mv_table3 VALUES (1, 'test1', 100), (2, 'test2', 200);
-- result:
-- !result
CREATE MATERIALIZED VIEW test_mv_async3 REFRESH MANUAL AS 
SELECT id, name, SUM(value) as total_value 
FROM test_mv_table3 
GROUP BY id, name;
-- result:
-- !result
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async3')
-- result:
True
-- !result
SET ROLE role_without_refresh;
-- result:
-- !result
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async3')
-- result:
(5203, 'Access denied; you need (at least one of) the REFRESH privilege(s) on MATERIALIZED VIEW test_mv_async3 for this operation. Please ask the admin to grant permission(s) or try activating existing roles using <set [default] role>. Current role(s): [role_without_refresh]. Inactivated role(s): [role_with_refresh].')
-- !result
EXECUTE AS root with no revert;
-- result:
-- !result
REVOKE role_with_refresh FROM mv_multi_role_user@'${ip[1]}';
-- result:
-- !result
SET DEFAULT ROLE NONE TO mv_multi_role_user@'${ip[1]}';
-- result:
-- !result
EXECUTE AS mv_multi_role_user@'${ip[1]}' with no revert;
-- result:
-- !result
SET ROLE role_without_refresh;
-- result:
-- !result
CREATE TABLE test_mv_table4(id int, name varchar(20), value int);
-- result:
-- !result
CREATE MATERIALIZED VIEW test_mv_async4 REFRESH DEFERRED MANUAL AS 
SELECT id, name, SUM(value) as total_value 
FROM test_mv_table4 
GROUP BY id, name;
-- result:
-- !result
EXECUTE AS root with no revert;
-- result:
-- !result
INSERT INTO test_mv_table4 VALUES (1, 'test1', 100), (2, 'test2', 200);
-- result:
-- !result
ADMIN SET FRONTEND CONFIG('mv_use_creator_based_authorization' = 'true');
-- result:
-- !result
SELECT count(*) from test_mv_async4;
-- result:
0
-- !result
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async4')
-- result:
True
-- !result
SELECT count(*) from test_mv_async4;
-- result:
2
-- !result
ADMIN SET FRONTEND CONFIG('mv_use_creator_based_authorization' = 'false');
-- result:
-- !result
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async4')
-- result:
True
-- !result
SELECT count(*) from test_mv_async4;
-- result:
2
-- !result
ADMIN SET FRONTEND CONFIG('mv_use_creator_based_authorization' = 'true');
-- result:
-- !result
DROP ROLE role_with_refresh;
-- result:
-- !result
DROP ROLE role_without_refresh;
-- result:
-- !result
DROP USER mv_multi_role_user@'${ip[1]}';
-- result:
-- !result