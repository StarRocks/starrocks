-- name: test_materialized_view_rewrite
create table user_tags (time date, user_id int, user_name varchar(20), tag_id int) partition by range (time)  (partition p1 values less than MAXVALUE) distributed by hash(time) buckets 3 properties('replication_num' = '1');
-- result:
-- !result
insert into user_tags values('2023-04-13', 1, 'a', 1);
-- result:
-- !result
insert into user_tags values('2023-04-13', 1, 'b', 2);
-- result:
-- !result
insert into user_tags values('2023-04-13', 1, 'c', 3);
-- result:
-- !result
insert into user_tags values('2023-04-13', 1, 'd', 4);
-- result:
-- !result
insert into user_tags values('2023-04-13', 1, 'e', 5);
-- result:
-- !result
insert into user_tags values('2023-04-13', 2, 'e', 5);
-- result:
-- !result
insert into user_tags values('2023-04-13', 3, 'e', 6);
-- result:
-- !result
create materialized view user_tags_mv1  distributed by hash(user_id) as select user_id, bitmap_union(to_bitmap(tag_id)) from user_tags group by user_id order by user_id;
-- result:
-- !result
refresh materialized view user_tags_mv1 with sync mode;
-- result:
-- !result
select count(*) from user_tags_mv1;
-- result:
3
-- !result
select user_id from user_tags_mv1 order by user_id;
-- result:
1
2
3
-- !result
refresh materialized view user_tags_mv1 force with sync mode;
-- result:
-- !result
select count(*) from user_tags_mv1;
-- result:
3
-- !result
select user_id from user_tags_mv1 order by user_id;
-- result:
1
2
3
-- !result
set enable_materialized_view_rewrite = off;
-- result:
-- !result
select user_id, count(distinct tag_id) from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, bitmap_union_count(to_bitmap(tag_id)) from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, bitmap_count(bitmap_union(to_bitmap(tag_id))) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
set enable_materialized_view_rewrite = on;
-- result:
-- !result
select user_id, count(distinct tag_id) from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, bitmap_union_count(to_bitmap(tag_id)) from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, bitmap_count(bitmap_union(to_bitmap(tag_id))) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
drop materialized view user_tags_mv1;
-- result:
-- !result
create materialized view user_tags_mv2  distributed by hash(user_id) as select user_id, time, bitmap_union(to_bitmap(tag_id)) from user_tags group by user_id, time;
-- result:
-- !result
select sleep(2);
-- result:
1
-- !result
set enable_materialized_view_rewrite = on;
-- result:
-- !result
explain logical select user_id, count(distinct tag_id) from user_tags group by user_id order by user_id;
select user_id, count(distinct tag_id) from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, bitmap_union_count(to_bitmap(tag_id)) from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, bitmap_count(bitmap_union(to_bitmap(tag_id))) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
drop materialized view user_tags_mv2;
-- result:
-- !result
create materialized view user_tags_hll_mv1  distributed by hash(user_id) as select user_id, time, hll_union(hll_hash(tag_id)) a  from user_tags group by user_id, time;
-- result:
-- !result
select sleep(2);
-- result:
1
-- !result
set enable_materialized_view_rewrite = off;
-- result:
-- !result
select user_id, approx_count_distinct(tag_id) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, ndv(tag_id) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, hll_union_agg(hll_hash(tag_id)) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, hll_cardinality(hll_union(hll_hash(tag_id))) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
set enable_materialized_view_rewrite = on;
-- result:
-- !result
select user_id, approx_count_distinct(tag_id) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, ndv(tag_id) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, hll_union_agg(hll_hash(tag_id)) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, hll_cardinality(hll_union(hll_hash(tag_id))) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
drop materialized view user_tags_hll_mv1;
-- result:
-- !result
create materialized view user_tags_hll_mv2  distributed by hash(user_id) as select user_id, time, hll_union(hll_hash(tag_id)) from user_tags group by user_id, time;
-- result:
-- !result
select sleep(2);
-- result:
1
-- !result
set enable_materialized_view_rewrite = on;
-- result:
-- !result
select user_id, approx_count_distinct(tag_id) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, ndv(tag_id) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, hll_union_agg(hll_hash(tag_id)) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, hll_cardinality(hll_union(hll_hash(tag_id))) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
drop materialized view user_tags_hll_mv2;
-- result:
-- !result
create materialized view user_tags_percential_mv1 distributed by hash(user_id) as select user_id, percentile_union(percentile_hash(tag_id)) from user_tags group by user_id order by user_id;
-- result:
-- !result
select sleep(2);
-- result:
1
-- !result
set enable_materialized_view_rewrite = off;
-- result:
-- !result
select user_id, percentile_approx(tag_id, 1) x from user_tags group by user_id order by user_id;
-- result:
1	5.0
2	5.0
3	6.0
-- !result
select user_id, percentile_approx(tag_id, 0) x from user_tags group by user_id order by user_id;
-- result:
1	1.0
2	5.0
3	6.0
-- !result
select user_id, round(percentile_approx(tag_id, 0)) x from user_tags group by user_id order by user_id;
-- result:
1	1
2	5
3	6
-- !result
set enable_materialized_view_rewrite = on;
-- result:
-- !result
select user_id, percentile_approx_raw(percentile_union(percentile_hash(tag_id)), 1) x from user_tags group by user_id order by user_id;
-- result:
1	5.0
2	5.0
3	6.0
-- !result
select user_id, percentile_approx_raw(percentile_union(percentile_hash(tag_id)), 1) x from user_tags group by user_id order by user_id;
-- result:
1	5.0
2	5.0
3	6.0
-- !result
select user_id, percentile_approx(tag_id, 0) x from user_tags group by user_id order by user_id;
-- result:
1	1.0
2	5.0
3	6.0
-- !result
select user_id, round(percentile_approx(tag_id, 0)) x from user_tags group by user_id order by user_id;
-- result:
1	1
2	5
3	6
-- !result
drop materialized view user_tags_percential_mv1;
-- result:
-- !result
create materialized view user_tags_percential_mv2 distributed by hash(user_id) as select user_id, time, percentile_union(percentile_hash(tag_id)) from user_tags group by user_id, time;
-- result:
-- !result
set enable_materialized_view_rewrite = on;
-- result:
-- !result
select user_id, percentile_approx(tag_id, 1) x from user_tags group by user_id order by user_id;
-- result:
1	5.0
2	5.0
3	6.0
-- !result
select user_id, percentile_approx(tag_id, 1) x from user_tags group by user_id order by user_id;
-- result:
1	5.0
2	5.0
3	6.0
-- !result
select user_id, percentile_approx(tag_id, 0) x from user_tags group by user_id order by user_id;
-- result:
1	1.0
2	5.0
3	6.0
-- !result
select user_id, round(percentile_approx(tag_id, 0)) x from user_tags group by user_id order by user_id;
-- result:
1	1
2	5
3	6
-- !result
drop materialized view user_tags_percential_mv2;
-- result:
-- !result
create materialized view user_tags_mv3  distributed by hash(user_id) as select user_id, tag_id from user_tags where user_id > 2;
-- result:
-- !result
select sleep(2);
-- result:
1
-- !result
set enable_materialized_view_rewrite = off;
-- result:
-- !result
select user_id, approx_count_distinct(tag_id) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, ndv(tag_id) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, hll_union_agg(hll_hash(tag_id)) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, hll_cardinality(hll_union(hll_hash(tag_id))) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
set enable_materialized_view_rewrite = on;
-- result:
-- !result
select user_id, approx_count_distinct(tag_id) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, ndv(tag_id) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, hll_union_agg(hll_hash(tag_id)) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
select user_id, hll_cardinality(hll_union(hll_hash(tag_id))) x from user_tags group by user_id order by user_id;
-- result:
1	5
2	1
3	1
-- !result
drop materialized view user_tags_mv3;
-- result:
-- !result

-- name: test_all_join_type_rewrite
CREATE TABLE emps (
    empid INT NOT NULL,
    deptno INT NOT NULL,
    locationid INT NOT NULL,
    commission INT NOT NULL,
    name VARCHAR(20) NOT NULL,
    salary DECIMAL(18, 2)
) ENGINE=OLAP
DUPLICATE KEY(`empid`)
DISTRIBUTED BY HASH(`empid`) BUCKETS 12
PROPERTIES (
    "replication_num" = "1"
);

CREATE TABLE depts(
    deptno INT NOT NULL,
    name VARCHAR(20)
) ENGINE=OLAP
DUPLICATE KEY(`deptno`)
DISTRIBUTED BY HASH(`deptno`) BUCKETS 12
PROPERTIES (
    "replication_num" = "1"
);

CREATE TABLE dependents(
    empid INT NOT NULL,
    name VARCHAR(20)
) ENGINE=OLAP
DUPLICATE KEY(`empid`)
DISTRIBUTED BY HASH(`empid`) BUCKETS 12
PROPERTIES (
    "replication_num" = "1"
);

insert into emps values(1, 1, 1, 10, "emp_name1", 1000);
insert into emps values(2, 1, 1, 10, "emp_name1", 1000);
insert into emps values(3, 1, 1, 10, "emp_name1", 1000);

insert into depts values(1, "dept_name1");
insert into depts values(2, "dept_name2");

insert into dependents values(1, "dependents_name1");
insert into dependents values(2, "dependents_name2");
insert into dependents values(3, "dependents_name3");

create materialized view mv_right_outer
distributed by hash(`empid`) buckets 10
refresh manual
as
select empid, depts.deptno
from emps right outer join depts using (deptno);

refresh materialized view mv_right_outer with sync mode;

explain logical select empid, depts.deptno
from emps right outer join depts using (deptno);
-- result:
[REGEX]mv_right_outer

select empid, depts.deptno
from emps right outer join depts using (deptno) order by empid;
-- result:
None	1
1	1
2	1
3	1
-- !result

drop materialized view mv_right_outer;

create materialized view mv_full_outer
distributed by hash(`empid`) buckets 10
refresh manual
as
select empid, depts.deptno 
from emps full outer join depts using (deptno);

refresh materialized view mv_full_outer with sync mode;

explain logical select empid, depts.deptno 
from emps full outer join depts using (deptno);
-- result:
[REGEX]mv_full_outer
-- !result

select empid, depts.deptno
from emps full outer join depts using (deptno) order by empid;
-- result:
None	2
1	1
2	1
3	1
-- !result

drop materialized view mv_full_outer;

create materialized view mv_left_semi
distributed by hash(`empid`) buckets 10
refresh manual
as
select empid 
from emps left semi join depts using (deptno);

refresh materialized view mv_left_semi with sync mode;

explain logical select empid 
from emps left semi join depts using (deptno);
-- result:
[REGEX]mv_left_semi
-- !result

select empid 
from emps left semi join depts using (deptno) order by empid;
-- result:
1
2
3
-- !result

drop materialized view mv_left_semi;

create materialized view mv_left_anti
distributed by hash(`empid`) buckets 10
refresh manual
as
select empid 
from emps left anti join depts using (deptno);

refresh materialized view mv_left_anti with sync mode;

explain logical select empid 
from emps left anti join depts using (deptno);
-- result:
[REGEX]mv_left_anti
-- !result

select empid 
from emps left anti join depts using (deptno) order by empid;
-- result:
-- !result

drop materialized view mv_left_anti;

create materialized view mv_right_semi
distributed by hash(`deptno`) buckets 10
refresh manual
as
select deptno 
from emps right semi join depts using (deptno);

refresh materialized view mv_right_semi with sync mode;

explain select deptno 
from emps right semi join depts using (deptno);
-- result:
[REGEX]mv_right_semi
-- !result

select deptno 
from emps right semi join depts using (deptno) order by deptno;
-- result:
1
-- !result

drop materialized view mv_right_semi;

create materialized view mv_right_anti
distributed by hash(`deptno`) buckets 10
refresh manual
as
select deptno 
from emps right anti join depts using (deptno);

refresh materialized view mv_right_anti with sync mode;

 explain select depts.deptno
from emps right anti join depts using (deptno);
-- result:
[REGEX]mv_right_anti
-- !result
select depts.deptno 
from emps right anti join depts using (deptno);
-- result:
2
-- !result