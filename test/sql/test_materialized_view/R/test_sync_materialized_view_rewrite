-- name: test_sync_materialized_view_rewrite
admin set frontend config('alter_scheduler_interval_millisecond' = '100');
-- result:
-- !result
CREATE TABLE `duplicate_tbl` (
    `k1` date NULL COMMENT "",   
    `k2` datetime NULL COMMENT "",   
    `k3` char(20) NULL COMMENT "",   
    `k4` varchar(20) NULL COMMENT "",   
    `k5` boolean NULL COMMENT "",   
    `k6` tinyint(4) NULL COMMENT "",   
    `k7` smallint(6) NULL COMMENT "",   
    `k8` int(11) NULL COMMENT "",   
    `k9` bigint(20) NULL COMMENT "",   
    `k10` largeint(40) NULL COMMENT "",   
    `k11` float NULL COMMENT "",   
    `k12` double NULL COMMENT "",   
    `k13` decimal128(27, 9) NULL COMMENT "",   
    INDEX idx1 (`k6`) USING BITMAP 
) 
ENGINE=OLAP DUPLICATE KEY(`k1`, `k2`, `k3`, `k4`, `k5`) 
DISTRIBUTED BY HASH(`k1`, `k2`, `k3`) BUCKETS 3 
PROPERTIES ( 
    "replication_num" = "1", 
    "enable_persistent_index" = "false", 
    "replicated_storage" = "true", 
    "compression" = "LZ4" 
);
-- result:
-- !result
insert into duplicate_tbl values 
    ('2023-06-15', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0),
    ('2023-06-15', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0),
    ('2023-06-15', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0),
    ('2023-06-16', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0)
;
-- result:
-- !result
create materialized view mv_1 as select k1, sum(k6) as k8, max(k7) as k7 from duplicate_tbl group by 1;
-- result:
-- !result
function: wait_materialized_view_finish()
-- result:
None
-- !result
create materialized view mv_2 as select k1, sum(k6 + 1) as k6, max(k7 * 10) as k7 from duplicate_tbl group by 1;
-- result:
-- !result
function: wait_materialized_view_finish()
-- result:
None
-- !result
create materialized view mv_3 as select k1, count(k6 + 1) as c_k6, min(k7 * 10) as m_k7 from duplicate_tbl group by 1;
-- result:
-- !result
function: wait_materialized_view_finish()
-- result:
None
-- !result
CREATE MATERIALIZED VIEW mv_4
AS SELECT k1, MIN(k6), MIN(k7), MIN(k8), SUM(k9), MAX(k10), MIN(k11), MIN(k12), SUM(k13) FROM duplicate_tbl GROUP BY k1;
-- result:
-- !result
function: wait_materialized_view_finish()
-- result:
None
-- !result
CREATE MATERIALIZED VIEW mv_5
AS SELECT k1, MIN(k6+k7) as min1, SUM(k9) as sum1, MAX(k10 + 2 * k11) as max1, SUM(2 * k13) as sum2 FROM duplicate_tbl GROUP BY k1;
-- result:
-- !result
function: wait_materialized_view_finish()
-- result:
None
-- !result
function: check_hit_materialized_view("select k1, sum(k6) as k6, max(k7) as k7 from duplicate_tbl group by 1 order by 1", "mv_1")
-- result:
None
-- !result
function: check_hit_materialized_view("select k1, sum(k6 + 1) as k6, max(k7 * 10) as k7 from duplicate_tbl group by 1 order by 1", "mv_2")
-- result:
None
-- !result
function: check_hit_materialized_view("select k1, count(k6 + 1) as c_k6, min(k7 * 10) as m_k7 from duplicate_tbl group by 1 order by 1", "mv_3")
-- result:
None
-- !result
function: check_hit_materialized_view("SELECT k1, MIN(k6), MIN(k7), MIN(k8), SUM(k9), MAX(k10), MIN(k11), MIN(k12), SUM(k13) FROM duplicate_tbl GROUP BY k1 order by 1", "mv_4")
-- result:
None
-- !result
function: check_hit_materialized_view("SELECT k1, MIN(k6+k7) as min1, SUM(k9) as sum1, MAX(k10 + 2 * k11) as max1, SUM(2 * k13) FROM duplicate_tbl GROUP BY k1", "mv_5")
-- result:
None
-- !result
select k1, sum(k6) as k6, max(k7) as k7 from duplicate_tbl group by 1 order by 1,2;
-- result:
2023-06-15	3	1
2023-06-16	1	1
-- !result
select k1, sum(k6 + 1) as k6, max(k7 * 10) as k7 from duplicate_tbl group by 1 order by 1,2;
-- result:
2023-06-15	6	10
2023-06-16	2	10
-- !result
select k1, count(k6 + 1) as c_k6, min(k7 * 10) as m_k7 from duplicate_tbl group by 1 order by 1,2;
-- result:
2023-06-15	3	10
2023-06-16	1	10
-- !result
SELECT k1, MIN(k6), MIN(k7), MIN(k8), SUM(k9), MAX(k10), MIN(k11), MIN(k12), SUM(k13) FROM duplicate_tbl GROUP BY k1 order by 1,2;
-- result:
2023-06-15	1	1	1	3	1	1.0	1.0	3.000000000
2023-06-16	1	1	1	1	1	1.0	1.0	1.000000000
-- !result
SELECT k1, MIN(k6+k7) as min1, SUM(k9) as sum1, MAX(k10 + 2 * k11) as max1, SUM(2 * k13) FROM duplicate_tbl GROUP BY k1 order by 1,2;
-- result:
2023-06-15	2	3	3.0	6.000000000
2023-06-16	2	1	3.0	2.000000000
-- !result
insert into duplicate_tbl values 
    ('2023-06-15', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0),
    ('2023-06-15', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0),
    ('2023-06-15', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0),
    ('2023-06-16', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0)
;
-- result:
-- !result
function: check_hit_materialized_view("select k1, sum(k6) as k6, max(k7) as k7 from duplicate_tbl group by 1 order by 1", "mv_1")
-- result:
None
-- !result
function: check_hit_materialized_view("select k1, sum(k6 + 1) as k6, max(k7 * 10) as k7 from duplicate_tbl group by 1 order by 1", "mv_2")
-- result:
None
-- !result
function: check_hit_materialized_view("select k1, count(k6 + 1) as c_k6, min(k7 * 10) as m_k7 from duplicate_tbl group by 1 order by 1", "mv_3")
-- result:
None
-- !result
function: check_hit_materialized_view("SELECT k1, MIN(k6), MIN(k7), MIN(k8), SUM(k9), MAX(k10), MIN(k11), MIN(k12), SUM(k13) FROM duplicate_tbl GROUP BY k1 order by 1", "mv_4")
-- result:
None
-- !result
function: check_hit_materialized_view("SELECT k1, MIN(k6+k7) as min1, SUM(k9) as sum1, MAX(k10 + 2 * k11) as max1, SUM(2 * k13) FROM duplicate_tbl GROUP BY k1", "mv_5")
-- result:
None
-- !result
select k1, sum(k6) as k6, max(k7) as k7 from duplicate_tbl group by 1 order by 1,2;
-- result:
2023-06-15	6	1
2023-06-16	2	1
-- !result
select k1, sum(k6 + 1) as k6, max(k7 * 10) as k7 from duplicate_tbl group by 1 order by 1,2;
-- result:
2023-06-15	12	10
2023-06-16	4	10
-- !result
select k1, count(k6 + 1) as c_k6, min(k7 * 10) as m_k7 from duplicate_tbl group by 1 order by 1,2;
-- result:
2023-06-15	6	10
2023-06-16	2	10
-- !result
SELECT k1, MIN(k6), MIN(k7), MIN(k8), SUM(k9), MAX(k10), MIN(k11), MIN(k12), SUM(k13) FROM duplicate_tbl GROUP BY k1 order by 1,2;
-- result:
2023-06-15	1	1	1	6	1	1.0	1.0	6.000000000
2023-06-16	1	1	1	2	1	1.0	1.0	2.000000000
-- !result
SELECT k1, MIN(k6+k7) as min1, SUM(k9) as sum1, MAX(k10 + 2 * k11) as max1, SUM(2 * k13) FROM duplicate_tbl GROUP BY k1 order by 1,2;
-- result:
2023-06-15	2	6	3.0	12.000000000
2023-06-16	2	2	3.0	4.000000000
-- !result
drop materialized view mv_1;
-- result:
-- !result
drop materialized view mv_2;
-- result:
-- !result
drop materialized view mv_3;
-- result:
-- !result
drop materialized view mv_4;
-- result:
-- !result
drop materialized view mv_5;
-- result:
-- !result
drop table if exists case_when_tbl1;
-- result:
-- !result
CREATE TABLE case_when_tbl1 (
    k1 INT,
    k2 char(20))
DUPLICATE KEY(k1)
DISTRIBUTED BY HASH(k1);
-- result:
-- !result
insert into case_when_tbl1 values (1,'xian'), (2, 'beijing'), (3, 'hangzhou');
-- result:
-- !result
create materialized view case_when_mv1 AS SELECT k1, (CASE k2 WHEN 'beijing' THEN 'bigcity' ELSE 'smallcity' END) as city FROM case_when_tbl1;
-- result:
-- !result
function: wait_materialized_view_finish()
-- result:
None
-- !result
create materialized view case_when_mv2 AS SELECT k1, (CASE k2 WHEN 'beijing' THEN concat(k1, 'bigcity') ELSE concat(k1, 'smallcity') END) as case2 FROM case_when_tbl1;
-- result:
-- !result
function: wait_materialized_view_finish()
-- result:
None
-- !result
function: check_hit_materialized_view("SELECT k1, (CASE k2 WHEN 'beijing' THEN 'bigcity' ELSE 'smallcity' END) as city FROM case_when_tbl1", "case_when_mv1")
-- result:
None
-- !result
function: check_hit_materialized_view("SELECT k1, (CASE k2 WHEN 'beijing' THEN concat(k1, 'bigcity') ELSE concat(k1, 'smallcity') END) as city FROM case_when_tbl1", "case_when_mv2")
-- result:
None
-- !result
SELECT k1, (CASE k2 WHEN 'beijing' THEN 'bigcity' ELSE 'smallcity' END) as city FROM case_when_tbl1 order by 1, 2;
-- result:
1	smallcity
2	bigcity
3	smallcity
-- !result
SELECT k1, (CASE k2 WHEN 'beijing' THEN concat(k1, 'bigcity') ELSE concat(k1, 'smallcity') END) as city FROM case_when_tbl1 order by 1,2;
-- result:
1	1smallcity
2	2bigcity
3	3smallcity
-- !result
insert into duplicate_tbl values 
    ('2023-06-15', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0),
    ('2023-06-15', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0),
    ('2023-06-15', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0),
    ('2023-06-16', '2023-06-15 00:00:00', 'a', 'a', false, 1, 1, 1, 1, 1, 1.0, 1.0, 1.0)
;
-- result:
-- !result
function: check_hit_materialized_view("SELECT k1, (CASE k2 WHEN 'beijing' THEN 'bigcity' ELSE 'smallcity' END) as city FROM case_when_tbl1", "case_when_mv1")
-- result:
None
-- !result
function: check_hit_materialized_view(" SELECT k1, (CASE k2 WHEN 'beijing' THEN concat(k1, 'bigcity') ELSE concat(k1, 'smallcity') END) as city FROM case_when_tbl1", "case_when_mv2")
-- result:
None
-- !result
SELECT k1, (CASE k2 WHEN 'beijing' THEN 'bigcity' ELSE 'smallcity' END) as city FROM case_when_tbl1 order by 1,2;
-- result:
1	smallcity
2	bigcity
3	smallcity
-- !result
SELECT k1, (CASE k2 WHEN 'beijing' THEN concat(k1, 'bigcity') ELSE concat(k1, 'smallcity') END) as city FROM case_when_tbl1 order by 1,2;
-- result:
1	1smallcity
2	2bigcity
3	3smallcity
-- !result
drop materialized view case_when_mv1;
-- result:
-- !result
drop materialized view case_when_mv2;
-- result:
-- !result
drop table if exists case_when_tbl1;
-- result:
-- !result
CREATE TABLE IF NOT EXISTS test_base_table1
(
    `col0`             int(11) NULL,
    `col2`           datetime NULL,
    `col3`         varchar(32) NULL,
    `id`               bigint(20) NULL,
    `col1`           bigint(20) NULL
) DUPLICATE KEY(col0, col2, col3)
  PARTITION BY RANGE(col2)(
  START ("2022-04-17") END ("2022-05-01") EVERY (INTERVAL 1 day))
  DISTRIBUTED BY HASH(col0)
  PROPERTIES
(
    "replication_num" = "1"
);
-- result:
-- !result
INSERT INTO test_base_table1 (col0, col2, col3, id, col1) VALUES (123456789, '2022-04-30 12:00:00', 'Guangdong', 1, 10001);
-- result:
-- !result
INSERT INTO test_base_table1 (col0, col2, col3) VALUES (987654321, '2022-04-30 13:00:00', 'Fujian');
-- result:
-- !result
CREATE MATERIALIZED VIEW mv_test_base_table1 AS
SELECT col2,col3,col0,id,col1 FROM test_base_table1 ORDER BY col2,col3,col0;
-- result:
-- !result
analyze full table test_base_table1 with sync mode;
-- result:
test_db_f3ff2226c33811eea0bfdbbedfe51b53.test_base_table1	analyze	status	OK
-- !result
function: wait_materialized_view_finish()
-- result:
None
-- !result
function: wait_global_dict_ready("col3", "test_base_table1")
-- result:

-- !result
function: check_hit_materialized_view("select col3, min(col1) startTime, max(col1) endTime from test_base_table1 where col2 BETWEEN '2022-04-29 15:12:23' and '2022-04-30 15:12:23' group by col3;", "mv_test_base_table1")
-- result:
None
-- !result
select col3, min(col1) startTime, max(col1) endTime from test_base_table1 where col2 BETWEEN '2022-04-29 00:00:00' and '2022-04-30 23:00:00' group by col3 order by 1;
-- result:
Fujian	None	None
Guangdong	10001	10001
-- !result
function: check_hit_materialized_view("select * from test_base_table1 where col0=123456789", "rollup: test_base_table1")
-- result:
None
-- !result
select * from test_base_table1 where col0=123456789 order by 1;
-- result:
123456789	2022-04-30 12:00:00	Guangdong	1	10001
-- !result
function: check_hit_materialized_view("select * from test_base_table1 where col2 >='2022-04-30 12:00:00'", "rollup: mv_test_base_table1")
-- result:
None
-- !result
select * from test_base_table1 where col2 >='2022-04-30 12:00:00' order by 1;
-- result:
123456789	2022-04-30 12:00:00	Guangdong	1	10001
987654321	2022-04-30 13:00:00	Fujian	None	None
-- !result
function: check_hit_materialized_view("select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 union select col0, col2, col3, id, col1 from test_base_table1 where col2 >='2022-04-30 12:00:00') t;", "rollup: mv_test_base_table1",  "rollup: test_base_table1")
-- result:
None
-- !result
select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 union select col0, col2, col3, id, col1 from test_base_table1 where col2 >='2022-04-30 12:00:00') t order by 1;
-- result:
123456789	2022-04-30 12:00:00	Guangdong	1	10001
987654321	2022-04-30 13:00:00	Fujian	None	None
-- !result
set select_ratio_threshold = 0.15;
-- result:
-- !result
function: check_hit_materialized_view("select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 or col2 >='2022-04-30 12:00:00') t;", "rollup: mv_test_base_table1")
-- result:
None
-- !result
function: check_no_hit_materialized_view("select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 or col2 >='2022-04-30 12:00:00') t;", "rollup: test_base_table1")
-- result:
None
-- !result
select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 or col2 >='2022-04-30 12:00:00') t;
-- result:
123456789	2022-04-30 12:00:00	Guangdong	1	10001
987654321	2022-04-30 13:00:00	Fujian	None	None
-- !result
function: check_hit_materialized_view("select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 or col2 ='2022-04-30 12:00:00') t;", "rollup: mv_test_base_table1")
-- result:
None
-- !result
function: check_no_hit_materialized_view("select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 or col2 ='2022-04-30 12:00:00') t", "rollup: test_base_table1")
-- result:
None
-- !result
select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 or col2 ='2022-04-30 12:00:00') t;
-- result:
123456789	2022-04-30 12:00:00	Guangdong	1	10001
-- !result
set select_ratio_threshold=-1;
-- result:
-- !result
function: check_hit_materialized_view("select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 or col2 >='2022-04-30 12:00:00') t;", "rollup: mv_test_base_table1",  "rollup: test_base_table1")
-- result:
None
-- !result
select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 or col2 >='2022-04-30 12:00:00') t;
-- result:
987654321	2022-04-30 13:00:00	Fujian	None	None
123456789	2022-04-30 12:00:00	Guangdong	1	10001
-- !result
function: check_hit_materialized_view("select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 or col2 ='2022-04-30 12:00:00') t;", "rollup: mv_test_base_table1",  "rollup: test_base_table1")
-- result:
None
-- !result
select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 or col2 ='2022-04-30 12:00:00') t;
-- result:
123456789	2022-04-30 12:00:00	Guangdong	1	10001
-- !result
set select_ratio_threshold = 0.15;
-- result:
-- !result
set enable_sync_materialized_view_rewrite=false;
-- result:
-- !result
function: check_hit_materialized_view("select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 union select col0, col2, col3, id, col1 from mv_test_base_table1 [_SYNC_MV_] where col2 >='2022-04-30 12:00:00') t;", "rollup: mv_test_base_table1",  "rollup: test_base_table1")
-- result:
None
-- !result
select * from (select col0, col2, col3, id, col1 from test_base_table1 where col0=123456789 union select col0, col2, col3, id, col1 from mv_test_base_table1 [_SYNC_MV_] where col2 >='2022-04-30 12:00:00') t order by 1;
-- result:
123456789	2022-04-30 12:00:00	Guangdong	1	10001
987654321	2022-04-30 13:00:00	Fujian	None	None
-- !result
set enable_sync_materialized_view_rewrite=true;
-- result:
-- !result
drop table test_base_table1;
-- result:
-- !result
