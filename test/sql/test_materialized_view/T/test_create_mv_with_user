-- name: test_create_mv_with_user

drop database if exists test_create_mv_with_user;
create database test_create_mv_with_user;
use test_create_mv_with_user;

[UC]shell: ip=hostname -I | awk '{print $1}';
DROP USER IF EXISTS mv_creator@'${ip[1]}';
CREATE USER mv_creator@'${ip[1]}';

GRANT DELETE, DROP, INSERT, SELECT, ALTER, UPDATE ON ALL TABLES IN DATABASE test_create_mv_with_user
    TO USER mv_creator@'${ip[1]}';
GRANT CREATE TABLE, CREATE MATERIALIZED VIEW ON DATABASE test_create_mv_with_user
    TO USER mv_creator@'${ip[1]}';
GRANT SELECT, DROP, ALTER, REFRESH ON ALL MATERIALIZED VIEWS IN DATABASE test_create_mv_with_user
    TO USER mv_creator@'${ip[1]}';
    
-- switch user mv_creator
GRANT IMPERSONATE ON USER root TO mv_creator@'${ip[1]}';
EXECUTE AS mv_creator@'${ip[1]}' with no revert;

-- create & use materialized view
create table t1(c1 int, c2 int);
insert into t1 values(1,1);
create materialized view mv1 REFRESH MANUAL as select * from t1;
refresh materialized view mv1;
alter materialized view mv1 refresh manual;
refresh materialized view mv1;
select * from mv1;
drop materialized view mv1;

execute as root with no revert;
drop user mv_creator@'${ip[1]}';

-- Test TaskRun role activation fix: User with multiple roles, only one has REFRESH privilege
-- This test verifies that MV refresh works regardless of session default roles
-- because TaskRun context activates all user roles
-- Tests both creator-based and root-based authorization modes
DROP USER IF EXISTS mv_multi_role_user@'${ip[1]}';
DROP ROLE IF EXISTS role_with_refresh;
DROP ROLE IF EXISTS role_without_refresh;

CREATE ROLE role_with_refresh;
GRANT SELECT, DROP, ALTER, REFRESH ON ALL MATERIALIZED VIEWS IN DATABASE test_create_mv_with_user TO ROLE role_with_refresh;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN DATABASE test_create_mv_with_user TO ROLE role_with_refresh;
GRANT CREATE TABLE, CREATE MATERIALIZED VIEW ON DATABASE test_create_mv_with_user TO ROLE role_with_refresh;

CREATE ROLE role_without_refresh;
GRANT SELECT, DROP ON ALL MATERIALIZED VIEWS IN DATABASE test_create_mv_with_user TO ROLE role_without_refresh;
GRANT SELECT  ON ALL TABLES IN DATABASE test_create_mv_with_user TO ROLE role_without_refresh;
GRANT CREATE TABLE, CREATE MATERIALIZED VIEW ON DATABASE test_create_mv_with_user TO ROLE role_without_refresh;

CREATE USER mv_multi_role_user@'${ip[1]}';
GRANT role_with_refresh, role_without_refresh TO USER mv_multi_role_user@'${ip[1]}';
GRANT IMPERSONATE ON USER root TO mv_multi_role_user@'${ip[1]}';

-- Grant direct privileges to user so they can create tables even with default_role=none
-- GRANT CREATE TABLE, CREATE MATERIALIZED VIEW ON DATABASE test_create_mv_with_user TO USER mv_multi_role_user@'${ip[1]}';
-- GRANT SELECT ON ALL TABLES IN DATABASE test_create_mv_with_user TO USER mv_multi_role_user@'${ip[1]}';

-- Test Case 1: Creator-based authorization (mv_use_creator_based_authorization=true)
-- This tests the default behavior where MV refresh uses the creator's context
SET DEFAULT ROLE NONE TO mv_multi_role_user@'${ip[1]}';
EXECUTE AS mv_multi_role_user@'${ip[1]}' with no revert;
SET ROLE role_with_refresh;

CREATE TABLE test_mv_table(id int, name varchar(20), value int);
INSERT INTO test_mv_table VALUES (1, 'test1', 100), (2, 'test2', 200);

CREATE MATERIALIZED VIEW test_mv_async REFRESH MANUAL AS 
SELECT id, name, SUM(value) as total_value 
FROM test_mv_table 
GROUP BY id, name;

SET ROLE role_with_refresh;
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async')
SET ROLE role_without_refresh;
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async')

-- Test Case 2: Creator-based authorization with default role
SET DEFAULT ROLE role_with_refresh TO mv_multi_role_user@'${ip[1]}';
SET ROLE role_with_refresh;

CREATE TABLE test_mv_table2(id int, name varchar(20), value int);
INSERT INTO test_mv_table2 VALUES (1, 'test1', 100), (2, 'test2', 200);

CREATE MATERIALIZED VIEW test_mv_async2 REFRESH MANUAL AS 
SELECT id, name, SUM(value) as total_value 
FROM test_mv_table2 
GROUP BY id, name;

function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async2')
SET ROLE role_without_refresh;
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async2')

-- Test Case 3: Creator-based authorization with insufficient default role
SET DEFAULT ROLE role_without_refresh TO mv_multi_role_user@'${ip[1]}';
SET ROLE role_with_refresh;

CREATE TABLE test_mv_table3(id int, name varchar(20), value int);
INSERT INTO test_mv_table3 VALUES (1, 'test1', 100), (2, 'test2', 200);

CREATE MATERIALIZED VIEW test_mv_async3 REFRESH MANUAL AS 
SELECT id, name, SUM(value) as total_value 
FROM test_mv_table3 
GROUP BY id, name;

function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async3')
SET ROLE role_without_refresh;
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async3')

-- Test Case 4: Root-based authorization (mv_use_creator_based_authorization=false)
-- This tests when MV refresh always uses ROOT user regardless of creator
EXECUTE AS root with no revert;
REVOKE role_with_refresh FROM mv_multi_role_user@'${ip[1]}';
SET DEFAULT ROLE NONE TO mv_multi_role_user@'${ip[1]}';
EXECUTE AS mv_multi_role_user@'${ip[1]}' with no revert;
SET ROLE role_without_refresh;

CREATE TABLE test_mv_table4(id int, name varchar(20), value int);
CREATE MATERIALIZED VIEW test_mv_async4 REFRESH DEFERRED MANUAL AS 
SELECT id, name, SUM(value) as total_value 
FROM test_mv_table4 
GROUP BY id, name;

EXECUTE AS root with no revert;
INSERT INTO test_mv_table4 VALUES (1, 'test1', 100), (2, 'test2', 200);

ADMIN SET FRONTEND CONFIG('mv_use_creator_based_authorization' = 'true');
SELECT count(*) from test_mv_async4;
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async4')
SELECT count(*) from test_mv_async4;

ADMIN SET FRONTEND CONFIG('mv_use_creator_based_authorization' = 'false');
function: refresh_mv_manual('test_create_mv_with_user', 'test_mv_async4')
SELECT count(*) from test_mv_async4;

-- Cleanup all created objects
ADMIN SET FRONTEND CONFIG('mv_use_creator_based_authorization' = 'true');
DROP ROLE role_with_refresh;
DROP ROLE role_without_refresh;
DROP USER mv_multi_role_user@'${ip[1]}';