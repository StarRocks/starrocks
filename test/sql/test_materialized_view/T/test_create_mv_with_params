-- name: test_create_mv_with_params

create external catalog mv_iceberg_${uuid0}
properties
(
    "type" = "iceberg",
    "iceberg.catalog.type" = "hive",
    "hive.metastore.uris" = "${iceberg_catalog_hive_metastore_uris}"
);
set catalog mv_iceberg_${uuid0};
create database mv_ice_db_${uuid0};
use mv_ice_db_${uuid0};
create table mv_ice_tbl_${uuid0} (
  col_str string,
  col_int int,
  dt date
) partition by(dt);
insert into mv_ice_tbl_${uuid0} values 
  ('1d8cf2a2c0e14fa89d8117792be6eb6f', 2000, '2023-12-01'),
  ('3e82e36e56718dc4abc1168d21ec91ab', 2000, '2023-12-01'),
  ('abc', 2000, '2023-12-02'),
  (NULL, 2000, '2023-12-02'),
  ('ab1d8cf2a2c0e14fa89d8117792be6eb6f', 2001, '2023-12-03'),
  ('3e82e36e56718dc4abc1168d21ec91ab', 2001, '2023-12-03'),
  ('abc', 2001, '2023-12-04'),
  (NULL, 2001, '2023-12-04');

set catalog default_catalog;

create database test_create_mv_with_params;
use test_create_mv_with_params;

-- case 1: with specific param
CREATE MATERIALIZED VIEW test_iceberg_mv0_${uuid0} PARTITION BY dt 
REFRESH DEFERRED MANUAL 
properties (
    "replication_num" = "1",
    "partition_refresh_number" = "1"
)
AS SELECT dt,sum(col_int) 
FROM mv_iceberg_${uuid0}.mv_ice_db_${uuid0}.mv_ice_tbl_${uuid0}  GROUP BY dt;

refresh materialized view test_iceberg_mv0_${uuid0};
function: wait_async_materialized_view_finish("test_iceberg_mv0_${uuid0}", 2)
-- result should be > 1, because it refresh partitions one by one
select count(*) > 1 from information_schema.task_runs where `database`='test_create_mv_with_params' and `DEFINITION` like "%test_iceberg_mv0_${uuid0}%";
SELECT dt,sum(col_int)  FROM mv_iceberg_${uuid0}.mv_ice_db_${uuid0}.mv_ice_tbl_${uuid0}  GROUP BY dt order by dt;
drop materialized view test_iceberg_mv0_${uuid0};

-- case 2: with no params
CREATE MATERIALIZED VIEW test_iceberg_mv1_${uuid0} PARTITION BY dt 
REFRESH DEFERRED MANUAL 
properties (
    "replication_num" = "1"
)
AS SELECT dt,sum(col_int) 
FROM mv_iceberg_${uuid0}.mv_ice_db_${uuid0}.mv_ice_tbl_${uuid0}  GROUP BY dt;

refresh materialized view test_iceberg_mv1_${uuid0};
function: wait_async_materialized_view_finish("test_iceberg_mv1_${uuid0}", 2)
-- result should be > 1, because it refresh partitions one by one
select count(*) > 1 from information_schema.task_runs where `database`='test_create_mv_with_params' and `DEFINITION` like "%test_iceberg_mv1_${uuid0}%";
SELECT dt,sum(col_int)  FROM mv_iceberg_${uuid0}.mv_ice_db_${uuid0}.mv_ice_tbl_${uuid0}  GROUP BY dt order by dt;
drop materialized view test_iceberg_mv1_${uuid0};

-- case3: test sync mode with params
CREATE MATERIALIZED VIEW test_iceberg_mv2_${uuid0} PARTITION BY dt 
REFRESH DEFERRED MANUAL 
properties (
    "replication_num" = "1",
    "partition_refresh_number" = "1"
)
AS SELECT dt,sum(col_int) 
FROM mv_iceberg_${uuid0}.mv_ice_db_${uuid0}.mv_ice_tbl_${uuid0}  GROUP BY dt;

refresh materialized view test_iceberg_mv2_${uuid0} with sync mode;
function: wait_async_materialized_view_finish("test_iceberg_mv2_${uuid0}")
-- result should be 1, because it refresh partitions by sync
select count(*) = 1 from information_schema.task_runs where `database`='test_create_mv_with_params' and `DEFINITION` like "%test_iceberg_mv2_${uuid0}%";
SELECT dt,sum(col_int)  FROM mv_iceberg_${uuid0}.mv_ice_db_${uuid0}.mv_ice_tbl_${uuid0}  GROUP BY dt order by dt;
drop materialized view test_iceberg_mv2_${uuid0};

drop database test_create_mv_with_params;