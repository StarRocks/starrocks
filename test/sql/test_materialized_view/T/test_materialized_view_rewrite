-- name: test_materialized_view_rewrite
create table user_tags (time date, user_id int, user_name varchar(20), tag_id int) partition by range (time)  (partition p1 values less than MAXVALUE) distributed by hash(time) buckets 3 properties('replication_num' = '1');
insert into user_tags values('2023-04-13', 1, 'a', 1);
insert into user_tags values('2023-04-13', 1, 'b', 2);
insert into user_tags values('2023-04-13', 1, 'c', 3);
insert into user_tags values('2023-04-13', 1, 'd', 4);
insert into user_tags values('2023-04-13', 1, 'e', 5);
insert into user_tags values('2023-04-13', 2, 'e', 5);
insert into user_tags values('2023-04-13', 3, 'e', 6);

-- TEST BITMAP: NO ROLLUP
create materialized view user_tags_mv1  distributed by hash(user_id) as select user_id, bitmap_union(to_bitmap(tag_id)) from user_tags group by user_id;
refresh materialized view user_tags_mv1 with sync mode;
set enable_materialized_view_rewrite = off;
select user_id, count(distinct tag_id) from user_tags group by user_id order by user_id;
select user_id, bitmap_union_count(to_bitmap(tag_id)) from user_tags group by user_id order by user_id;
select user_id, bitmap_count(bitmap_union(to_bitmap(tag_id))) x from user_tags group by user_id order by user_id;
set enable_materialized_view_rewrite = on;
-- explain logical select user_id, count(distinct tag_id) from user_tags group by user_id order by user_id;
select user_id, count(distinct tag_id) from user_tags group by user_id order by user_id;
select user_id, bitmap_union_count(to_bitmap(tag_id)) from user_tags group by user_id order by user_id;
select user_id, bitmap_count(bitmap_union(to_bitmap(tag_id))) x from user_tags group by user_id order by user_id;
drop materialized view user_tags_mv1;

-- TEST BITMAP: ROLLUP
create materialized view user_tags_mv2  distributed by hash(user_id) as select user_id, time, bitmap_union(to_bitmap(tag_id)) from user_tags group by user_id, time;
refresh materialized view user_tags_mv2 with sync mode;
set enable_materialized_view_rewrite = on;
explain logical select user_id, count(distinct tag_id) from user_tags group by user_id order by user_id;
select user_id, count(distinct tag_id) from user_tags group by user_id order by user_id;
select user_id, bitmap_union_count(to_bitmap(tag_id)) from user_tags group by user_id order by user_id;
select user_id, bitmap_count(bitmap_union(to_bitmap(tag_id))) x from user_tags group by user_id order by user_id;
drop materialized view user_tags_mv2;

-- TEST HLL: NO ROLLUP
create materialized view user_tags_hll_mv1  distributed by hash(user_id) as select user_id, time, hll_union(hll_hash(tag_id)) a  from user_tags group by user_id, time;
refresh materialized view user_tags_hll_mv1 with sync mode;
set enable_materialized_view_rewrite = off;
select user_id, approx_count_distinct(tag_id) x from user_tags group by user_id order by user_id;
select user_id, ndv(tag_id) x from user_tags group by user_id order by user_id;
select user_id, hll_union_agg(hll_hash(tag_id)) x from user_tags group by user_id order by user_id;
select user_id, hll_cardinality(hll_union(hll_hash(tag_id))) x from user_tags group by user_id order by user_id;
set enable_materialized_view_rewrite = on;
select user_id, approx_count_distinct(tag_id) x from user_tags group by user_id order by user_id;
select user_id, ndv(tag_id) x from user_tags group by user_id order by user_id;
select user_id, hll_union_agg(hll_hash(tag_id)) x from user_tags group by user_id order by user_id;
select user_id, hll_cardinality(hll_union(hll_hash(tag_id))) x from user_tags group by user_id order by user_id;
drop materialized view user_tags_hll_mv1;

-- TEST HLL: ROLLUP
create materialized view user_tags_hll_mv2  distributed by hash(user_id) as select user_id, time, hll_union(hll_hash(tag_id)) from user_tags group by user_id, time;
refresh materialized view user_tags_hll_mv2 with sync mode;
set enable_materialized_view_rewrite = on;
select user_id, approx_count_distinct(tag_id) x from user_tags group by user_id order by user_id;
select user_id, ndv(tag_id) x from user_tags group by user_id order by user_id;
select user_id, hll_union_agg(hll_hash(tag_id)) x from user_tags group by user_id order by user_id;
select user_id, hll_cardinality(hll_union(hll_hash(tag_id))) x from user_tags group by user_id order by user_id;
drop materialized view user_tags_hll_mv2;

-- TEST PERCENTILE: NO ROLLUP
create materialized view user_tags_percential_mv1 distributed by hash(user_id) as select user_id, percentile_union(percentile_hash(tag_id)) from user_tags group by user_id order by user_id;
refresh materialized view user_tags_percential_mv1 with sync mode;
set enable_materialized_view_rewrite = off;
select user_id, percentile_approx(tag_id, 1) x from user_tags group by user_id order by user_id;
select user_id, percentile_approx(tag_id, 0) x from user_tags group by user_id order by user_id;
select user_id, round(percentile_approx(tag_id, 0)) x from user_tags group by user_id order by user_id;
set enable_materialized_view_rewrite = on;
select user_id, percentile_approx_raw(percentile_union(percentile_hash(tag_id)), 1) x from user_tags group by user_id order by user_id;
select user_id, percentile_approx_raw(percentile_union(percentile_hash(tag_id)), 1) x from user_tags group by user_id order by user_id;
select user_id, percentile_approx(tag_id, 0) x from user_tags group by user_id order by user_id;
select user_id, round(percentile_approx(tag_id, 0)) x from user_tags group by user_id order by user_id;
drop materialized view user_tags_percential_mv1;

-- TEST PERCENTILE: ROLLUP
create materialized view user_tags_percential_mv2 distributed by hash(user_id) as select user_id, time, percentile_union(percentile_hash(tag_id)) from user_tags group by user_id, time;
refresh materialized view user_tags_percential_mv2 with sync mode;
set enable_materialized_view_rewrite = on;
select user_id, percentile_approx(tag_id, 1) x from user_tags group by user_id order by user_id;
select user_id, percentile_approx(tag_id, 1) x from user_tags group by user_id order by user_id;
select user_id, percentile_approx(tag_id, 0) x from user_tags group by user_id order by user_id;
select user_id, round(percentile_approx(tag_id, 0)) x from user_tags group by user_id order by user_id;
select user_id, time, round(percentile_approx(tag_id, 0)) from user_tags group by user_id, time order by user_id;
drop materialized view user_tags_percential_mv2;

-- TEST BITMAP : UNOION
create materialized view user_tags_mv3  distributed by hash(user_id) as select user_id, tag_id from user_tags where user_id > 2;
refresh materialized view user_tags_mv3 with sync mode;
set enable_materialized_view_rewrite = off;
select user_id, approx_count_distinct(tag_id) x from user_tags group by user_id order by user_id;
select user_id, ndv(tag_id) x from user_tags group by user_id order by user_id;
select user_id, hll_union_agg(hll_hash(tag_id)) x from user_tags group by user_id order by user_id;
select user_id, hll_cardinality(hll_union(hll_hash(tag_id))) x from user_tags group by user_id order by user_id;
set enable_materialized_view_rewrite = on;
select user_id, approx_count_distinct(tag_id) x from user_tags group by user_id order by user_id;
select user_id, ndv(tag_id) x from user_tags group by user_id order by user_id;
select user_id, hll_union_agg(hll_hash(tag_id)) x from user_tags group by user_id order by user_id;
select user_id, hll_cardinality(hll_union(hll_hash(tag_id))) x from user_tags group by user_id order by user_id;
drop materialized view user_tags_mv3;

create materialized view agg_mv1 
distributed by hash(user_id) 
as 
select user_id, time, sum(tag_id) as total
from user_tags 
group by user_id, time;

refresh materialized view agg_mv1 with sync mode;

function: check_hit_materialized_view("select user_id, time, sum(tag_id) as total from user_tags group by user_id, time having sum(tag_id) > 2 order by user_id, time", "agg_mv1")
select user_id, time, sum(tag_id) as total from user_tags group by user_id, time having sum(tag_id) > 2 order by user_id, time;

function: check_hit_materialized_view("select user_id, sum(tag_id) as total from user_tags  group by user_id having sum(tag_id) > 2 order by user_id", "agg_mv1")
select user_id, sum(tag_id) as total from user_tags  group by user_id having sum(tag_id) > 2 order by user_id;

set enable_materialized_view_rewrite = off;

function: check_no_hit_materialized_view("select user_id, time, sum(tag_id) as total from user_tags group by user_id, time having sum(tag_id) > 2 order by user_id, time", "agg_mv1")
select user_id, time, sum(tag_id) as total from user_tags group by user_id, time having sum(tag_id) > 2 order by user_id, time;

function: check_no_hit_materialized_view("select user_id, sum(tag_id) as total from user_tags  group by user_id having sum(tag_id) > 2 order by user_id", "agg_mv1")
select user_id, sum(tag_id) as total from user_tags  group by user_id having sum(tag_id) > 2 order by user_id;

-- name: test_all_join_type_rewrite
CREATE TABLE emps (
    empid INT NOT NULL,
    deptno INT NOT NULL,
    locationid INT NOT NULL,
    commission INT NOT NULL,
    name VARCHAR(20) NOT NULL,
    salary DECIMAL(18, 2)
) ENGINE=OLAP
DUPLICATE KEY(`empid`)
DISTRIBUTED BY HASH(`empid`) BUCKETS 12
PROPERTIES (
    "replication_num" = "1"
);

CREATE TABLE depts(
    deptno INT NOT NULL,
    name VARCHAR(20)
) ENGINE=OLAP
DUPLICATE KEY(`deptno`)
DISTRIBUTED BY HASH(`deptno`) BUCKETS 12
PROPERTIES (
    "replication_num" = "1"
);

CREATE TABLE dependents(
    empid INT NOT NULL,
    name VARCHAR(20)
) ENGINE=OLAP
DUPLICATE KEY(`empid`)
DISTRIBUTED BY HASH(`empid`) BUCKETS 12
PROPERTIES (
    "replication_num" = "1"
);

insert into emps values(1, 1, 1, 10, "emp_name1", 1000);
insert into emps values(2, 1, 1, 10, "emp_name1", 1000);
insert into emps values(3, 1, 1, 10, "emp_name1", 1000);

insert into depts values(1, "dept_name1");
insert into depts values(2, "dept_name2");

insert into dependents values(1, "dependents_name1");
insert into dependents values(2, "dependents_name2");
insert into dependents values(3, "dependents_name3");

create materialized view mv_right_outer
distributed by hash(`empid`) buckets 10
refresh manual
as
select empid, depts.deptno
from emps right outer join depts using (deptno);

refresh materialized view mv_right_outer with sync mode;

explain logical select empid, depts.deptno
from emps right outer join depts using (deptno);

select empid, depts.deptno
from emps right outer join depts using (deptno) order by empid;

drop materialized view mv_right_outer;

create materialized view mv_full_outer
distributed by hash(`empid`) buckets 10
refresh manual
as
select empid, depts.deptno 
from emps full outer join depts using (deptno);

refresh materialized view mv_full_outer with sync mode;

explain logical select empid, depts.deptno 
from emps full outer join depts using (deptno);

select empid, depts.deptno 
from emps full outer join depts using (deptno) order by empid;

drop materialized view mv_full_outer;

create materialized view mv_left_semi
distributed by hash(`empid`) buckets 10
refresh manual
as
select empid 
from emps left semi join depts using (deptno);

refresh materialized view mv_left_semi with sync mode;

explain logical select empid 
from emps left semi join depts using (deptno);

select empid 
from emps left semi join depts using (deptno) order by empid;

drop materialized view mv_left_semi;

create materialized view mv_left_anti
distributed by hash(`empid`) buckets 10
refresh manual
as
select empid 
from emps left anti join depts using (deptno);

refresh materialized view mv_left_anti with sync mode;

explain logical select empid 
from emps left anti join depts using (deptno);

select empid 
from emps left anti join depts using (deptno) order by empid;

drop materialized view mv_left_anti;

create materialized view mv_right_semi
distributed by hash(`deptno`) buckets 10
refresh manual
as
select deptno 
from emps right semi join depts using (deptno);

refresh materialized view mv_right_semi with sync mode;

explain select deptno 
from emps right semi join depts using (deptno);

select deptno 
from emps right semi join depts using (deptno) order by deptno;

drop materialized view mv_right_semi;

create materialized view mv_right_anti
distributed by hash(`deptno`) buckets 10
refresh manual
as
select deptno 
from emps right anti join depts using (deptno);

refresh materialized view mv_right_anti with sync mode;

explain select depts.deptno
from emps right anti join depts using (deptno);

select depts.deptno 
from emps right anti join depts using (deptno);

-- name: test_count_rollup_with_empty_table
create table empty_tbl(time date, user_id int not null, user_name varchar(20), tag_id int) partition by range (time)  (partition p1 values less than MAXVALUE) distributed by hash(time) buckets 3 properties('replication_num' = '1');
create materialized view empty_tbl_with_mv distributed by hash(user_id) 
as select user_id, time, count(tag_id) from empty_tbl group by user_id, time;
select count() from empty_tbl;
select user_id, count(tag_id) from empty_tbl group by user_id, time;
select user_id, count(tag_id) from empty_tbl group by user_id;

insert into empty_tbl values('2023-04-13', 1, 'a', 1);
refresh materialized view empty_tbl_with_mv with sync mode;
select count() from empty_tbl where user_id > 2;
select user_id, count(tag_id) from empty_tbl where user_id = 2 group by user_id, time;
select user_id, count(tag_id) from empty_tbl where user_id > 2 group by user_id;
select user_id, count(tag_id) from empty_tbl group by user_id;
select count(user_id) from empty_tbl where user_id > 2 group by user_id;
select count(user_id) from empty_tbl where user_id > 2;

drop table empty_tbl;
drop materialized view empty_tbl_with_mv;


CREATE TABLE orders (
    dt date NOT NULL,
    order_id bigint NOT NULL,
    user_id int NOT NULL,
    merchant_id int NOT NULL,
    good_id int NOT NULL,
    good_name string NOT NULL,
    price int NOT NULL,
    cnt int NOT NULL,
    revenue int NOT NULL,
    state tinyint NOT NULL
)
PRIMARY KEY (dt, order_id)
PARTITION BY RANGE(dt) (
    PARTITION p20210820 VALUES [('2021-08-20'), ('2021-08-21')),
    PARTITION p20210821 VALUES [('2021-08-21'), ('2021-08-22'))
)
DISTRIBUTED BY HASH(order_id) BUCKETS 4
PROPERTIES (
    "replication_num" = "1",
    "enable_persistent_index" = "true"
);
            
CREATE MATERIALIZED VIEW order_mv2
PARTITION BY date_trunc('MONTH', dt)
DISTRIBUTED BY HASH(order_id) BUCKETS 10
REFRESH ASYNC START('2023-07-01 10:00:00') EVERY (interval 1 day)
AS
select
    dt,
    order_id,
    user_id,
    sum(cnt) as total_cnt,
    sum(revenue) as total_revenue,
    count(state) as state_count
from orders group by dt, order_id, user_id;
select count() from orders;
drop materialized view order_mv2;
