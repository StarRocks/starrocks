-- name: test_show_materialized_view
set enable_rewrite_bitmap_union_to_bitamp_agg = false;
create database test_show_materialized_view;
use test_show_materialized_view;
create table user_tags (time date, user_id int, user_name varchar(20), tag_id int) partition by range (time)  (partition p1 values less than MAXVALUE) distributed by hash(time) buckets 3 properties('replication_num' = '1');
create materialized view user_tags_mv1  distributed by hash(user_id) as select user_id, bitmap_union(to_bitmap(tag_id)) from user_tags group by user_id;


show create materialized view user_tags_mv1;
show create table user_tags_mv1;
alter materialized view user_tags_mv1 set ("session.insert_timeout" = "3600");
alter materialized view user_tags_mv1 set ("mv_rewrite_staleness_second" = "3600");
show create materialized view user_tags_mv1;
show create table user_tags_mv1;

-- information_schema.materialized_views
refresh materialized view user_tags_mv1 with sync mode;
select 
    TABLE_NAME,
    LAST_REFRESH_STATE,
    LAST_REFRESH_ERROR_CODE,
    IS_ACTIVE,
    INACTIVE_REASON
from information_schema.materialized_views where table_name = 'user_tags_mv1';
set @last_refresh_time = (
    select max(last_refresh_start_time)
    from information_schema.materialized_views where table_name = 'user_tags_mv1'
);

-- multiple refresh tasks
refresh materialized view user_tags_mv1 force with sync mode;
select 
    TABLE_NAME,
    LAST_REFRESH_STATE,
    LAST_REFRESH_ERROR_CODE,
    IS_ACTIVE,
    INACTIVE_REASON
from information_schema.materialized_views where table_name = 'user_tags_mv1';
set @this_refresh_time = (
    select max(last_refresh_start_time)
    from information_schema.materialized_views where table_name = 'user_tags_mv1'
);
select if(@last_refresh_time != @this_refresh_time, 
    'refreshed', concat('no refresh after ', @last_refresh_time));


drop database test_show_materialized_view;