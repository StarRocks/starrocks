// Copyright 2021-present StarRocks, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package starrocks;

import "olap_file.proto";
import "types.proto";

message RowsetIdPB {
  optional int64 hi = 1;
  optional int64 mi = 2;
  optional int64 lo = 3;
}

message FileIdPB {
  optional RowsetIdPB rowset_id = 1;
  optional int32 segment_index = 2;
}

enum LogEntryTypePB {
  INSERT_RANGE = 0;
  UPDATE = 1;
  DELETE = 2;
  EMPTY = 3;
}

message InsertRangePB {
  optional FileIdPB file_id = 1;
  optional int32 start_row_id = 2;
  optional int32 num_rows = 3;
}

message UpdatePB {
  optional FileIdPB before_file_id = 1;
  optional int32 before_row_id = 2;
  optional FileIdPB after_file_id = 3;
  optional int32 after_row_id = 4;
}

message DeletePB {
  optional FileIdPB file_id = 1;
  optional int32 row_id = 2;
}

message LogEntryPB {
  optional LogEntryTypePB entry_type = 1;
  optional InsertRangePB insert_range_data = 2;
  optional UpdatePB update_data = 3;
  optional DeletePB delete_data = 4;
}

message PageContentPB {
  repeated LogEntryPB entries = 1;
}

enum PageType {
  NORMAL = 0;
}

message PageHeaderPB {
  // type of page
  optional PageType page_type = 1;
  // compress type
  optional CompressionTypePB compress_type = 2;
  // size of uncompressed page
  optional int32 uncompressed_size = 3;
  // size of compressed page
  optional int32 compressed_size = 4;
  // crc for compressed page
  optional int32 compressed_page_crc = 5;
  // the version of change events in the page
  optional int64 version = 6;
  // number of log entries
  optional int32 num_log_entries = 7;
  // sequence number of the first change event in the page
  optional int64 start_seq_id = 8;
  // sequence number of the last change event in the page
  optional int64 end_seq_id = 9;
  // timestamp of change events in the page. Currently events
  // in a version have the same timestamp
  optional int64 timestamp_in_us = 10;
  // whether this is the last page of the version
  optional bool end_of_version = 11;
  // rowsets that this page uses
  repeated RowsetIdPB rowsets = 12;
}

message BinlogFileHeaderPB {
  optional int32 format_version = 1;
}

// Meta for a binlog file
message BinlogFileMetaPB {
  optional int64 id = 1;
  // the version of the first change event in the file
  optional int64 start_version = 2;
  // the sequence number in the start_version for the first
  // change event in the file
  optional int64 start_seq_id = 3;
  // timestamp for the first change evnet in the file
  optional int64 start_timestamp_in_us = 4;
  // the version of the last change event in the file
  optional int64 end_version = 5;
  // the sequence number in the end_version for the last
  // change event in the file
  optional int64 end_seq_id = 6;
  // timestamp for the last change evnet in the file
  optional int64 end_timestamp_in_us= 7;
  // number of pages in this file
  optional int32 num_pages = 8;
  // file size of the binlog file
  optional int64 file_size = 9;
  // rowsets that this binlog file uses
  repeated RowsetIdPB rowsets = 10;
}