// This file is made available under Elastic License 2.0
// This file is based on code available under the Apache license here:
//   https://github.com/apache/incubator-doris/blob/master/gensrc/proto/palo_internal_service.proto

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// NOTE(XXX): DEPRECATED, just use to compatiple with old version.
// Make system can grayscale upgrade
syntax="proto2";

import "internal_service.proto";

package doris;
option java_package = "com.starrocks.proto";

option cc_generic_services = true;

service PBackendService {
    rpc transmit_data(starrocks.PTransmitDataParams) returns (starrocks.PTransmitDataResult);
    rpc exec_plan_fragment(starrocks.PExecPlanFragmentRequest) returns (starrocks.PExecPlanFragmentResult);
    rpc cancel_plan_fragment(starrocks.PCancelPlanFragmentRequest) returns (starrocks.PCancelPlanFragmentResult);
    rpc fetch_data(starrocks.PFetchDataRequest) returns (starrocks.PFetchDataResult);
    rpc tablet_writer_open(starrocks.PTabletWriterOpenRequest) returns (starrocks.PTabletWriterOpenResult);
    rpc tablet_writer_add_batch(starrocks.PTabletWriterAddBatchRequest) returns (starrocks.PTabletWriterAddBatchResult);
    rpc tablet_writer_cancel(starrocks.PTabletWriterCancelRequest) returns (starrocks.PTabletWriterCancelResult);
    rpc trigger_profile_report(starrocks.PTriggerProfileReportRequest) returns (starrocks.PTriggerProfileReportResult);
    rpc get_info(starrocks.PProxyRequest) returns (starrocks.PProxyResult);

    // Transmit vectorized data between backends
    rpc transmit_chunk(starrocks.PTransmitChunkParams) returns (starrocks.PTransmitChunkResult);
    rpc tablet_writer_add_chunk(starrocks.PTabletWriterAddChunkRequest) returns (starrocks.PTabletWriterAddBatchResult);
    rpc transmit_runtime_filter(starrocks.PTransmitRuntimeFilterParams) returns (starrocks.PTransmitRuntimeFilterResult);

    rpc execute_command(starrocks.ExecuteCommandRequestPB) returns (starrocks.ExecuteCommandResultPB);
};
