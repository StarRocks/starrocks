// This file is licensed under the Elastic License 2.0. Copyright 2021-present, StarRocks Limited.

syntax="proto2";

package starrocks.lake;
option java_package = "com.starrocks.lake.proto";

import "lake_delete.proto";

option cc_generic_services = true;

message PublishVersionRequest {
    repeated int64 tablet_ids = 1;
    repeated int64 txn_ids = 2;
    // |base_version| would be |new_version - txn_ids_size()| now, define
    // it explicitly for more clarity and better forward compatibility.
    optional int64 base_version = 3;
    optional int64 new_version = 4;
}

message PublishVersionResponse {
    repeated int64 failed_tablets = 1;
}

message AbortTxnRequest {
    repeated int64 tablet_ids = 1;
    repeated int64 txn_ids = 2;    
}

message AbortTxnResponse {
    repeated int64 failed_tablets = 1;
}

// TODO: Rename to DeleteTabletRequest
message DropTabletRequest {
    repeated int64 tablet_ids = 1;
}

// TODO: Rename to DeleteTabletResponse
message DropTabletResponse {
    repeated int64 failed_tablets = 1;
}

message CompactRequest {
    repeated int64 tablet_ids = 1;
    optional int64 txn_id = 2;
    optional int64 version = 3;
}

message CompactResponse {
    repeated int64 failed_tablets = 1;
}

message DropTableRequest {
    // tablet_id can be the id of any of the tablet belongs to the table to be dropped.
    optional int64 tablet_id = 1;
}

message DropTableResponse {
}

message DeleteDataRequest {
    repeated int64 tablet_ids = 1;
    optional int64 txn_id = 2;
    optional DeletePredicatePB delete_predicate = 3;
}

message DeleteDataResponse {
    repeated int64 failed_tablets = 1;
}

service LakeService {
    rpc publish_version(PublishVersionRequest) returns (PublishVersionResponse);
    rpc abort_txn(AbortTxnRequest) returns (AbortTxnResponse);
    rpc compact(CompactRequest) returns (CompactResponse);
    // TODO: Rename to delete_tablet
    rpc drop_tablet(DropTabletRequest) returns (DropTabletResponse);
    rpc drop_table(DropTableRequest) returns (DropTableResponse);
    rpc delete_data(DeleteDataRequest) returns (DeleteDataResponse);
}

