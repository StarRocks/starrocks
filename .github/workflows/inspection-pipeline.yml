name: INSPECTION PIPELINE

on:
  schedule:
    - cron: "30 0 * * 1-5"
    - cron: "30 4 * * 1-5"
    - cron: "30 9 * * 1-5"
    - cron: "0 10 * * 1-5"
  workflow_dispatch:
    inputs:
      BRANCH:
        description: 'BRANCH'
        required: true
        type: string
      COMMIT_ID:
        description: 'COMMIT ID'
        required: true
        type: string
      TAR_PATH:
        description: 'TAR PATH'
        required: false
        type: string
      IS_REBUILD:
        description: 'REBUILD'
        type: 'boolean'
        default: false


permissions:
  checks: write
  actions: write
  contents: write
  deployments: write
  discussions: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

env:
  IS_INSPECTION: true

jobs:
  info:
    runs-on: [self-hosted, normal]
    name: INFO
    env:
      REPO: ${{ github.repository }}
      GH_TOKEN: ${{ github.token }}
    outputs:
      BRANCH: ${{ steps.param.outputs.BRANCH }}
      PR_NUMBER: ${{ steps.param.outputs.PR_NUMBER }}
      TAR_PATH: ${{ steps.param.outputs.TAR_PATH }}
    steps:
      - name: CRON PARAM
        id: param
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            if [[ "${{ github.event.schedule }}" != "0 10 * * 1-5" ]]; then
              branch=main
            else
              branch=branch-3.2
            fi
            base_sha=$(gh api /repos/${REPO}/branches/${branch} | jq -r .commit.sha)
            [[ "${base_sha}" == "null" ]] && (echo "::error::Get HEAD SHA error, please check." && exit -1);
            echo "BRANCH=${branch}" >> $GITHUB_OUTPUT
            echo "PR_NUMBER=${base_sha}" >> $GITHUB_OUTPUT
          else
            echo "BRANCH=${{ inputs.BRANCH }}" >> $GITHUB_OUTPUT
            echo "PR_NUMBER=${{ inputs.COMMIT_ID }}" >> $GITHUB_OUTPUT
            echo "TAR_PATH=${{ inputs.TAR_PATH }}" >> $GITHUB_OUTPUT
          fi

  be-ut:
    runs-on: [self-hosted, normal]
    needs:
      - info
    timeout-minutes: 90
    name: BE UT
    continue-on-error: true
    env:
      BRANCH: ${{ needs.info.outputs.BRANCH }}
      PR_NUMBER: ${{ needs.info.outputs.PR_NUMBER }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Release, ASAN ]
    steps:
      - name: UPDATE ECI & RUN UT
        id: run_ut
        shell: bash
        timeout-minutes: 90
        env:
          build_type: ${{ matrix.build_type }}
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          ./bin/elastic-ut.sh --repository ${{ github.repository }} --branch ${BRANCH} --pr ${PR_NUMBER} --module be --build ${build_type}

      - name: clean ECI
        if: always()
        run: |
          echo ${{ steps.run_ut.outputs.ECI_ID }}
          eci rm ${{ steps.run_ut.outputs.ECI_ID }}
          echo "${{ steps.run_ut.outcome }}" > ./${{ matrix.build_type }}.txt

      - name: Upload Log
        uses: actions/upload-artifact@v4
        if: always() && steps.run_ut.outcome == 'failure'
        with:
          name: BE UT LOG
          path: ${{ steps.run_ut.outputs.BE_LOG }}
          retention-days: 1
          overwrite: true

      - name: Upload BE UT Result
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BE-UT-RESULT-${{ matrix.build_type }}
          path: ${{ matrix.build_type }}.txt
          retention-days: 1
          overwrite: true

      - name: Clean ENV
        if: always()
        run: |
          rm -f ${{ steps.run_ut.outputs.RES_FILE }}
          rm -f ${{ steps.run_ut.outputs.RES_LOG }}
          rm -f ${{ steps.run_ut.outputs.BE_LOG }}
          rm -rf ${{ github.workspace }}/*

  fe-ut:
    runs-on: [self-hosted, normal]
    name: FE UT
    needs:
      - info
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BRANCH: ${{ needs.info.outputs.BRANCH }}
      PR_NUMBER: ${{ needs.info.outputs.PR_NUMBER }}
    steps:
      - name: clean
        run: |
          rm -rf ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}

      - name: BRANCH INFO
        id: branch
        env:
          repo: ${{ github.repository }}
        run: |
          bucket_prefix=`echo ${repo%/*} | tr '[:upper:]' '[:lower:]'` 
          echo "bucket_prefix=${bucket_prefix}" >> $GITHUB_OUTPUT

      - name: UPDATE ECI & RUN UT
        id: run_ut
        shell: bash
        timeout-minutes: 60
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          ./bin/elastic-ut.sh --repository ${{ github.repository }} --branch ${BRANCH} --pr ${PR_NUMBER} --module fe --build Release

      - name: Clean ECI
        if: always()
        run: |
          echo ${{ steps.run_ut.outputs.ECI_ID }}
          echo ">>> Dmesg info:"
          eci exec ${{ steps.run_ut.outputs.ECI_ID }} bash -c "dmesg -T"
          eci rm ${{ steps.run_ut.outputs.ECI_ID }}

      - name: Upload log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: FE UT LOG
          path: ${{ steps.run_ut.outputs.RES_LOG }}
          retention-days: 1
          overwrite: true

      - name: Download FE UT XML
        if: always()
        id: download-ut-xml
        env:
          oss_path: ${{ steps.run_ut.outputs.oss_path }}
        run: |
          mkdir fe && cd fe
          ossutil64 --config-file ~/.ossutilconfig cp ${oss_path}/ . --recursive
          tar zxf fe_ut_report.tar.gz

      - name: Publish UT Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        id: publish_report
        env:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          token: ${{ secrets.GITHUB_TOKEN }}
        with:
          check_name: 'FE UT Report'
          detailed_summary: true
          fail_on_failure: true
          report_paths: ./fe/fe-core/target/surefire-reports/*.xml

      - name: Clean ENV
        if: always()
        run: |
          rm -rf ${{ steps.run_ut.outputs.FE_REPORT_DIR }}
          rm -f ${{ steps.run_ut.outputs.RES_FILE }}
          rm -f ${{ steps.run_ut.outputs.RES_LOG }}
          rm -rf ${{ steps.run_ut.outputs.COV_DIR }}
          rm -rf ${{ github.workspace }}/*

  build:
    runs-on: [self-hosted, normal]
    name: BUILD
    needs:
      - info
    if: github.event_name == 'schedule' || inputs.IS_REBUILD
    env:
      BRANCH: ${{ needs.info.outputs.BRANCH }}
      PR_NUMBER: ${{ needs.info.outputs.PR_NUMBER }}
    outputs:
      build_output_tar: ${{ steps.run_build.outputs.ABSOLUTE_OUTPUT_TAR }}
    steps:
      - name: CLEAN
        run: |
          rm -rf ${{ github.workspace }} && mkdir -p ${{ github.workspace }}

      - name: UPDATE ECI & RUN BUILD
        id: run_build
        shell: bash
        timeout-minutes: 90
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          ./bin/elastic-build.sh --repository ${{ github.repository }} --branch ${BRANCH} --pr ${PR_NUMBER} --build Release

      - name: BUILD RESULT
        run: |
          echo ${{ steps.run_build.outputs.ABSOLUTE_OUTPUT_TAR }}
          echo "##### Package: ${{ steps.run_build.outputs.ABSOLUTE_OUTPUT_TAR }}" >> $GITHUB_STEP_SUMMARY

      - name: clean ECI
        if: always()
        run: |
          echo ${{ steps.run_build.outputs.ECI_ID }}
          eci rm ${{ steps.run_build.outputs.ECI_ID }}

      - name: Clean ENV
        if: always()
        run: |
          rm -f ${{ steps.run_build.outputs.RES_FILE }}
          rm -f ${{ steps.run_build.outputs.RES_LOG }}
          rm -rf ${{ github.workspace }}

  deploy:
    runs-on: [self-hosted, normal]
    if: >
      always() && (
      (github.event_name == 'schedule' && needs.build.result == 'success') ||
      (github.event_name != 'schedule' && inputs.IS_REBUILD && needs.build.result == 'success') ||
      (github.event_name != 'schedule' && !inputs.IS_REBUILD))
    needs:
      - info
      - build
    name: DEPLOY SR
    env:
      CLUSTER_NAME: ci-admit
      BRANCH: ${{ needs.info.outputs.BRANCH }}
      PR_NUMBER: ${{ needs.info.outputs.PR_NUMBER }}
      DAILY_TAR_PATH: ${{ needs.info.outputs.TAR_PATH }}
      SELF_TAR_PATH: ${{ needs.build.outputs.build_output_tar }}
    outputs:
      fe: ${{steps.deploy_sr.outputs.fe}}
      be: ${{steps.deploy_sr.outputs.be}}
      deploy_conf_file: ${{steps.apply_resource.outputs.deploy_conf_file}}
      is_self_build: ${{steps.deploy_sr.outputs.is_self_build}}
    steps:
      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

      - name: Apply for resources
        id: apply_resource
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          ./bin/elastic-cluster.sh --template ci-admit
          cp conf/starrocks_deploy.conf /var/local/env/${PR_NUMBER}-starrocks_deploy.conf
          echo "deploy_conf_file=/var/local/env/${PR_NUMBER}-starrocks_deploy.conf" >> $GITHUB_OUTPUT

      - name: Deploy SR
        id: deploy_sr
        run: |
          cd ci-tool && source lib/init.sh
          
          if [[ "${{ github.event_name }}" == "schedule" || "${{ inputs.IS_REBUILD }}" == "true" ]]; then
            tar_path=${SELF_TAR_PATH}
            echo "is_self_build=true" >> $GITHUB_OUTPUT
          else
            tar_path=${DAILY_TAR_PATH}
            echo "is_self_build=false" >> $GITHUB_OUTPUT
          fi
          echo ${tar_path}
          ./bin/deploy-cluster.sh -c ${CLUSTER_NAME} --output ${tar_path}

      - run: |
          echo "FE: ${{steps.deploy_sr.outputs.fe}}, BE: ${{steps.deploy_sr.outputs.be}}"

      - name: Clean ENV
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/* 

  SQL-Tester:
    runs-on: [self-hosted, normal]
    name: SQL-Tester
    needs:
      - info
      - deploy
    if: always() && needs.deploy.result == 'success'
    timeout-minutes: 60
    env:
      BRANCH: ${{ needs.info.outputs.BRANCH }}
      PR_NUMBER: ${{ needs.info.outputs.PR_NUMBER }}
      CLUSTER_NAME: ci-admit
      FE_NODE: ${{ needs.deploy.outputs.fe }}
      BE_NODE: ${{ needs.deploy.outputs.be }}
    outputs:
      MYSQL_ECI_ID: ${{steps.run_case.outputs.MYSQL_ECI_ID}}
    steps:
      - name: CLEAN
        run: |
          rm -rf ${{ github.workspace }} && mkdir -p ${{ github.workspace }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout Code
        run: |
          git checkout $BRANCH;
          git reset ${PR_NUMBER} --hard 

      - name: Run Case (${{ needs.deploy.outputs.fe }})
        id: run_case
        env:
          is_self_build: ${{needs.deploy.outputs.is_self_build}}
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          ./bin/run-sql-tester.sh

      - name: Prepare Tools
        id: prepare-tools
        if: success() || failure()
        run: |
          mkdir -p .actions/nose-report-action
          cd .actions/nose-report-action
          git clone https://github.com/StarRocks/action-junit-report.git .

      - name: Publish SQL-Tester Report
        uses: ./.actions/nose-report-action
        if: always() && steps.prepare-tools.outcome == 'success'
        with:
          check_name: 'SQL-Tester Report'
          fail_on_failure: true
          detailed_summary: true
          token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test/*.xml'

      - name: Upload log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: SQL-Tester Log
          path: test/log/
          retention-days: 1
          overwrite: true

      - name: Clean ENV
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/*

  restart-fe:
    runs-on: [ self-hosted, normal ]
    name: Restart FE
    needs:
      - info
      - deploy
      - SQL-Tester
    if: always() && needs.deploy.result == 'success'
    env:
      BRANCH: ${{ needs.info.outputs.BRANCH }}
      PR_NUMBER: ${{ needs.info.outputs.PR_NUMBER }}
      CLUSTER_NAME: ci-admit
      FE_NODE: ${{ needs.deploy.outputs.fe }}
    steps:
      - name: CLEAN
        run: |
          rm -rf ${{ github.workspace }} && mkdir -p ${{ github.workspace }}

      - name: Restart FE (${{needs.deploy.outputs.fe}})
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          ./bin/restart-fe.sh --repository ${{ github.repository }}

      - name: Clean ENV
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/*

  restart-be:
    runs-on: [ self-hosted, normal ]
    name: Restart BE
    needs:
      - info
      - deploy
      - SQL-Tester
    if: always() && needs.deploy.result == 'success'
    timeout-minutes: 20
    env:
      BRANCH: ${{ needs.info.outputs.BRANCH }}
      PR_NUMBER: ${{ needs.info.outputs.PR_NUMBER }}
      CLUSTER_NAME: ci-admit
      FE_NODE: ${{ needs.deploy.outputs.fe }}
      BE_NODE: ${{ needs.deploy.outputs.be }}
      BE_LIST: ${{ needs.deploy.outputs.be_list }}
    steps:
      - name: CLEAN
        run: |
          rm -rf ${{ github.workspace }} && mkdir -p ${{ github.workspace }}

      - name: Restart BE (${{needs.deploy.outputs.be_list}})
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          ./bin/system-cov-be.sh --pr ${PR_NUMBER} --branch ${BRANCH} --repository ${{ github.repository }} --skip-gcov

      - name: Clean ENV
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/*

  admit:
    runs-on: [self-hosted, normal]
    name: ADMIT TEST
    needs:
      - info
      - deploy
      - restart-fe
      - restart-be
    timeout-minutes: 40
    env:
      BRANCH: ${{ needs.info.outputs.BRANCH }}
      PR_NUMBER: ${{ needs.info.outputs.PR_NUMBER }}
      CLUSTER_NAME: ci-admit
      FE_NODE: ${{ needs.deploy.outputs.fe }}
      BE_NODE: ${{ needs.deploy.outputs.be }}
    steps:
      - name: CLEAN
        run: |
          rm -rf ${{ github.workspace }} && mkdir -p ${{ github.workspace }}

      - name: BRANCH INFO
        id: branch
        run: |
          repo="${{ github.repository }}"
          bucket_prefix=`echo ${repo%/*} | tr '[:upper:]' '[:lower:]'` 
          echo "bucket_prefix=${bucket_prefix}" >> $GITHUB_OUTPUT

      - name: Run Case
        run: |
          echo "FE: ${{needs.deploy.outputs.fe}}, BE: ${{needs.deploy.outputs.be}}"
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh

          cd ${{ github.workspace }}
          rm -rf ./StarRocksTest && cp -rf /var/lib/StarRocksTest ./StarRocksTest && cd ./StarRocksTest && git pull

          cd ${{ github.workspace }}/ci-tool
          cluster_type=native
          ./bin/run-admit-single.sh --pr ${PR_NUMBER} --branch ${BRANCH} --repository ${{ github.repository }} --cluster ${cluster_type}

      - name: Prepare Tools
        if: success() || failure()
        id: prepare-tools
        run: |
          mkdir -p .actions/nose-report-action
          cd .actions/nose-report-action
          git clone https://github.com/StarRocks/action-junit-report.git .

      - name: Publish Admit Report
        uses: ./.actions/nose-report-action
        if: always() && steps.prepare-tools.outcome == 'success'
        with:
          check_name: 'Admit Report'
          fail_on_failure: true
          detailed_summary: true
          token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: './StarRocksTest/result/*.xml'

      - name: Clean ENV
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/*

  Teardown:
    runs-on: [self-hosted, normal]
    name: Teardown
    needs:
      - info
      - deploy
      - SQL-Tester
      - admit
      - be-ut
      - fe-ut
    if: always()
    env:
      BRANCH: ${{ needs.info.outputs.BRANCH }}
      PR_NUMBER: ${{ needs.info.outputs.PR_NUMBER }}
      CONF_FILE: ${{ needs.deploy.outputs.deploy_conf_file }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Backup SR Info
        if: needs.deploy.outputs.deploy_conf_file != ''
        id: backup
        run: |
          set -x
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          cp -f $CONF_FILE ./conf/starrocks_deploy.conf
          cat ./conf/starrocks_deploy.conf
          ./bin/backup_log_cores.sh --branch "$BRANCH" --pr "$PR_NUMBER" --build Release --conf "$CONF_FILE" --repository ${{ github.repository }}

      - name: Clean ECS
        if: steps.backup.outcome == 'success'
        run: |
          cd ci-tool && source lib/init.sh
          ./bin/elastic-cluster.sh --delete

      - name: save unstable cases
        if: always() && github.event_name == 'schedule' && steps.backup.outcome == 'success' && env.BRANCH == 'main'
        run: |
          cd ci-tool && source lib/init.sh
          ./bin/save_unstable_cases.sh

      - name: clean ECI
        if: always() && needs.SQL-Tester.outputs.MYSQL_ECI_ID != ''
        run: |
          eci rm ${{ needs.SQL-Tester.outputs.MYSQL_ECI_ID }}

      - name: Clean
        if: always()
        run: |
          rm -f $CONF_FILE
          rm -rf ${{ github.workspace }}/*
