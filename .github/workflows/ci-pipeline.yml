name: CI PIPELINE

on:
  pull_request_target:
    types:
      - opened
      - synchronize

    branches:
      - main

concurrency:
  group: ${{ github.event.number }}
  cancel-in-progress: true

permissions:
  checks: write
  actions: write
  contents: write
  deployments: write
  discussions: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
<<<<<<< HEAD
  doc-checker:
    runs-on: ubuntu-latest
    name: DOC FILTER
    outputs:
      output1: ${{ steps.doc-changes-info.outputs.doc }}
    steps:
      - uses: dorny/paths-filter@v2
        id: changes
=======

  sync-checker:
    runs-on: [self-hosted, normal]
    name: RUN CHECKER
    env:
      PR_NUMBER: ${{ github.event.number }}
      CODE_PATH: ${{ github.workspace }}
      BRANCH: ${{ github.base_ref }}
      GH_TOKEN: ${{ github.token }}
    outputs:
      PASS: ${{ steps.check.outputs.pass }}
      THIRDPARTY: ${{ steps.thirdparty-checker.outputs.thirdparty }}
    steps:
      - name: upload info
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo $PR_NUMBER > pr_num.txt
          GITHUB_SHA=$(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha)
          echo ${GITHUB_SHA} > head_sha.txt

      - name: Upload the PR number
        uses: actions/upload-artifact@v2
>>>>>>> 21ffb7595f ([Tool] Update thirdparty for sync pr (#28099))
        with:
          filters: |
            doc:
            - 'docs/**'
      - name: DOC CHECK INFO
        id: doc-changes-info
        run: |
          echo "doc=${{ steps.changes.outputs.doc }}" >> $GITHUB_OUTPUT

  add-doc-label:
    needs: doc-checker
    runs-on: ubuntu-latest
    name: ADD DOC LABEL
    if: ${{ needs.doc-checker.outputs.output1 == 'true' }}
    steps:
      - name: add document label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: documentation

  markdownlint:
    runs-on: ubuntu-latest
    needs: add-doc-label
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: articulate/actions-markdownlint@v1.1.0
        with:
          config: "docs/.markdownlint.yaml"
          files: 'docs/**/*.md'
          ignore: node_modules
          version: 0.28.1

      - name: Check
        id: check
        if: >
          !contains(github.event.pull_request.title, '(sync #') &&
          !contains(github.event.pull_request.labels.*.name, 'sync') &&
          (!startsWith(github.head_ref, github.base_ref) || !contains(github.head_ref, '-sync-'))
        run: |
          echo "pass=true" >> $GITHUB_OUTPUT

      - uses: dorny/paths-filter@v2
        id: thirdparty-checker
        if: always()
        with:
          filters: |
            thirdparty:
            - 'thirdparty/**'
            - 'docker/dockerfiles/dev-env/dev-env.Dockerfile'

  be-checker:
    runs-on: ubuntu-latest
    name: BE FILTER
    if: needs.sync-checker.outputs.PASS == 'true' || needs.sync-checker.outputs.THIRDPARTY == 'true'
    outputs:
      output1: ${{ steps.be-changes-info.outputs.be }}
    steps:
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            be:
            - 'be/**'
            - 'gensrc/**'
            - 'run-be-ut.sh'
            - 'build.sh'

      - name: BE CHECK INFO
        id: be-changes-info
        run: |
          echo "be=${{ steps.changes.outputs.be }}" >> $GITHUB_OUTPUT

  clang-format:
    runs-on: self-hosted
    needs: be-checker
    name: Clang-Format
    env:
      PR_NUMBER: ${{ github.event.number }}
    if: ${{ needs.be-checker.outputs.output1 == 'true' }}
    steps:
      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: BRANCH INFO
        id: branch
        run: |
          echo ${{github.base_ref}}
          echo "branch=${{github.base_ref}}" >> $GITHUB_OUTPUT

      - name: Checkout PR
        run: |
          BRANCH=${{steps.branch.outputs.branch}}
          git checkout $BRANCH;
          git pull;
          BRANCH_NAME="${BRANCH}-${PR_NUMBER}";
          git fetch origin pull/${PR_NUMBER}/head:${BRANCH_NAME};
          git checkout $BRANCH_NAME;
          git checkout -b merge_pr;
          git merge --squash --no-edit ${BRANCH} || (echo "Merge conflict, please check." && exit -1);
          
      - name: Run Clang-Format
        run: |
          export PATH=/var/lib/llvm/bin:$PATH
          bash build-support/check-format.sh

  be-ut:
    runs-on: self-hosted
    needs: [ clang-format ]
    timeout-minutes: 90
    name: BE UT
    env:
      PR_NUMBER: ${{ github.event.number }}
    steps:
      - name: BRANCH INFO
        id: branch
        run: |
          echo ${{github.base_ref}}
          echo "branch=${{github.base_ref}}" >> $GITHUB_OUTPUT

      - name: UPDATE ECI & RUN UT
        id: run_ut
        shell: bash
        timeout-minutes: 90
        run: |
          set -ex
          rm -rf ./elastic-service
          ln -s /var/lib/elastic-service ./elastic-service
          cd elastic-service && git pull
          ./bin/elastic-ut.sh --pr ${PR_NUMBER} --module be

      - name: clean ECI
        if: always()
        run: |
          echo ${{ steps.run_ut.outputs.ECI_ID }}
          eci rm ${{ steps.run_ut.outputs.ECI_ID }}

      - name: Upload log
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: BE UT LOG
          path: ${{ steps.run_ut.outputs.RES_LOG }}
          retention-days: 1

      - name: Clean ENV
        if: always()
        run: |
          rm -f ${{ steps.run_ut.outputs.RES_FILE }}
          rm -f ${{ steps.run_ut.outputs.RES_LOG }}

  fe-checker:
    runs-on: ubuntu-latest
    name: FE FILTER
    if: needs.sync-checker.outputs.PASS == 'true' || needs.sync-checker.outputs.THIRDPARTY == 'true'
    outputs:
      output1: ${{ steps.fe-changes-info.outputs.fe }}
    steps:
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            fe:
              - 'fe/**'
              - 'gensrc/**'
              - 'run-fe-ut.sh'
              - 'java-extensions/**'
              - 'build.sh'

      - run: echo ${{ steps.changes.outputs.fe }}

      - name: FE CHECK INFO
        id: fe-changes-info
        run: |
          echo "fe=${{ steps.changes.outputs.fe }}" >> $GITHUB_OUTPUT

  fe-codestyle-check:
    runs-on: ubuntu-latest
    needs: fe-checker
    if: needs.fe-checker.outputs.output1 == 'true'
    name: FE Code Style Check
    steps:
      - uses: dorny/paths-filter@v2
        id: java-file
        name: JAVA FILE
        with:
          filters: |
            java:
              - '**.java'

      - run: echo ${{ steps.java-file.outputs.java }}

      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        id: checkout
        if: ${{ steps.java-file.outputs.java == 'true' }}
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          submodules: recursive

      - name: Copy checkstyle files
        if: ${{ steps.java-file.outputs.java == 'true' }}
        run: |
          pwd
          cp fe/checkstyle* .

      - name: Run java checkstyle
        if: ${{ steps.java-file.outputs.java == 'true' }}
        uses: dbelyaev/action-checkstyle@v0.6.1
        with:
          workdir: "./fe"
          checkstyle_config: checkstyle.xml
          reporter: 'github-pr-check'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_error: true
          level: error
  fe-ut:
    runs-on: [self-hosted]
    needs: fe-codestyle-check
    name: FE UT
    env:
      PR_NUMBER: ${{ github.event.number }}
    steps:
      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

      - name: BRANCH INFO
        id: branch
        run: |
          echo ${{github.base_ref}}
          echo "branch=${{github.base_ref}}" >> $GITHUB_OUTPUT

      - name: UPDATE ECI & RUN UT
        id: run_ut
        shell: bash
        timeout-minutes: 60
        run: |
          set -ex
          rm -rf ./elastic-service
          ln -s /var/lib/elastic-service ./elastic-service
          cd elastic-service && git pull
          ./bin/elastic-ut.sh --pr ${PR_NUMBER} --module fe

      - name: Clean ECI
        if: always()
        run: |
          echo ${{ steps.run_ut.outputs.ECI_ID }}
          eci rm ${{ steps.run_ut.outputs.ECI_ID }}

      - name: UT Report
        if: always()
        uses: mikepenz/action-junit-report@v3
        with:
          check_name: 'FE UT Report'
          detailed_summary: true
          token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: ${{ steps.run_ut.outputs.FE_REPORT_DIR }}/*.xml

      - name: Upload log
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: FE UT LOG
          path: ${{ steps.run_ut.outputs.RES_LOG }}
          retention-days: 1

      - name: Clean ENV
        if: always()
        run: |
          rm -rf ${{ steps.run_ut.outputs.FE_REPORT_DIR }}
          rm -f ${{ steps.run_ut.outputs.RES_FILE }}
          rm -f ${{ steps.run_ut.outputs.RES_LOG }}

  build:
    runs-on: self-hosted
    needs: [be-checker, fe-checker, be-ut, fe-ut]
    name: BUILD
    env:
      PR_NUMBER: ${{ github.event.number }}
    outputs:
      build_output_tar: ${{ steps.run_build.outputs.OUTPUT_TAR }}
    if: always() && (needs.be-ut.result == 'success' && needs.fe-ut.result == 'success') || (needs.be-checker.outputs.output1 != 'true' && needs.fe-ut.result == 'success') || (needs.fe-checker.outputs.output1 != 'true' && needs.be-ut.result == 'success')
    steps:
      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

      - name: BRANCH INFO
        id: branch
        run: |
          echo ${{github.base_ref}}
          echo "branch=${{github.base_ref}}" >> $GITHUB_OUTPUT

      - name: UPDATE ECI & RUN BUILD
        id: run_build
        shell: bash
        timeout-minutes: 90
        run: |
          rm -rf ./elastic-service
          ln -s /var/lib/elastic-service ./elastic-service
          cd elastic-service && git pull
          ./bin/elastic-build.sh --pr ${PR_NUMBER}

      - name: build result
        run: |
          echo ${{ steps.run_build.outputs.OUTPUT_TAR }}

      - name: clean ECI
        if: always()
        run: |
          echo ${{ steps.run_build.outputs.ECI_ID }}
          eci rm ${{ steps.run_build.outputs.ECI_ID }}

  deploy:
    runs-on: self-hosted
    if: always() && needs.build.result == 'success'
    needs: build
    name: DEPLOY SR
    env:
      PR_NUMBER: ${{ github.event.number }}
      CLUSTER_NAME: admit-default
    outputs:
      fe: ${{steps.deploy_sr.outputs.fe}}
      be: ${{steps.deploy_sr.outputs.be}}
    steps:
      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

      - name: BRANCH INFO
        id: branch
        run: |
          echo ${{github.base_ref}}
          echo "branch=${{github.base_ref}}" >> $GITHUB_OUTPUT

      - name: Apply for resources
        id: apply_resource
        run: |
          set -x
          rm -rf ./elastic-service
          cp -rf /var/lib/elastic-service ./elastic-service
          cd elastic-service && git pull
          ./bin/elastic-cluster.sh --template admit-default
          cp conf/starrocks_deploy.conf /var/lib/elastic-service/conf/starrocks_deploy.conf

      - name: Deploy SR
        id: deploy_sr
        run: |
          set -x
          cd elastic-service
          ./bin/deploy-cluster.sh -c ${CLUSTER_NAME} --output oss://starrocks-ci-release/${{steps.branch.outputs.branch}}/Release/pr/${{needs.build.outputs.build_output_tar}}

      - run: |
          echo "FE: ${{steps.deploy_sr.outputs.fe}}, BE: ${{steps.deploy_sr.outputs.be}}"

  admit:
    runs-on: self-hosted
    name: ADMIT TEST
    needs: deploy
    if: always() && needs.deploy.result == 'success'
    timeout-minutes: 60
    env:
      PR_NUMBER: ${{ github.event.number }}
      CLUSTER_NAME: admit-default
      FE_NODE: ${{ needs.deploy.outputs.fe }}
      BE_NODE: ${{ needs.deploy.outputs.be }}
    steps:
      - name: Clean Workspace
        uses: AutoModality/action-clean@v1.1.0

      - name: Run Case
        run: |
          set -x
          echo "FE: ${{needs.deploy.outputs.fe}}, BE: ${{needs.deploy.outputs.be}}"
          
          cd ${{ github.workspace }}
          rm -rf ./elastic-service
          ln -s /var/lib/elastic-service ./elastic-service
          cd elastic-service && git pull
          
          cd ${{ github.workspace }}
          rm -rf ./StarRocksTest && cp -rf /var/lib/StarRocksTest ./StarRocksTest
          cd ./StarRocksTest && git pull
          
          cd ${{ github.workspace }}/elastic-service
          ./bin/run-admit.sh

      - name: Publish Test Results
        uses: mikepenz/action-junit-report@v3
        if: success() || failure()
        with:
          check_name: 'Admit Test Results'
          detailed_summary: true
          token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'StarRocksTest/result/*.xml'
