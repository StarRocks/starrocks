diff --git a/cmake/developer-options.cmake b/cmake/developer-options.cmake
index 4e1068cf..b10b495f 100644
--- a/cmake/developer-options.cmake
+++ b/cmake/developer-options.cmake
@@ -225,7 +225,8 @@ if(SIMDJSON_SKIPUTF8VALIDATION)
   add_compile_definitions(SIMDJSON_UTF8VALIDATION=0)
   message(STATUS "SKIP UTF8 VALIDATION")
 else()
-  add_compile_definitions(SIMDJSON_UTF8VALIDATION=1)
+  add_compile_definitions(SIMDJSON_UTF8VALIDATION=0)
+  message(STATUS "SKIP UTF8 VALIDATION")
 endif()
 
 include(CheckSymbolExists)
diff --git a/src/fallback.cpp b/src/fallback.cpp
index f8e87be0..16caf0f8 100644
--- a/src/fallback.cpp
+++ b/src/fallback.cpp
@@ -130,7 +130,7 @@ simdjson_inline bool validate_string() {
     } else if (simdjson_unlikely(buf[idx] & 0x80)) {
       validate_utf8_character();
     } else {
-      if (buf[idx] < 0x20) { error = UNESCAPED_CHARS; }
+      //if (buf[idx] < 0x20) { error = UNESCAPED_CHARS; }
       idx++;
     }
   }
diff --git a/src/generic/stage1/json_structural_indexer.h b/src/generic/stage1/json_structural_indexer.h
index cfdedf01..22f4868c 100644
--- a/src/generic/stage1/json_structural_indexer.h
+++ b/src/generic/stage1/json_structural_indexer.h
@@ -243,7 +243,7 @@ simdjson_inline void json_structural_indexer::next(const simd::simd8x64<uint8_t>
 #endif
   indexer.write(uint32_t(idx-64), prev_structurals); // Output *last* iteration's structurals to the parser
   prev_structurals = block.structural_start();
-  unescaped_chars_error |= block.non_quote_inside_string(unescaped);
+  //unescaped_chars_error |= block.non_quote_inside_string(unescaped);
 }
 
 simdjson_inline error_code json_structural_indexer::finish(dom_parser_implementation &parser, size_t idx, size_t len, stage1_mode partial) {
