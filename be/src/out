bench/chunks_sorter_bench.cpp:            mem_usage = std::max(mem_usage, sorter->mem_usage());
bench/chunks_sorter_bench.cpp:        mem_usage = std::max(mem_usage, sorter->mem_usage());
column/object_column.cpp:        byte_size += _pool[from + i].mem_usage();
connector/connector.h:    virtual bool can_estimate_mem_usage() const { return false; }
connector/connector.h:    virtual int64_t estimated_mem_usage() const { return 0; }
connector/hive_connector.cpp:int64_t HiveDataSource::estimated_mem_usage() const {
connector/hive_connector.cpp:    return _scanner->estimated_mem_usage();
connector/hive_connector.h:    int64_t estimated_mem_usage() const override;
connector/hive_connector.h:    bool can_estimate_mem_usage() const override { return true; }
exec/chunks_sorter.h:    int64_t mem_usage() const { return chunk->memory_usage(); }
exec/chunks_sorter.h:    virtual int64_t mem_usage() const = 0;
exec/chunks_sorter_full_sort.cpp:int64_t ChunksSorterFullSort::mem_usage() const {
exec/chunks_sorter_full_sort.cpp:    return _merged_runs.mem_usage();
exec/chunks_sorter_full_sort.h:    int64_t mem_usage() const override;
exec/chunks_sorter_heap_sort.h:    int64_t mem_usage() const override {
exec/chunks_sorter_heap_sort.h:        return _sort_heap->size() * _sort_heap->top().data_segment()->mem_usage() / first_rows;
exec/chunks_sorter_topn.h:    int64_t mem_usage() const override { return _raw_chunks.mem_usage() + _merged_segment.mem_usage(); }
exec/chunks_sorter_topn.h:        int64_t mem_usage() const {
exec/except_node.h:    int64_t mem_usage() const {
exec/hash_join_components.h:    int64_t hash_table_mem_usage() const { return _ht.mem_usage(); }
exec/hash_join_node.cpp:    _mem_tracker->set(_ht.mem_usage());
exec/hdfs_scanner.cpp:int64_t HdfsScanner::estimated_mem_usage() const {
exec/hdfs_scanner.cpp:        return _shared_buffered_input_stream->estimated_mem_usage();
exec/hdfs_scanner.h:    virtual int64_t estimated_mem_usage() const;
exec/hdfs_scanner_text.cpp:int64_t HdfsTextScanner::estimated_mem_usage() const {
exec/hdfs_scanner_text.cpp:    int64_t value = HdfsScanner::estimated_mem_usage();
exec/hdfs_scanner_text.h:    int64_t estimated_mem_usage() const override;
exec/intersect_hash_set.cpp:int64_t IntersectHashSet<HashSet>::mem_usage() const {
exec/intersect_hash_set.h:    int64_t mem_usage() const;
exec/intersect_node.cpp:    _mem_tracker->set(_hash_set->mem_usage());
exec/intersect_node.h:    int64_t mem_usage() const {
exec/intersect_node.h:            usage += _hash_set->mem_usage();
exec/join_hash_map.cpp:int64_t JoinHashTable::mem_usage() const {
exec/join_hash_map.h:    int64_t mem_usage() const;
exec/pipeline/hashjoin/hash_join_build_operator.cpp:                _join_builder->hash_join_builder()->hash_table_mem_usage());
exec/pipeline/hashjoin/spillable_hash_join_build_operator.cpp:        return chunk->memory_usage() + _join_builder->hash_join_builder()->hash_table().mem_usage();
exec/pipeline/hashjoin/spillable_hash_join_build_operator.cpp:    return _join_builder->hash_join_builder()->hash_table().mem_usage() * 2;
exec/pipeline/hashjoin/spillable_hash_join_build_operator.cpp:        auto num_partitions = ht.mem_usage() * 2 / _join_builder->spiller()->options().spill_mem_table_bytes_size;
exec/pipeline/hashjoin/spillable_hash_join_build_operator.cpp:            [this]() { set_revocable_mem_bytes(_join_builder->hash_join_builder()->hash_table().mem_usage()); }};
exec/pipeline/hashjoin/spillable_hash_join_probe_operator.cpp:    int64_t hash_table_mem_usage = builder->hash_table_mem_usage();
exec/pipeline/hashjoin/spillable_hash_join_probe_operator.cpp:                hash_table_mem_usage = builder->hash_table_mem_usage();
exec/pipeline/scan/connector_scan_operator.cpp:        int64_t data_source_mem_bytes = _data_source->estimated_mem_usage();
exec/pipeline/scan/connector_scan_operator.cpp:        if (data_source_mem_bytes == 0 && _data_source->can_estimate_mem_usage()) {
exec/sorting/merge.h:    int64_t mem_usage() const { return chunk->memory_usage(); }
exec/sorting/merge.h:    int64_t mem_usage() const {
exec/sorting/merge.h:            res += run.mem_usage();
exec/spill/mem_table.h:    size_t mem_usage() { return _tracker->consumption(); }
exec/spill/spill_components.cpp:                mem_table->mem_usage() + partition->bytes > options().spill_mem_table_bytes_size) {
exec/spill/spill_components.cpp:                partition->bytes += mem_table->mem_usage();
exec/spill/spill_components.cpp:        } else if (mem_table->mem_usage() > 0) {
exec/spill/spill_components.cpp:                      return left->spill_writer->mem_table()->mem_usage() >
exec/spill/spill_components.cpp:                             right->spill_writer->mem_table()->mem_usage();
exec/spill/spill_components.cpp:            accumulate_spill_bytes += mem_table->mem_usage();
exec/spill/spill_components.cpp:    auto mem_table_mem_usage = mem_table->mem_usage();
exec/spill/spill_components.cpp:                                   mem_table->mem_usage(), mem_table->num_rows());
exec/spill/spiller.hpp:                                   partition->mem_size = mem_table->mem_usage();
exec/topn_node.cpp:    _mem_tracker->set(_chunks_sorter->mem_usage());
exprs/function_context.h:    size_t mem_usage() { return _mem_usage; }
exprs/jit/jit_engine.h:    size_t get_cache_mem_usage() const {
io/shared_buffered_input_stream.cpp:    _update_estimated_mem_usage();
io/shared_buffered_input_stream.cpp:    _update_estimated_mem_usage();
io/shared_buffered_input_stream.cpp:void SharedBufferedInputStream::_update_estimated_mem_usage() {
io/shared_buffered_input_stream.h:    int64_t estimated_mem_usage() const { return _estimated_mem_usage; }
io/shared_buffered_input_stream.h:    void _update_estimated_mem_usage();
runtime/mem_tracker.h:        _mem_tracker->release(ptr->mem_usage());
storage/lake/metacache.cpp:    auto mem_cost = segment->mem_usage();
storage/lake/tablet_manager.cpp:    auto cache_size = inserted ? schema->mem_usage() : 0;
storage/lake/tablet_manager.cpp:    auto cache_size = inserted ? schema->mem_usage() : 0;
storage/rowset/bitmap_index_reader.cpp:    MEM_TRACKER_SAFE_RELEASE(GlobalEnv::GetInstance()->bitmap_index_mem_tracker(), mem_usage());
storage/rowset/bitmap_index_reader.cpp:                                     mem_usage() - sizeof(BitmapIndexReader));
storage/rowset/bitmap_index_reader.h:    size_t mem_usage() const {
storage/rowset/bitmap_index_reader.h:            size += _dict_column_reader->mem_usage();
storage/rowset/bitmap_index_reader.h:            size += _bitmap_column_reader->mem_usage();
storage/rowset/bloom_filter_index_reader.cpp:    MEM_TRACKER_SAFE_RELEASE(GlobalEnv::GetInstance()->bloom_filter_index_mem_tracker(), mem_usage());
storage/rowset/bloom_filter_index_reader.cpp:                                     mem_usage() - sizeof(BloomFilterIndexReader));
storage/rowset/bloom_filter_index_reader.h:    size_t mem_usage() const {
storage/rowset/bloom_filter_index_reader.h:            size += _bloom_filter_reader->mem_usage();
storage/rowset/column_reader.cpp:        _meta_mem_usage.fetch_add(_ordinal_index->mem_usage(), std::memory_order_relaxed);
storage/rowset/column_reader.cpp:        _meta_mem_usage.fetch_add(_zonemap_index->mem_usage());
storage/rowset/column_reader.cpp:        _meta_mem_usage.fetch_add(_bitmap_index->mem_usage(), std::memory_order_relaxed);
storage/rowset/column_reader.cpp:        _meta_mem_usage.fetch_add(_bloom_filter_index->mem_usage(), std::memory_order_relaxed);
storage/rowset/column_reader.cpp:size_t ColumnReader::mem_usage() const {
storage/rowset/column_reader.cpp:            size += reader->mem_usage();
storage/rowset/column_reader.h:    size_t mem_usage() const;
storage/rowset/index_page.h:    size_t mem_usage() const {
storage/rowset/indexed_column_reader.h:    size_t mem_usage() const {
storage/rowset/indexed_column_reader.h:        size += _meta.SpaceUsedLong() + _ordinal_index_reader.mem_usage() + _value_index_reader.mem_usage();
storage/rowset/ordinal_page_index.cpp:    MEM_TRACKER_SAFE_RELEASE(GlobalEnv::GetInstance()->ordinal_index_mem_tracker(), mem_usage());
storage/rowset/ordinal_page_index.cpp:                                     mem_usage() - sizeof(OrdinalIndexReader))
storage/rowset/ordinal_page_index.h:    size_t mem_usage() const {
storage/rowset/page_handle.h:    int64_t mem_usage() const {
storage/rowset/rowset.cpp:    MEM_TRACKER_SAFE_CONSUME(GlobalEnv::GetInstance()->rowset_metadata_mem_tracker(), _mem_usage());
storage/rowset/rowset.cpp:    MEM_TRACKER_SAFE_RELEASE(GlobalEnv::GetInstance()->rowset_metadata_mem_tracker(), _mem_usage());
storage/rowset/rowset.h:    int64_t _mem_usage() const { return sizeof(Rowset) + _rowset_path.length(); }
storage/rowset/rowset_meta.cpp:    _mem_usage = _calc_mem_usage();
storage/rowset/rowset_meta.cpp:    _mem_usage = _calc_mem_usage();
storage/rowset/rowset_meta.cpp:    _mem_usage = _calc_mem_usage();
storage/rowset/rowset_meta.h:    int64_t mem_usage() const { return _mem_usage; }
storage/rowset/rowset_meta.h:    int64_t _calc_mem_usage() const {
storage/rowset/segment.cpp:    MEM_TRACKER_SAFE_CONSUME(GlobalEnv::GetInstance()->segment_metadata_mem_tracker(), _basic_info_mem_usage());
storage/rowset/segment.cpp:    MEM_TRACKER_SAFE_RELEASE(GlobalEnv::GetInstance()->segment_metadata_mem_tracker(), _basic_info_mem_usage());
storage/rowset/segment.cpp:    MEM_TRACKER_SAFE_RELEASE(GlobalEnv::GetInstance()->short_key_index_mem_tracker(), _short_key_index_mem_usage());
storage/rowset/segment.cpp:                                     _short_key_index_mem_usage());
storage/rowset/segment.cpp:size_t Segment::_column_index_mem_usage() const {
storage/rowset/segment.cpp:        size += reader->mem_usage();
storage/rowset/segment.cpp:size_t Segment::mem_usage() const {
storage/rowset/segment.cpp:        return _basic_info_mem_usage();
storage/rowset/segment.cpp:    return _basic_info_mem_usage() + _short_key_index_mem_usage() + _column_index_mem_usage();
storage/rowset/segment.h:    size_t mem_usage() const;
storage/rowset/segment.h:    size_t _basic_info_mem_usage() const { return sizeof(Segment) + _segment_file_info.path.size(); }
storage/rowset/segment.h:    size_t _short_key_index_mem_usage() const {
storage/rowset/segment.h:        size_t size = _sk_index_handle.mem_usage();
storage/rowset/segment.h:            size += _sk_index_decoder->mem_usage();
storage/rowset/segment.h:    size_t _column_index_mem_usage() const;
storage/rowset/zone_map_index.cpp:    MEM_TRACKER_SAFE_RELEASE(GlobalEnv::GetInstance()->column_zonemap_index_mem_tracker(), mem_usage());
storage/rowset/zone_map_index.cpp:                                     mem_usage() - sizeof(ZoneMapIndexReader))
storage/rowset/zone_map_index.cpp:size_t ZoneMapIndexReader::mem_usage() const {
storage/rowset/zone_map_index.h:    size_t mem_usage() const;
storage/short_key_index.h:    int64_t mem_usage() const {
storage/tablet.cpp:    MEM_TRACKER_SAFE_CONSUME(GlobalEnv::GetInstance()->tablet_metadata_mem_tracker(), _mem_usage());
storage/tablet.cpp:    MEM_TRACKER_SAFE_CONSUME(GlobalEnv::GetInstance()->tablet_metadata_mem_tracker(), _mem_usage());
storage/tablet.cpp:    MEM_TRACKER_SAFE_RELEASE(GlobalEnv::GetInstance()->tablet_metadata_mem_tracker(), _mem_usage());
storage/tablet.h:    int64_t _mem_usage() { return sizeof(Tablet); }
storage/tablet_index.h:    int64_t mem_usage() const {
storage/tablet_meta.cpp:    MEM_TRACKER_SAFE_CONSUME(GlobalEnv::GetInstance()->tablet_metadata_mem_tracker(), _mem_usage());
storage/tablet_meta.cpp:    MEM_TRACKER_SAFE_CONSUME(GlobalEnv::GetInstance()->tablet_metadata_mem_tracker(), _mem_usage());
storage/tablet_meta.cpp:    MEM_TRACKER_SAFE_RELEASE(GlobalEnv::GetInstance()->tablet_metadata_mem_tracker(), _mem_usage());
storage/tablet_meta.h:    int64_t _mem_usage() const { return sizeof(TabletMeta); }
storage/tablet_schema.cpp:int64_t TabletSchema::mem_usage() const {
storage/tablet_schema.cpp:        mem_usage += col.mem_usage();
storage/tablet_schema.cpp:        mem_usage += index.mem_usage();
storage/tablet_schema.h:    int64_t mem_usage() const {
storage/tablet_schema.h:            mem_usage += subcolumn(i).mem_usage();
storage/tablet_schema.h:    int64_t mem_usage() const;
storage/tablet_schema_map.cpp:    int64_t mem_usage = tablet_schema->mem_usage();
storage/tablet_schema_map.cpp:    int64_t new_mem_usage = tablet_schema->mem_usage();
types/bitmap_value.h:    int64_t mem_usage() const {
types/hll.h:    uint64_t mem_usage() const { return max_serialized_size(); }
util/json.h:    uint64_t mem_usage() const { return serialize_size(); }
util/percentile_value.h:    uint64_t mem_usage() const { return 1 + _tdigest.serialize_size(); }
