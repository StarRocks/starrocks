// Copyright 2021-present StarRocks, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "exprs/utility_functions.h"

#include "column/column_visitor_adapter.h"
#include "gen_cpp/FrontendService_types.h"
#include "runtime/client_cache.h"

#ifdef __SSE4_2__
#include <emmintrin.h>
#endif
#include <unistd.h>

#include <algorithm>
#include <atomic>
#include <cstdint>
#include <cstdlib>
#include <limits>
#include <random>

#include "column/binary_column.h"
#include "column/column_builder.h"
#include "column/column_helper.h"
#include "column/column_viewer.h"
#include "column/vectorized_fwd.h"
#include "common/config.h"
#include "common/version.h"
#include "exec/pipeline/fragment_context.h"
#include "exprs/function_context.h"
#include "gutil/casts.h"
#include "gutil/endian.h"
#include "runtime/runtime_state.h"
#include "service/backend_options.h"
#include "storage/key_coder.h"
#include "types/logical_type.h"
#include "util/cidr.h"
#include "util/monotime.h"
#include "util/network_util.h"
#include "util/thrift_rpc_helper.h"
#include "util/time.h"

namespace starrocks {

StatusOr<ColumnPtr> UtilityFunctions::version(FunctionContext* context, const Columns& columns) {
    return ColumnHelper::create_const_column<TYPE_VARCHAR>("5.1.0", 1);
}

StatusOr<ColumnPtr> UtilityFunctions::current_version(FunctionContext* context, const Columns& columns) {
    static std::string version = std::string(STARROCKS_VERSION) + "-" + STARROCKS_COMMIT_HASH;
    return ColumnHelper::create_const_column<TYPE_VARCHAR>(version, 1);
}

StatusOr<ColumnPtr> UtilityFunctions::sleep(FunctionContext* context, const Columns& columns) {
    ColumnViewer<TYPE_INT> data_column(columns[0]);

    auto size = columns[0]->size();
    ColumnBuilder<TYPE_BOOLEAN> result(size);
    auto& cancelled = context->state()->cancelled_ref();
    for (int row = 0; row < size; ++row) {
        if (data_column.is_null(row)) {
            result.append_null();
            continue;
        }

        int32_t seconds = data_column.value(row);
        // TODO: don't use system sleep, which will block current thread
        while (seconds-- > 0) {
            RETURN_IF(cancelled.load(), Status::Cancelled("cancelled during sleep function"));
            SleepFor(MonoDelta::FromSeconds(1));
        }
        result.append(true);
    }

    return result.build(ColumnHelper::is_all_const(columns));
}

StatusOr<ColumnPtr> UtilityFunctions::last_query_id(FunctionContext* context, const Columns& columns) {
    starrocks::RuntimeState* state = context->state();
    const std::string& id = state->last_query_id();
    if (!id.empty()) {
        return ColumnHelper::create_const_column<TYPE_VARCHAR>(id, 1);
    } else {
        return ColumnHelper::create_const_null_column(1);
    }
}

// UUID fixed 33 bytes.
// 16bytes-16bytes
// UUIDs generated by 128 bit uuid_numeric()
// The first 48 bits are a timestamp, representing milliseconds since the chosen epoch.
// The next 16 bits represent a machine ID. (IP ^ PORT, later we will use a backend ID)
// The next 16 bits are random value.
// The next 16 bits are thread id.
// The next 32 bits are increasement value.
StatusOr<ColumnPtr> UtilityFunctions::uuid(FunctionContext* ctx, const Columns& columns) {
    int32_t num_rows = ColumnHelper::get_const_value<TYPE_INT>(columns.back());

    ASSIGN_OR_RETURN(auto col, UtilityFunctions::uuid_numeric(ctx, columns));
    auto& uuid_data = down_cast<Int128Column*>(col.get())->get_data();

    auto res = BinaryColumn::create();
    auto& bytes = res->get_bytes();
    auto& offsets = res->get_offset();

    offsets.resize(num_rows + 1);
    bytes.resize(36 * num_rows);

    char* ptr = reinterpret_cast<char*>(bytes.data());

    for (int i = 0; i < num_rows; ++i) {
        offsets[i + 1] = offsets[i] + 36;
    }

#ifdef __SSE4_2__
    alignas(16) static constexpr const char hex_chars[16] = {'0', '1', '2', '3', '4', '5', '6', '7',
                                                             '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    const __m128i mask = _mm_set1_epi8(0xF);
    const __m128i chars = _mm_load_si128(reinterpret_cast<const __m128i*>(hex_chars));
#endif

    for (int i = 0; i < num_rows; ++i) {
        char buff[32];
        memset(ptr, '-', 36);
#ifdef __SSE4_2__
        // SIMD::to_hex
        __m128i value = _mm_loadu_si64(reinterpret_cast<const __m128i*>(&uuid_data[i]));
        // 0x1234
        //-> [0x34, 0x12]
        //-> [0x23, 0x01] right shift
        //-> [0x34, 0x23, 0x12, 0x01] pack
        //-> [0x04, 0x03, 0x02, 0x01] mask operator
        //-> shuffle
        value = _mm_and_si128(_mm_unpacklo_epi8(_mm_srli_epi64(value, 4), value), mask);
        value = _mm_shuffle_epi8(chars, value);
        _mm_storeu_si128(reinterpret_cast<__m128i*>(buff), value);

        value = _mm_loadu_si64(reinterpret_cast<const __m128i*>(reinterpret_cast<const int64_t*>(&uuid_data[i]) + 1));
        value = _mm_and_si128(_mm_unpacklo_epi8(_mm_srli_epi64(value, 4), value), mask);
        value = _mm_shuffle_epi8(chars, value);
        _mm_storeu_si128(reinterpret_cast<__m128i*>(buff + 16), value);
#else
        to_hex(uuid_data[i], buff);
        std::reverse(buff, buff + 32);
#endif

        // UUID format 8-4-4-4-12

        memcpy(ptr, buff, 8);
        memcpy(ptr + 8 + 1, buff + 8, 4);
        memcpy(ptr + 8 + 4 + 2, buff + 8 + 4, 4);
        memcpy(ptr + 8 + 4 + 4 + 3, buff + 8 + 4 + 4, 4);
        memcpy(ptr + 8 + 4 + 4 + 4 + 4, buff + 8 + 4 + 4 + 4, 12);

        ptr += 36;
    }

    return res;
}

inline int128_t next_uuid(int64_t timestamp, int16_t backendId, int16_t rand, int16_t tid, int32_t inc) {
    union {
        struct {
            int64_t timestamp : 48;
            int64_t instance : 16;
            int16_t rand;
            int16_t tid;
            int32_t inc;
        } data;
        int128_t res;
    } v;
    v.data.timestamp = timestamp;
    v.data.instance = backendId;
    v.data.rand = rand;
    v.data.tid = tid;
    v.data.inc = inc;
    return v.res;
}

static std::atomic<int32_t> s_counter{};
// thread ids
// The number of executor threads is fixed.
static std::atomic<int16_t> inc{};
//
static thread_local int uniq_tid = -1;

int16_t get_uniq_tid() {
    if (uniq_tid == -1) {
        uniq_tid = inc.fetch_add(1);
    }
    return uniq_tid;
}

StatusOr<ColumnPtr> UtilityFunctions::uuid_numeric(FunctionContext*, const Columns& columns) {
    int32_t num_rows = ColumnHelper::get_const_value<TYPE_INT>(columns.back());
    auto result = Int128Column::create(num_rows);

    static std::random_device rd;
    static std::mt19937 mt(rd());

    std::uniform_int_distribution<int16_t> dist(std::numeric_limits<int16_t>::min(),
                                                std::numeric_limits<int16_t>::max());

    auto& data = result->get_data();

    uint32_t intip;
    CIDR::ip_to_int(BackendOptions::get_localhost(), &intip);
    intip ^= config::brpc_port;
    // current thread id
    int tid = get_uniq_tid();
    int64_t timestamp = GetCurrentTimeMicros();

    int16_t rand = dist(mt);
    int32_t inc = s_counter.fetch_add(num_rows);

    for (int i = 0; i < num_rows; ++i) {
        data[i] = next_uuid(timestamp, intip, rand, tid, inc - i);
    }

    return result;
}

StatusOr<ColumnPtr> UtilityFunctions::assert_true(FunctionContext* context, const Columns& columns) {
    auto column = columns[0];
    std::string msg = "assert_true failed due to false value";
    if (columns.size() > 1 && columns[1]->is_constant()) {
        msg = ColumnHelper::get_const_value<TYPE_VARCHAR>(columns[1]).to_string();
    }

    const auto size = column->size();

    if (column->has_null()) {
        throw std::runtime_error("assert_true failed due to null value");
    }

    if (column->is_constant()) {
        bool const_value = ColumnHelper::get_const_value<TYPE_BOOLEAN>(column);
        if (!const_value) {
            throw std::runtime_error(msg);
        }
    } else {
        if (column->is_nullable()) {
            column = FunctionHelper::get_data_column_of_nullable(column);
        }
        auto bool_column = ColumnHelper::cast_to<TYPE_BOOLEAN>(column);
        const auto& data = bool_column->get_data();
        for (size_t i = 0; i < size; ++i) {
            if (!data[i]) {
                throw std::runtime_error(msg);
            }
        }
    }
    return ColumnHelper::create_const_column<TYPE_BOOLEAN>(true, size);
}

StatusOr<ColumnPtr> UtilityFunctions::host_name(FunctionContext* context, const Columns& columns) {
    std::string host_name;
    auto status = get_hostname(&host_name);
    if (status.ok()) {
        return ColumnHelper::create_const_column<TYPE_VARCHAR>(host_name, 1);
    } else {
        host_name = "error";
        return ColumnHelper::create_const_column<TYPE_VARCHAR>(host_name, 1);
    }
}

StatusOr<ColumnPtr> UtilityFunctions::get_query_profile(FunctionContext* context, const Columns& columns) {
    RETURN_IF_COLUMNS_ONLY_NULL(columns);
    ColumnViewer<TYPE_VARCHAR> viewer(columns[0]);
    auto* state = context->state();
    if (state->fragment_ctx() == nullptr) {
        return Status::NotSupported("unsupport get_query_profile for no-pipeline");
    }

    const auto& fe_addr = state->fragment_ctx()->fe_addr();
    TGetProfileResponse res;
    TGetProfileRequest req;

    std::vector<std::string> query_ids;
    for (size_t i = 0; i < columns[0]->size(); ++i) {
        query_ids.emplace_back(viewer.value(i));
    }
    req.__set_query_id(query_ids);

    RETURN_IF_ERROR(ThriftRpcHelper::rpc<FrontendServiceClient>(
            fe_addr.hostname, fe_addr.port,
            [&](FrontendServiceConnection& client) { client->getQueryProfile(res, req); }));

    ColumnBuilder<TYPE_VARCHAR> builder(state->chunk_size());
    for (const auto& result : res.query_result) {
        builder.append(result);
    }

    return builder.build(false);
}

StatusOr<ColumnPtr> UtilityFunctions::bar(FunctionContext* context, const Columns& columns) {
    static std::u8string kBar = u8"\u2593";
    RETURN_IF(columns.size() != 4, Status::InvalidArgument("expect 4 arguments"));
    RETURN_IF(!columns[1]->is_constant(), Status::InvalidArgument("argument[min] must be constant"));
    RETURN_IF(!columns[2]->is_constant(), Status::InvalidArgument("argument[max] must be constant"));
    RETURN_IF(!columns[3]->is_constant(), Status::InvalidArgument("argument[width] must be constant"));

    ColumnViewer<TYPE_BIGINT> viewer_size(columns[0]);
    ColumnViewer<TYPE_BIGINT> viewer_min(columns[1]);
    ColumnViewer<TYPE_BIGINT> viewer_max(columns[2]);
    ColumnViewer<TYPE_BIGINT> viewer_width(columns[3]);
    size_t rows = columns[0]->size();
    ColumnBuilder<TYPE_VARCHAR> builder(rows);

    size_t min = viewer_min.value(0);
    size_t max = viewer_max.value(0);
    size_t width = viewer_width.value(0);
    RETURN_IF(min >= max, Status::InvalidArgument("requirement: min < max"));
    RETURN_IF(width <= 0, Status::InvalidArgument("requirement: width > 0"));

    for (size_t i = 0; i < rows; i++) {
        size_t size = viewer_size.value(i);
        RETURN_IF(size < min, Status::InvalidArgument("requirement: size >= min"));
        RETURN_IF(size > max, Status::InvalidArgument("requirement: size <= max"));

        double ratio = std::min<double>(1.0, 1.0 * (size - min) / (max - min));
        size_t result_width = ratio * width;
        std::string bar;
        for (size_t j = 0; j < result_width; j++) {
            bar.append(reinterpret_cast<const char*>(kBar.c_str()));
        }
        builder.append(bar);
    }
    return builder.build(false);
}

StatusOr<ColumnPtr> UtilityFunctions::equiwidth_bucket(FunctionContext* context, const Columns& columns) {
    RETURN_IF(columns.size() != 4, Status::InvalidArgument("expect 4 arguments"));
    RETURN_IF(!columns[1]->is_constant(), Status::InvalidArgument("argument[min] must be constant"));
    RETURN_IF(!columns[2]->is_constant(), Status::InvalidArgument("argument[max] must be constant"));
    RETURN_IF(!columns[3]->is_constant(), Status::InvalidArgument("argument[bucket] must be constant"));

    ColumnViewer<TYPE_BIGINT> viewer_size(columns[0]);
    ColumnViewer<TYPE_BIGINT> viewer_min(columns[1]);
    ColumnViewer<TYPE_BIGINT> viewer_max(columns[2]);
    ColumnViewer<TYPE_BIGINT> viewer_buckets(columns[3]);
    size_t rows = columns[0]->size();
    ColumnBuilder<TYPE_BIGINT> builder(rows);

    size_t min = viewer_min.value(0);
    size_t max = viewer_max.value(0);
    size_t buckets = viewer_buckets.value(0);
    RETURN_IF(min >= max, Status::InvalidArgument("requirement: min < max"));
    RETURN_IF(buckets <= 0, Status::InvalidArgument("requirement: buckets > 0"));

    for (size_t i = 0; i < rows; i++) {
        size_t size = viewer_size.value(i);
        RETURN_IF(size < min, Status::InvalidArgument("requirement: size >= min"));
        RETURN_IF(size > max, Status::InvalidArgument("requirement: size <= max"));

        size_t bucket = (size - min) / std::max<size_t>(1, ((max - min) / buckets));
        builder.append(bucket);
    }
    return builder.build(false);
}

// Helpers copied and adapted from storage/primary_key_encoder.cpp for order-preserving encoding
namespace detail {
template <class UT>
UT to_bigendian_generic(UT v);

template <>
uint8_t to_bigendian_generic(uint8_t v) {
    return v;
}
template <>
uint16_t to_bigendian_generic(uint16_t v) {
    return BigEndian::FromHost16(v);
}
template <>
uint32_t to_bigendian_generic(uint32_t v) {
    return BigEndian::FromHost32(v);
}
template <>
uint64_t to_bigendian_generic(uint64_t v) {
    return BigEndian::FromHost64(v);
}

template <class T>
void encode_integral(const T& v, std::string* dest) {
    if constexpr (std::is_signed<T>::value) {
        using UT = typename std::make_unsigned<T>::type;
        UT uv = static_cast<UT>(v);
        uv ^= static_cast<UT>(1) << (sizeof(UT) * 8 - 1);
        uv = to_bigendian_generic(uv);
        dest->append(reinterpret_cast<const char*>(&uv), sizeof(uv));
    } else {
        T nv = to_bigendian_generic(v);
        dest->append(reinterpret_cast<const char*>(&nv), sizeof(nv));
    }
}

inline void encode_slice_middle(const Slice& s, std::string* dst) {
    // Escape zero bytes and append 0x00 0x00 terminator
    size_t old_size = dst->size();
    dst->resize(old_size + s.size * 2 + 2);
    const auto* srcp = reinterpret_cast<const uint8_t*>(s.data);
    auto* dstp = reinterpret_cast<uint8_t*>(&(*dst)[old_size]);
    for (size_t i = 0; i < s.size; i++) {
        uint8_t b = srcp[i];
        if (b == 0) {
            *dstp++ = 0;
            *dstp++ = 1;
        } else {
            *dstp++ = b;
        }
    }
    *dstp++ = 0;
    *dstp++ = 0;
    dst->resize(reinterpret_cast<char*>(dstp) - &(*dst)[0]);
}

inline void encode_slice_last(const Slice& s, std::string* dst) {
    dst->append(s.data, s.size);
}

inline void encode_float32(float v, std::string* dest) {
    uint32_t u;
    static_assert(sizeof(u) == sizeof(v), "size mismatch");
    memcpy(&u, &v, sizeof(u));
    // If negative, flip all bits; else flip sign bit only.
    u ^= (u & 0x80000000u) ? 0xFFFFFFFFu : 0x80000000u;
    u = BigEndian::FromHost32(u);
    dest->append(reinterpret_cast<const char*>(&u), sizeof(u));
}

inline void encode_float64(double v, std::string* dest) {
    uint64_t u;
    static_assert(sizeof(u) == sizeof(v), "size mismatch");
    memcpy(&u, &v, sizeof(u));
    u ^= (u & 0x8000000000000000ull) ? 0xFFFFFFFFFFFFFFFFull : 0x8000000000000000ull;
    u = BigEndian::FromHost64(u);
    dest->append(reinterpret_cast<const char*>(&u), sizeof(u));
}

constexpr uint8_t SORT_KEY_NULL_FIRST_MARKER = 0x00;
constexpr uint8_t SORT_KEY_NORMAL_MARKER = 0x01;

struct EncoderVisitor : public ColumnVisitorAdapter<EncoderVisitor> {
    size_t row = 0;
    bool is_last_field = false;
    bool has_nullable = false;
    std::string* buff;

    explicit EncoderVisitor(std::string* b) : ColumnVisitorAdapter(this), buff(b) {}

    // Nullable wrapper: emit marker then visit inner
    Status do_visit(const NullableColumn& column) {
        if (has_nullable) {
            (*buff).push_back(column.is_null(row) ? SORT_KEY_NULL_FIRST_MARKER : SORT_KEY_NORMAL_MARKER);
        }
        if (column.is_null(row)) return Status::OK();
        return column.data_column()->accept(this);
    }

    // Const: forward to data
    Status do_visit(const ConstColumn& column) { return column.data_column()->accept(this); }

    // Strings/binary
    Status do_visit(const BinaryColumn& column) {
        Slice s = column.get_slice(row);
        if (is_last_field) {
            encode_slice_last(s, buff);
        } else {
            encode_slice_middle(s, buff);
        }
        return Status::OK();
    }
    Status do_visit(const LargeBinaryColumn& column) { return do_visit(down_cast<const BinaryColumn&>(column)); }

    // Fixed-length numerics
    template <typename T>
    Status do_visit(const FixedLengthColumn<T>& column) {
        if constexpr (std::is_same_v<T, float>) {
            encode_float32(column.get_data()[row], buff);
        } else if constexpr (std::is_same_v<T, double>) {
            encode_float64(column.get_data()[row], buff);
        } else {
            encode_integral<T>(column.get_data()[row], buff);
        }
        return Status::OK();
    }

    // DecimalV2Value encoded as Largeint via KeyCoder
    Status do_visit(const DecimalColumn& column) {
        DecimalV2Value v = column.get_data()[row];
        const KeyCoder* coder = get_key_coder(TYPE_DECIMALV2);
        coder->full_encode_ascending(&v, buff);
        return Status::OK();
    }

    // Decimal32/64/128 underlying fixed columns are handled by template above
    Status do_visit(const Decimal32Column& column) {
        return do_visit(down_cast<const FixedLengthColumn<int32_t>&>(column));
    }
    Status do_visit(const Decimal64Column& column) {
        return do_visit(down_cast<const FixedLengthColumn<int64_t>&>(column));
    }
    Status do_visit(const Decimal128Column& column) {
        return do_visit(down_cast<const FixedLengthColumn<int128_t>&>(column));
    }

    // Unsupported complex types map/array/struct/json/hll/bitmap/percentile
    template <typename T>
    Status do_visit(const T& column) {
        return Status::NotSupported("make_sort_key: unsupported argument type");
    }
};
} // namespace detail

StatusOr<ColumnPtr> UtilityFunctions::make_sort_key(FunctionContext* context, const Columns& columns) {
    int num_args = columns.size();
    RETURN_IF(num_args < 1, Status::InvalidArgument("make_sort_key requires at least 1 argument"));

    size_t num_rows = columns[0]->size();
    auto result = ColumnBuilder<TYPE_VARBINARY>(num_rows);
    bool has_nullable =
            std::any_of(columns.begin(), columns.end(), [](const ColumnPtr& c) { return c->is_nullable(); });

    detail::EncoderVisitor visitor(nullptr);

    std::string buff;
    for (size_t row = 0; row < num_rows; ++row) {
        buff.clear();
        visitor.row = row;
        visitor.has_nullable = has_nullable;
        visitor.buff = &buff;

        for (int j = 0; j < num_args; ++j) {
            visitor.is_last_field = (j + 1 == num_args);
            RETURN_IF_ERROR(columns[j]->accept(&visitor));
        }
        result.append(buff);
    }

    return result.build(false);
}

} // namespace starrocks

#include "gen_cpp/opcode/UtilityFunctions.inc"
